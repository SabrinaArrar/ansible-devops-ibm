---
# Create Security Group and add ingress ,egress rules
# -----------------------------------------------------------------------------
- name: Check if Security Group {{ docdb_security_group_name }} already exists
  command: >
    aws ec2 describe-security-groups \
    --filters "Name=vpc-id,Values={{ vpc_id }}" "Name=group-name,Values={{ docdb_security_group_name }}"
  register: security_group_info

- name: Set Fact , Security Group Id
  when: security_group_info is defined and security_group_info != ''
  set_fact:
    sg_id: "{{security_group_info.stdout | from_json | json_query('SecurityGroups[0].GroupId')}}"

- name: Create a Security Group {{ docdb_security_group_name }}, if doesn't exists
  when: not sg_id
  command: >
    aws ec2 create-security-group \
    --group-name '{{ docdb_security_group_name }}' \
    --description "Enable inbound connection security group" \
    --vpc-id '{{ vpc_id }}'
  register: sg_info

- name: Fail if Security group not created
  when: not sg_id
  assert:
    that:
      - sg_info is defined and sg_info != ''
      - sg_info.stdout
      - sg_info.stdout | from_json | json_query('GroupId')

- name: Set Fact, Security group Id
  when: not sg_id
  set_fact:
    sg_id: "{{sg_info.stdout | from_json | json_query('GroupId')}}"

- name: Debug Information - Add Ingress rule to SG
  debug:
    msg:
      - "sg_id ............................................ {{sg_id}}"
      - "docdb_ingress_cidr ............................... {{docdb_ingress_cidr}}"
      - "docdb_ingress_sec_cidr ........................... {{docdb_ingress_sec_cidr}}"
      - "docdb_egress_cidr ................................ {{docdb_egress_cidr}}"
      - "docdb_egress_sec_cidr ............................ {{docdb_egress_sec_cidr}}"

# allow incoming requests documentdb cluster from a cidr address
- name: Add Ingress rule to SG
  when:
    - docdb_ingress_sec_cidr is not defined or docdb_ingress_sec_cidr == ''
  command: >
    aws ec2 authorize-security-group-ingress \
    --group-id '{{ sg_id }}' \
    --ip-permissions \
    IpProtocol=tcp,FromPort=22,ToPort=22,IpRanges='[{CidrIp=0.0.0.0/0}]' \
    IpProtocol=tcp,FromPort=27017,ToPort=27017,IpRanges='[{ CidrIp={{ docdb_ingress_cidr }} } ]',Ipv6Ranges='[{CidrIpv6=::/0}]'
  register: ingress_rule_info
  failed_when: >
    ingress_rule_info.rc not in [0] and ('InvalidPermission.Duplicate' not in ingress_rule_info.stderr )

- name: Add Ingress rule to SG
  when:
    - docdb_ingress_sec_cidr is defined and docdb_ingress_sec_cidr != ''
  command: >
    aws ec2 authorize-security-group-ingress \
    --group-id '{{ sg_id }}' \
    --ip-permissions \
    IpProtocol=tcp,FromPort=22,ToPort=22,IpRanges='[{CidrIp=0.0.0.0/0}]' \
    IpProtocol=tcp,FromPort=27017,ToPort=27017,IpRanges='[{ CidrIp={{ docdb_ingress_cidr }} } ]',Ipv6Ranges='[{CidrIpv6=::/0}]' \
    IpProtocol=tcp,FromPort=27017,ToPort=27017,IpRanges='[{ CidrIp={{ docdb_ingress_sec_cidr }} } ]'
  register: ingress_rule_info
  failed_when: >
    ingress_rule_info.rc not in [0] and ('InvalidPermission.Duplicate' not in ingress_rule_info.stderr )

- name: Debug Info, Added Ingress rule to Security Group
  when: ingress_rule_info.stdout
  debug:
    msg:
      - "{{ ingress_rule_info.stdout | from_json }}"

# allow outgoing requests from documentdb cluster to a cidr address
- name: Add Egress rule to SG
  when:
    - docdb_egress_sec_cidr is not defined or docdb_egress_sec_cidr == ''
  command: >
    aws ec2 authorize-security-group-egress \
    --group-id '{{ sg_id }}' \
    --ip-permissions \
    IpProtocol=-1,FromPort=0,ToPort=0,IpRanges='[{ CidrIp={{ docdb_egress_cidr }} }]',Ipv6Ranges='[{CidrIpv6=::/0}]'
  register: egress_rule_info
  failed_when: >
    egress_rule_info.rc not in [0] and ('InvalidPermission.Duplicate' not in egress_rule_info.stderr )

- name: Add Egress rule to SG
  when:
    - docdb_egress_sec_cidr is defined and docdb_egress_sec_cidr != ''
  command: >
    aws ec2 authorize-security-group-egress \
    --group-id '{{ sg_id }}' \
    --ip-permissions \
    IpProtocol=-1,FromPort=0,ToPort=0,IpRanges='[{ CidrIp={{ docdb_egress_cidr }} }]',Ipv6Ranges='[{CidrIpv6=::/0}]' \
    IpProtocol=-1,FromPort=0,ToPort=0,IpRanges='[{ CidrIp={{ docdb_egress_sec_cidr }} }]'
  register: egress_rule_info
  failed_when: >
    egress_rule_info.rc not in [0] and ('InvalidPermission.Duplicate' not in egress_rule_info.stderr )

- name: Debug Info, Added Egress rule to Security Group
  when: egress_rule_info.stdout
  debug:
    msg:
      - "{{ egress_rule_info.stdout | from_json }}"
