---
# Install and configure the Node Feature Discovery Operator
# -----------------------------------------------------------------------------
- include_tasks: tasks/nfd_setup.yml


# 1. Look up OCP version in Cluster
# -----------------------------------------------------------------------------
- name: "Look up cluster ocp version"
  kubernetes.core.k8s_info:
    api_version: config.openshift.io/v1
    name: "version"
    kind: ClusterVersion
  register: ocp_version_lookup

- name: "Set ocp version number"
  when: ocp_version_lookup.resources[0] is defined
  set_fact:
    ocp_version_num: "{{ ocp_version_lookup.resources[0].status.desired.version }}"

- name: "Set gpu driver version default for ocp 4.10+"
  when: ocp_version_num is version('4.10.0', '>')
  set_fact:
    gpu_driver_version: "{{ (_gpu_driver_version is defined and _gpu_driver_version != '') | ternary(_gpu_driver_version, rhel8_driver_version) }}"

- name: "Set gpu driver version for other ocp versions"
  when: ocp_version_num is version('4.10.0', '<')
  set_fact:
    gpu_driver_version: "{{ (_gpu_driver_version is defined and _gpu_driver_version != '') | ternary(_gpu_driver_version, rhel7_driver_version) }}"


# 2. Lookup the packagemanifest for gpu-operator-certified
# -----------------------------------------------------------------------------
- name: Get gpu-operator-certified package manifest
  kubernetes.core.k8s_info:
    api_version: packages.operators.coreos.com/v1
    kind: PackageManifest
    name: gpu-operator-certified
    namespace: openshift-marketplace  # Note: A namespace must be provided when calling packages.operators.coreos.com/v1
  register: gpu_manifest

- name: Assert that PackageManifest exists
  ansible.builtin.assert:
    that:
      - gpu_manifest is defined
      - gpu_manifest.resources is defined
      - gpu_manifest.resources | length == 1
    fail_msg: "PackageManifest not found: gpu-operator-certified"

- name: Set the subscription information
  set_fact:
    gpu_source: "{{ gpu_manifest.resources[0].status.catalogSource }}"
    gpu_source_namespace: "{{ gpu_manifest.resources[0].status.catalogSourceNamespace }}"
    gpu_default_channel: "{{ gpu_manifest.resources[0].status.defaultChannel: }}"


# 3. Provide Debug information
# -----------------------------------------------------------------------------
- name: "Debug information"
  debug:
    msg:
      - "OCP Release Version ................ {{ ocp_version_num }}"
      - "GPU Namespace ...................... {{ gpu_namespace }}"
      - "GPU Channel   ...................... {{ gpu_channel }}"
      - "GPU Driver Version ................. {{ gpu_driver_version }}"
      - "GPU Driver Repo Path ............... {{ gpu_driver_repository_path }}"


# 4. Create NVIDIA GPU project
# -----------------------------------------------------------------------------
- name: "Create gpu namespace"
  kubernetes.core.k8s:
    api_version: v1
    kind: Namespace
    name: '{{ gpu_namespace }}'


# 5. Create NVIDIA GPU operator group and subscription
# -----------------------------------------------------------------------------
- name: "Create gpu operator group"
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'templates/gpu-operatorgroup.yml.j2') }}"
    wait: yes
    wait_timeout: 60 #subsequent tasks will fail if the CRD isn't fully created

- name: "Create gpu subscription"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/gpu-subscription.yml.j2') }}"
    wait: yes
    wait_timeout: 300
    wait_condition:
      type: 'CatalogSourcesUnhealthy'
      status: "False"

- name: "Wait until ClusterPolicy CRD is available"
  kubernetes.core.k8s_info:
    api_version: apiextensions.k8s.io/v1
    name: "clusterpolicies.nvidia.com"
    kind: CustomResourceDefinition
    wait: yes
    wait_sleep: 10
    wait_timeout: 300 # 5 mins until we give up waiting for the CRD to get into the expected state
    wait_condition:
      type: NamesAccepted
      status: "True"
  register: gpu_crd_info
  retries: 120 # ~approx 5 minutes before we give up waiting for the CRD to be created
  delay: 5 # seconds
  until:
    - gpu_crd_info.resources is defined
    - gpu_crd_info.resources | length > 0


# 6. Create GPU Cluster Policy
# -----------------------------------------------------------------------------
- name: "Create Cluster Policy instance for ocp 4.10+"
  when: ocp_version_num is version('4.10', '>')
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/clusterpolicy-v2.yml.j2') }}"

- name: "Create Cluster Policy instance for other ocp versions"
  when: ocp_version_num is version('4.10', '<')
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/clusterpolicy.yml.j2') }}"


# 7. Wait for Cluster Policy to be ready
# -----------------------------------------------------------------------------
- name: "Wait for Cluster Policy instance to be ready (60s delay)"
  kubernetes.core.k8s_info:
    api_version: nvidia.com/v1
    name: "gpu-cluster-policy"
    kind: ClusterPolicy
  register: gpu_cr_result
  until:
    - gpu_cr_result.resources is defined and gpu_cr_result.resources | length == 1
    - gpu_cr_result.resources[0].status is defined
    - gpu_cr_result.resources[0].status.state is defined
    - gpu_cr_result.resources[0].status.state == 'ready'
  retries: 30 # approx 30 minutes before we give up
  delay: 60 # 1 minute
