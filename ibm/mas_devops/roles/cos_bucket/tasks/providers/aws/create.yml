---
- name: "Fail if aws_access_key_id is not provided"
  assert:
    that: aws_access_key_id is defined and aws_access_key_id != ""
    fail_msg: "aws_access_key_id property is required"

- name: "Fail if aws_secret_access_key is not provided"
  assert:
    that: aws_secret_access_key is defined and aws_secret_access_key != ""
    fail_msg: "aws_secret_access_key property is required"

# 1. Debug information
# ---------------------------------------------------------------------------------------------------------------------
- name: "Create AWS Bucket: Debug general info"
  debug:
    msg:
      - "AWS bucket name .................... {{ aws_bucket_name }}"
      - "AWS bucket region .................. {{ aws_bucket_region_location }}"
      - "AWS bucket versioning enabled ...... {{ aws_bucket_versioning_flag }}"
      - "AWS bucket encryption .............. {{ aws_bucket_encryption }}"
      - "AWS bucket endpoint ................ {{ aws_url }}"

# 2. Create AWS bucket
# ---------------------------------------------------------------------------------------------------------------------
- name: "Create AWS bucket: {{ aws_bucket_name }}"
  s3_bucket:
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    name: "{{ aws_bucket_name }}"
    versioning: "{{ aws_bucket_versioning_flag }}"
    encryption: "{{ aws_bucket_encryption }}"
    state: present
    region: "{{ aws_bucket_region_location }}"
  register: aws_bucket_creation_output

- name: "Assert AWS bucket '{{ ibmcos_bucket_name }}' was created"
  assert:
    that:
      - aws_bucket_creation_output.name == aws_bucket_name
    fail_msg: "Something went wrong with the {{ aws_bucket_name }} creation: {{ aws_bucket_creation_output }}"

# 3. Create AWS Read and Write User for bucket and get the credentials
# -----------------------------------------------------------------------------
- name: Create AWS Read and Write User 
  import_role:
    name: ibm.mas_devops.aws_user_creation
  vars:
    aws_user_name: "{{ aws_bucket_read_write_username }}"
    aws_user_action_list:
      - s3:GetObject
      - s3:ListBucket
      - s3:DeleteObject
      - s3:PutObject
    aws_resources_list: 
      - "{{ aws_bucket_arn }}/*"
      - "{{ aws_bucket_arn }}"

# # 4. Create AWS Read Only User for bucket 
# # -----------------------------------------------------------------------------
# - name: Create AWS Read Only User
#   import_role:
#     name: ibm.sre_devops.aws_user_creation
#   vars:
#     aws_user_name: "{{ bucket_read_only_username }}"
#     aws_user_action_list:
#       - s3:GetObject
#       - s3:ListBucket
#     aws_resources_list: 
#       - "{{ bucket_arn }}/*"
#       - "{{ bucket_arn }}"

# # 5. Create Bucket Access Point for client
# # -----------------------------------------------------------------------------
# - name: Create Bucket Access Point
#   import_role:
#     name: ibm.sre_devops.aws_bucket_access_point
#   vars:
#     aws_user_name: "{{ bucket_read_only_username }}"
#     s3_access_point_action_list:
#       - s3:GetObject
#       - s3:ListBucket

# #6. create object storage service credentials in k8s secret - s3secretkey
# # -----------------------------------------------------------------------------
# - name: Lookup AWS Read and Write User credentials
#   community.kubernetes.k8s_info:
#     api_version: v1
#     kind: Secret
#     name: "{{aws_user_name}}-credentials"
#     namespace: "{{ sre_namespace }}"
#   register: user_creds

# - name: Set facts for credentials and endpoints
#   set_fact:
#     service_cred_w_accesskey_id: "{{ user_creds.resources[0].data.aws_access_key_id }}"
#     service_cred_w_secret_accesskey: "{{ user_creds.resources[0].data.aws_secret_access_key }}"
#     bucket_endpoint: "s3.{{ aws_region }}.amazonaws.com"
#     bucket_endpoint_url: "https://s3.{{ aws_region }}.amazonaws.com"

- name: "AWS: Set access key id & secret access key variables"
  set_fact:
    cos_url: "{{ aws_url }}"
    cos_bucket_name: "{{ aws_bucket_name }}"
    cos_access_key_id: "{{ aws_access_key_id }}"
    cos_secret_access_key: "{{ aws_secret_access_key }}"
