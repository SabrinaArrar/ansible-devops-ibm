---
- name: "Fail if aws_access_key_id is not provided"
  assert:
    that: aws_access_key_id is defined and aws_access_key_id != ""
    fail_msg: "aws_access_key_id property is required"

- name: "Fail if aws_secret_access_key is not provided"
  assert:
    that: aws_secret_access_key is defined and aws_secret_access_key != ""
    fail_msg: "aws_secret_access_key property is required"

# 1. Debug information
# ---------------------------------------------------------------------------------------------------------------------
- name: "Create AWS Bucket: Debug general info"
  debug:
    msg:
      - "AWS bucket name .................... {{ aws_bucket_name }}"
      - "AWS bucket region .................. {{ aws_bucket_region_location }}"
      - "AWS bucket versioning enabled ...... {{ aws_bucket_versioning_flag }}"
      - "AWS bucket encryption .............. {{ aws_bucket_encryption }}"
      - "AWS bucket endpoint ................ {{ aws_url }}"

# 2. Create AWS bucket
# ---------------------------------------------------------------------------------------------------------------------
# - name: "Create AWS bucket: {{ aws_bucket_name }}"
#   s3_bucket:
#     aws_access_key: "{{ aws_access_key_id }}"
#     aws_secret_key: "{{ aws_secret_access_key }}"
#     name: "{{ aws_bucket_name }}"
#     versioning: "{{ aws_bucket_versioning_flag }}"
#     encryption: "{{ aws_bucket_encryption }}"
#     state: present
#     region: "{{ aws_bucket_region_location }}"
#   register: aws_bucket_creation_output

# - name: "Create AWS bucket: {{ aws_bucket_name }}"
#   command: > 
#     aws s3api create-bucket \
#       --bucket {{ aws_bucket_name }} \
#       --region {{ aws_bucket_region_location }} \
#       --create-bucket-configuration LocationConstraint={{ aws_bucket_region_location }}
#   register: aws_bucket_creation_output
#   failed_when: aws_bucket_creation_output.rc > 0 and ('BucketAlreadyOwnedByYou' not in aws_bucket_creation_output.stderr)

# - debug:
#     msg: "{{ aws_bucket_creation_output }}"

# - name: "Enable AWS bucket versioning for {{ aws_bucket_name }}"
#   when: aws_bucket_versioning_flag == True
#   command: > 
#     aws s3api put-bucket-versioning \
#       --bucket {{ aws_bucket_name }} \
#       --versioning-configuration Status=Enabled
#   register: aws_bucket_versioning_output
#   failed_when: "aws_bucket_versioning_output.rc > 1"

# - debug:
#     msg: "{{ aws_bucket_versioning_output }}"

# - name: "Enable AWS bucket encryption for {{ aws_bucket_name }}"
#   when: aws_bucket_encryption is defined and aws_bucket_encryption != ''
#   shell: | 
#     aws s3api put-bucket-encryption --bucket aws-s3-andrercm-bucket-cli --server-side-encryption-configuration '{{ aws_bucket_encryption }}'
#   register: aws_bucket_encryption_output
#   failed_when: "aws_bucket_encryption_output.rc > 1"

# - debug:
#     msg: "{{ aws_bucket_encryption_output }}"

# 3. Create AWS Read Only User for bucket 
# -----------------------------------------------------------------------------
- name: Create AWS IAM Users & Access Policies
  import_role:
    name: ibm.mas_devops.aws_user_creation

# # 4. Create AWS Read and Write User for bucket and get the credentials
# # -----------------------------------------------------------------------------
# - name: Create AWS Read and Write User 
#   import_role:
#     name: ibm.mas_devops.aws_user_creation
#   vars:
#     aws_user_name: "{{ aws_bucket_read_write_username }}"
#     aws_user_action_list:
#       - s3:GetObject
#       - s3:ListBucket
#       - s3:DeleteObject
#       - s3:PutObject
#     aws_resources_list: 
#       - "{{ aws_bucket_arn }}/*"
#       - "{{ aws_bucket_arn }}"

# # # 5. Create Bucket Access Point for client
# # # -----------------------------------------------------------------------------
# # - name: Create Bucket Access Point
# #   import_role:
# #     name: ibm.mas_devops.aws_bucket_access_point
# #   vars:
# #     aws_user_name: "{{ bucket_read_only_username }}"
# #     s3_access_point_action_list:
# #       - s3:GetObject
# #       - s3:ListBucket

# # For AWS, the IAM credentials for the read-write granted user will used by standard
# - name: "AWS: Set access key id & secret access key variables"
#   set_fact:
#     cos_url: "{{ aws_url }}"
#     cos_bucket_name: "{{ aws_bucket_name }}"
#     cos_access_key_id: "{{ aws_new_user_access_key_id }}"
#     cos_secret_access_key: "{{ aws_new_user_secret_access_key }}"
