---
- name: "Fail if ibmcloud_apikey is not provided"
  assert:
    that: ibmcloud_apikey is defined and ibmcloud_apikey != ""
    fail_msg: "ibmcloud_apikey property is required"

# 1. Determine the instance name
# ---------------------------------------------------------------------------------------------------------------------
- name: Customize CoS bucket name for Manage attachments
  when:
    - ibmcos_attachments_bucket_name == "maxdoc"
    - mas_instance_id is defined
    - mas_instance_id != ""
  set_fact:
    ibmcos_attachments_bucket_name: "{{ 'maxdoc-' + mas_instance_id }}"

- name: "ibm : Debug general info"
  debug:
    msg:
      - "IBM Cloud Resource Group ........... {{ ibmcloud_resourcegroup }}"
      - "IBM COS url ........................ {{ ibmcos_url }}"
      - "IBM COS instance name .............. {{ ibmcos_instance_name }}"
      - "IBM COS location info .............. {{ ibmcos_location_info }}"
      - "IBM COS bucket name ................ {{ ibmcos_attachments_bucket_name }}"
      - "IBM COS bucket storage class........ {{ ibmcos_attachments_bucket_storage_class }}"
      - "IBM COS bucket location ............ {{ ibmcos_attachments_bucket_location }}"

# 2. Lookup IBM Cloud Resource Group GUID
# ---------------------------------------------------------------------------------------------------------------------
- name: "ibm : Retrieve resource group guid"
  ibm.cloudcollection.ibm_resource_group_info:
    name: "{{ ibmcloud_resourcegroup }}"
    ibmcloud_api_key: "{{ ibmcloud_apikey }}"
  register: rg_info

- name: "ibm : Debug group GUID"
  debug:
    msg:
      - "Resource Group GUID ... {{ rg_info.resource.id }}"

- name: "ibm : Set resource group guid variable"
  when:
    - rg_info.resource.id is defined
  set_fact:
    resourceGID: "{{ rg_info.resource.id }}"


# 3. Retrieve COS instance
# ---------------------------------------------------------------------------------------------------------------------
- name: "ibm : Retrieve cos instance ID"
  ibm.cloudcollection.ibm_resource_instance_info:
    name: "{{ ibmcos_instance_name }}"
    resource_group_id: "{{ resourceGID }}"
    service: "cloud-object-storage"
    location: "{{ ibmcos_location_info }}"
    ibmcloud_api_key: "{{ ibmcloud_apikey  }}"
  register: cos_info

- name: "ibm : Debug IBMCOS resource ID"
  debug:
    msg: "COS Instance resource ID ... {{ cos_info.resource.id }}"

- name: "ibmcos: Set resource instance id variable"
  when: cos_info.resource.id is defined
  set_fact:
    ibmcos_resource_id: "{{ cos_info.resource.id }}"

# # 4. Create authentication credentials for the instance
# # ---------------------------------------------------------------------------------------------------------------------
- name: "ibm : Create a cos service credential for this MAS instance"
  ibm.cloudcollection.ibm_resource_key:
    name: "{{ mas_instance_id }}-attachments-key"
    role: "Manager"
    resource_instance_id: "{{ ibmcos_resource_id }}"
    ibmcloud_api_key: "{{ ibmcloud_apikey  }}"
    parameters: {'HMAC': true }
    
- name: "ibm : Retrieve cos service credential for this MAS instance"
  ibm.cloudcollection.ibm_resource_key_info:
    name: "{{ mas_instance_id }}-attachments-key"
    resource_instance_id: "{{ ibmcos_resource_id }}"
    ibmcloud_api_key: "{{ ibmcloud_apikey  }}"
  register: cos_key_info

- name: "ibmcos: Set access key id variable"
  when: cos_key_info.resource.id is defined
  set_fact:
    ibmcos_access_key_id: "{{ cos_key_info.resource.credentials['cos_hmac_keys.access_key_id'] }}"

- name: "ibmcos: Set secret access key variable"
  when: cos_key_info.resource.id is defined
  set_fact:
    ibmcos_secret_access_key: "{{ cos_key_info.resource.credentials['cos_hmac_keys.secret_access_key'] }}"

- name: "ibm : Debug COS Resource Information needed to configure Manage attachments"
  debug:
    msg:
      - "IBM COS Bucket Name .......... {{ ibmcos_attachments_bucket_name }}"
      - "IBM COS Access Key ID ........ {{ ibmcos_access_key_id }}"
      - "IBM COS Secret Access Key .... {{ ibmcos_secret_access_key }}"
      - "IBM COS url .................. {{ ibmcos_url }}"

# 3. Create COS bucket
# ---------------------------------------------------------------------------------------------------------------------
- name: "ibm : Create COS bucket to store Manage attachments"
  ibm.cloudcollection.ibm_cos_bucket:
    resource_instance_id: "{{ ibmcos_resource_id }}"
    ibmcloud_api_key: "{{ ibmcloud_apikey  }}"
    bucket_name: "{{ ibmcos_attachments_bucket_name }}"
    storage_class: "{{ ibmcos_attachments_bucket_storage_class }}"
    cross_region_location: "{{ ibmcos_attachments_bucket_location }}"
  register: cos_bucket_info

- name: "ibm : Debug IBM COS Bucket Information"
  debug:
    msg: "IBM COS Bucket Info ... {{ cos_bucket_info }}"

# 4. Update Manage database with COS information 
# ---------------------------------------------------------------------------------------------------------------------
- name: Lookup Manage Route
  kubernetes.core.k8s_info:
    api_version: route.openshift.io/v1
    kind: Route
    name: "{{ mas_instance_id}}-manage-{{ mas_workspace_id }}"
    namespace: "mas-{{ mas_instance_id }}-manage"
  register: manage_route
  failed_when:
    - manage_route.resources is not defined
    - manage_route.resources | length = 0

- name: Set Manage Route variable
  set_fact:
    manage_url: "{{ manage_route.resources[0].spec.host }}"

- debug:
    msg: "{{ manage_url }}"

- name: "Lookup Manage app DB2 instance {{ db2_instance_name }} in {{ db2_namespace }} namespace"
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: "{{ db2_namespace }}"
    label_selectors:
      - type=engine
      - app={{ db2_instance_name }}
  register: db2_pod
  failed_when:
    - db2_pod.resources is not defined
    - db2_pod.resources | length = 0

- name: Set Manage app DB2 pod name variable
  set_fact:
    db2_pod_name: "{{ db2_pod.resources[0].metadata.name if (db2_pod.resources is defined) else 'Undefined' }}"

- name: Create SQL script to update Manage DB2 with COS information
  ansible.builtin.template:
    src: setupAttachments.sh.j2
    dest: /tmp/setupAttachments.sh
    mode: '777'

- name: Copy the SQL script into the Manage app DB2 pod {{ db2_pod_name }}
  shell: "oc cp /tmp/setupAttachments.sh {{ db2_namespace }}/{{ db2_pod_name }}:/tmp/setupAttachments.sh"

- name: Run SQL script on Manage app DB2 pod {{ db2_pod_name }} as db2inst username... (this can take several minutes)
  shell: oc exec -n {{ db2_namespace }} {{ db2_pod_name }} -- su -lc '/tmp/setupAttachments.sh | tee /tmp/setupAttachments.log' db2inst1
  register: setup_attachment_output
  failed_when: setup_attachment_output.rc != 0

- debug:
    msg: "{{ setup_attachment_output.stdout_lines }}"

# TODO: JUST NEED TO RESTART MANAGE BUNDLE PODS TO TAKE EFFECT THE COS CONFIGURATION
# SAMPLE:
# - name: "Lookup SBO deployment"
#   kubernetes.core.k8s_info:
#     api_version: apps/v1
#     kind: Deployment
#     name: service-binding-operator
#     namespace: openshift-operators
#   register: sbo_deployment

# - name: "Scale down SBO operator before we proceed with MAS apps upgrade"
#   when: sbo_deployment.resources | length > 0
#   kubernetes.core.k8s:
#     api_version: apps/v1
#     kind: Deployment
#     name: service-binding-operator
#     namespace: openshift-operators
#     definition:
#       spec:
#         replicas: 0
#     apply: true

# - name: "Scale up SBO operator before we proceed with MAS apps upgrade"
#   when: sbo_deployment.resources | length > 0
#   kubernetes.core.k8s:
#     api_version: apps/v1
#     kind: Deployment
#     name: service-binding-operator
#     namespace: openshift-operators
#     definition:
#       spec:
#         replicas: 1
#     apply: true

# - name: "Wait SBO operator to be running again"
#   when: sbo_deployment.resources | length > 0
#   kubernetes.core.k8s_info:
#     api_version: apps/v1
#     kind: Deployment
#     name: service-binding-operator
#     namespace: openshift-operators
#   register: sbo_restart
#   until:
#     - sbo_restart.resources is defined
#     - sbo_restart.resources[0].status is defined
#     - sbo_restart.resources[0].status.readyReplicas is defined
#     - sbo_restart.resources[0].status.readyReplicas == 1
#   retries: 5 # approx 5 minutes before we give up
#   delay: 60 # 1 minute