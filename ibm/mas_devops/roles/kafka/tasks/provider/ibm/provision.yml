---
- name: "Fail if ibmcloud_apikey is not provided"
  assert:
    that: ibmcloud_apikey is defined and ibmcloud_apikey != ""
    fail_msg: "ibmcloud_apikey property is required"

- name: "Fail if eventstreams_name is not provided"
  assert:
    that: eventstreams_name is defined and eventstreams_name != ""
    fail_msg: "eventstreams_name property is required"

# 1. Create IBM Cloud Eventstreams
# -----------------------------------------------------------------------------
- name: "Debug information"
  debug:
    msg:
      - "Event Streams Name .................. {{ eventstreams_name }}"
      - "Region .............................. {{ ibmcloud_region }}"
      - "Plan ................................ {{ eventstreams_plan }}"
      - "Retention(ms) ....................... {{ eventstreams_retention }}"
      - "Resource Group ...................... {{ ibmcloud_resourcegroup }}"
      - "Location ............................ {{ eventstreams_location }}"
      - "Output KafkaCfg ..................... {{ output_kafkacfg }}"

- name: Set eventstreams configmap name and secret name
  set_fact:
    eventstreams_credentials_secret_name: "{{ eventstreams_name }}-credentials"

- name: Initialize vars
  set_fact:
    kafka_exists: false

- name: Fetch IBM Cloud Resource Group Id
  ibm.cloudcollection.ibm_resource_group_info:
    name: "{{ ibmcloud_resourcegroup }}"
    ibmcloud_api_key: "{{ ibmcloud_apikey }}"
  register: rg_info

- name: Fetch IBM eventstreams Information
  ibm.cloudcollection.ibm_resource_instance_info:
    resource_group_id: "{{ rg_info.resource.id }}"
    name: "{{ eventstreams_name }}"
    service: "{{ eventstreams_service }}"
    location: "{{ eventstreams_location }}"
    ibmcloud_api_key: "{{ ibmcloud_apikey }}"
  register: es_exist_info
  failed_when: es_exist_info.rc != 0 and  "No resource instance found" not in  es_exist_info.stderr

- name: Set Fact Kafka exists or not
  when:
    - es_exist_info is defined
    - es_exist_info.resource is defined
    - es_exist_info.resource.id is defined and es_exist_info.resource.id != ''
  set_fact:
    kafka_exists: true

- name: Provision IBM eventstreams
  ibm.cloudcollection.ibm_resource_instance:
    name: "{{ eventstreams_name }}"
    plan: "{{ eventstreams_plan }}"
    service: "{{ eventstreams_service }}"
    location: "{{ eventstreams_location }}"
    ibmcloud_api_key: "{{ ibmcloud_apikey }}"
    resource_group_id: "{{ rg_info.resource.id }}"
  register: es_info
  when: not kafka_exists

- set_fact:
    es_exist_info: "{{ es_info }}"
  when: not kafka_exists

- name: Fail if Eventstreams is not created
  assert:
    that:
      - es_exist_info is defined and es_exist_info != ''
      - es_exist_info.resource is defined and es_exist_info.resource != ''
      - es_exist_info.resource.id is defined and es_exist_info.resource.id != ''

- name: Build kafka broker property list
  set_fact:
    kafka_host_prop_list: "{{ kafka_host_prop_list | default([]) + ['kafka_brokers_sasl.'+ item ] }}"
  with_sequence: start=0 end={{ es_exist_info.resource.extensions['kafka_brokers_sasl.#'] | int - 1 }}

- name: Fetch Kafka brokers
  loop: "{{ kafka_host_prop_list }}"
  set_fact:
    hostports: "{{ hostports | default([]) + [es_exist_info.resource.extensions[item] | split(':')] }}"

# 2. Create Topics in Eventstreams
# -----------------------------------------------------------------------------

- name: Create Kafka Topic 1
  ibm.cloudcollection.ibm_event_streams_topic:
    name: "cqin"
    partitions: 3
    resource_instance_id: "{{ es_exist_info.resource.id }}"
    config:
    # we must enclose properties having . in double quotes then single quote or vice-versa
      '"cleanup.policy"': "delete"
      '"retention.ms"': "{{ eventstreams_retention }}"
      '"retention.bytes"': 1073741824
      '"segment.bytes"': 536870912
    ibmcloud_api_key: "{{ ibmcloud_apikey }}"
  register: topic1_output

- name: Fail if topic not created
  assert:
    that:
      - topic1_output.resource.id is defined
      - topic1_output.resource.id != ''

- name: Create Kafka Topic 2
  ibm.cloudcollection.ibm_event_streams_topic:
    name: "cqinerr"
    partitions: 1
    resource_instance_id: "{{ es_exist_info.resource.id }}"
    config:
      '"cleanup.policy"': "delete"
      '"retention.ms"': "{{ eventstreams_retention }}"
      '"retention.bytes"': 1073741824
      '"segment.bytes"': 536870912
    ibmcloud_api_key: "{{ ibmcloud_apikey }}"
  register: topic2_output

- name: Fail if topic not created
  assert:
    that:
      - topic2_output.resource.id is defined
      - topic2_output.resource.id != ''

- name: Create Kafka Topic 3
  ibm.cloudcollection.ibm_event_streams_topic:
    name: "sqin"
    partitions: 1
    resource_instance_id: "{{ es_exist_info.resource.id }}"
    config:
      '"cleanup.policy"': "delete"
      '"retention.ms"': "{{ eventstreams_retention }}"
      '"retention.bytes"': 1073741824
      '"segment.bytes"': 536870912
    ibmcloud_api_key: "{{ ibmcloud_apikey }}"
  register: topic3_output

- name: Fail if topic not created
  assert:
    that:
      - topic3_output.resource.id is defined
      - topic3_output.resource.id != ''

- name: Create Kafka Topic 4
  ibm.cloudcollection.ibm_event_streams_topic:
    name: "sqout"
    partitions: 1
    resource_instance_id: "{{ es_exist_info.resource.id }}"
    config:
      '"cleanup.policy"': "delete"
      '"retention.ms"': "{{ eventstreams_retention }}"
      '"retention.bytes"': 1073741824
      '"segment.bytes"': 536870912
    ibmcloud_api_key: "{{ ibmcloud_apikey }}"
  register: topic4_output

- name: Fail if topic not created
  assert:
    that:
      - topic4_output.resource.id is defined
      - topic4_output.resource.id != ''

# 2. Save eventstreams info and create service credentials
# -----------------------------------------------------------------------------

- name: Save all Kafka hosts
  when: output_kafkacfg
  set_fact:
    kafka_hosts: "{{ lookup('ansible.builtin.template', 'templates/{{ kafka_provider }}/kafka-hosts.yml.j2') }}"

- name: Get ES TLS certificate
  when: output_kafkacfg
  include_tasks: "provider/{{ kafka_provider }}/retrieve-es-certs.yml"

- name: Create KafkaCfg
  when: output_kafkacfg
  ansible.builtin.template:
    src: "{{ kafka_provider }}/evenstreams_kafkacfg.yml.j2"
    dest: "{{ mas_config_dir }}/{{ eventstreams_name }}-kafkacfg.yml"

- name: Create Service Credentials for IBM Cloud Eventstreams
  include_tasks: tasks/provider/{{ kafka_provider }}/create-eventstreams-service-credentials.yml
