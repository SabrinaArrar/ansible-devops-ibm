---
# mas_instance_id is required in order to be able to lookup for manage application resources
- name: "Fail if mas_instance_id is not provided"
  assert:
    that: mas_instance_id is defined and mas_instance_id != ""
    fail_msg: "mas_instance_id property is required"

# mas_workspace_id is required in order to be able to lookup for manage application resources
- name: "Fail if mas_workspace_id is not provided"
  assert:
    that: mas_workspace_id is defined and mas_workspace_id != ""
    fail_msg: "mas_workspace_id property is required"

# cos_type is required
- name: "Fail if cos_type is not provided"
  assert:
    that:
      - cos_type is defined and cos_type in cos_type_supported
    fail_msg: "cos_type property is required and must be set to one of the supported storage providers: {{ cos_type_supported }}"

- name: Set manage_workspace_cr_name
  when: manage_workspace_cr_name is not defined or manage_workspace_cr_name == ''
  set_fact:
    manage_workspace_cr_name: "{{ mas_instance_id }}-{{ mas_workspace_id }}"
- name: "Lookup ManageWorkspace CR"
  no_log: true
  kubernetes.core.k8s_info:
    api_version: v1
    kind: ManageWorkspace
    name: "{{ manage_workspace_cr_name }}"
    namespace: "mas-{{ mas_instance_id }}-manage"
  register: managews_output

# Configure Manage Doclinks
# ---------------------------------------------------------------------------------------------------------------------
- name: "Running {{ cos_type }} logging configuration for Manage application"
  include_tasks: "tasks/setup-manage-doclinks.yml"

# Wait for ManageWorkspace CR to reconcile and to be ready
# ---------------------------------------------------------------------------------------------------------------------
- name: "Wait for ManageWorkspace to be ready (60s delay)"
  kubernetes.core.k8s_info:
    api_version: v1
    name: "{{ manage_workspace_cr_name }}"
    namespace: "mas-{{mas_instance_id}}-manage"
    kind: "ManageWorkspace"
    wait: true
    wait_condition:
      status: "True"
      type: Ready
    wait_sleep: 30
    wait_timeout: 200 # before we give up and fall back into the retry loop
  register: app_cr_result
  retries: 30
  delay: 60
  until:
    - app_cr_result.resources is defined
    - app_cr_result.resources | length > 0
    - app_cr_result.resources | json_query('[*].status.conditions[?type==`Running`][].reason') | select ('match','Successful') | list | length == 1

# Restart Manage bundle pods to pick up the COS configuration
# ---------------------------------------------------------------------------------------------------------------------
- name: "Lookup Manage bundle pods"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Pod
    label_selectors: mas.ibm.com/appType=serverBundle
    namespace: "mas-{{ mas_instance_id }}-manage"
  register: manage_bundle_output

- name: "List Manage bundle pods"
  vars:
    list: []
  set_fact:
    list: "{{ list + [item.metadata.name] }}"
  with_items: "{{ manage_bundle_output.resources }}"
  no_log: true

- debug:
    msg: "Restarting the following Manage bundle pods: {{ list }}"

- name: "Restart Manage bundle pods to apply the attachments configuration"
  failed_when:
    - manage_bundle_output.resources | length == 0
  kubernetes.core.k8s:
    state: absent
    api_version: v1
    kind: Pod
    name: "{{ item.metadata.name }}"
    label_selectors: mas.ibm.com/appType=serverBundle
    namespace: "mas-{{ mas_instance_id }}-manage"
  with_items: "{{ manage_bundle_output.resources  }}"
  loop_control:
    label: "Restarting bundle pod: {{ item.metadata.name }}..."

- name: "Pause for 1 minute before checking bundle pods..."
  pause:
    seconds: 60

- name: "Wait Manage bundle pods to be ready"
  include_tasks: tasks/wait_bundle_pods.yml
