---
# BAS is VERY unreliable
# Instead of waiting for the AnalyticsProxy status to report success as we
# normally would, we need to do some hacky steps to try to handle known problems
# with the BAS operator that the team are not fixing.
#
# If, after 20 minutes, the createcluster job still exists, then we will delete
# it causing the BAS operator to try again.
#
# Note that when the job has successfully completed, the BAS operator deletes
# the job entirely, so there is no visibility of this job on a good path install.
# If the job merely exists at this stage then there is a problem with the
# install, so we don't need to check the state of the job, only that it exists.
#
# The BAS operator will now recreate the job, and usually it works on the second
# attempt.
#
# We now resume the normal deployment flow, and will monitor the AnalyticsProxy
# until it's status.phase is set to "Ready"

- block:
    - name: "Initialize recover_count variable if not set"
      when: recover_count is not defined or recover_count == 0
      set_fact:
        recover_count: 0

    - name: "Check the status of the AnalyticsProxy"
      kubernetes.core.k8s_info:
        api_version: bas.ibm.com/v1
        name: analyticsproxy
        namespace: "{{ bas_namespace }}"
        kind: AnalyticsProxy
      register: bas_cr_lookup
      until:
        - bas_cr_lookup.resources is defined and bas_cr_lookup.resources | length == 1
        - bas_cr_lookup.resources[0].status is defined
        - bas_cr_lookup.resources[0].status.phase is defined
        - bas_cr_lookup.resources[0].status.phase == 'Ready'
      retries: 15 # approx 30 minutes before we give up waiting for status.phase to be Ready
      delay: 120 # 2 minutes
  rescue:
    # We will always delete these pods if they exist, they are the usual cause of a failure
    - name: "Delete the createcluster pods"
      kubernetes.core.k8s:
        api_version: v1
        kind: Pod
        namespace: "{{ bas_namespace }}"
        label_selectors:
          - "job-name = createcluster"
        state: absent

    # On a subsequent failure, delete the whole thing and start over ... maybe we'll get lucky?
    - name: "Delete the dashboard-deployment deployment"
      when: recover_count == 1
      kubernetes.core.k8s:
        api_version: bas.ibm.com/v1
        kind: AnalyticsProxy
        namespace: "{{ bas_namespace }}"
        name: analyticsproxy
        state: absent
    - name: "Delete the instrumentationdb-backrest-shared-repo deployment"
      when: recover_count == 1
      kubernetes.core.k8s:
        api_version: v1
        kind: Deployment
        namespace: "{{ bas_namespace }}"
        name: instrumentationdb-backrest-shared-repo
        state: absent
    - name: "Delete the instrumentationdb deployment"
      when: recover_count == 1
      kubernetes.core.k8s:
        api_version: v1
        kind: Deployment
        namespace: "{{ bas_namespace }}"
        name: instrumentationdb
        state: absent
    - name: "Delete the dashboard-deployment deployment"
      when: recover_count == 1
      kubernetes.core.k8s:
        api_version: v1
        kind: Deployment
        namespace: "{{ bas_namespace }}"
        name: dashboard-deployment
        state: absent
    - name: "Delete the backrest-backup-instrumentationdb job"
      when: recover_count == 1
      kubernetes.core.k8s:
        api_version: batch/v1
        kind: Deployment
        namespace: "{{ bas_namespace }}"
        name: backrest-backup-instrumentationdb
        state: absent
    - name: "Delete the instrumentationdb-stanza-create deployment"
      when: recover_count == 1
      kubernetes.core.k8s:
        api_version: batch/v1
        kind: Job
        namespace: "{{ bas_namespace }}"
        name: instrumentationdb-stanza-create
        state: absent

    - name: "Allow a couple of minutes for Kubernetes to clean up the BAS mess"
      when: recover_count == 1
      pause:
        minutes: 2

    - name: "Re-create BAS AnalyticsProxy"
      when: recover_count == 1
      kubernetes.core.k8s:
        definition: "{{ lookup('template', 'templates/analyticsproxy.yaml') }}"

    # After the second attempt we will give up :(
    - name: "Retry waiting for the install to complete ({{ recover_count }})"
      when: recover_count <= 1
      include_tasks: tasks/recover.yml
      vars:
        recover_count: "{{ recover_count + 1}}"

    # Time to give up :(
    - name: "Fail BAS install"
      when: recover_count > 1
      fail:
        msg: "Uable to get BAS to install successfully after multiple attempts"
