---
# 1. Provide debug information to the user
# -----------------------------------------------------------------------------
- name: "DB2 Restore - Debug information"
  debug:
    msg:
      - "CPD Namespace .......................... {{ cpd_meta_namespace_target }}"
      - "DB2 Instance ID ........................ {{ db2wh_instance_id_target }}"
      - "DB2 Backup Files Directory ............. {{ db2wh_backup_dir }}"
      - "DB2 Backup Temp Log Files Directory .... /tmp/db_backup_logs"

# 2. Fail if no required keys are provided
# -----------------------------------------------------------------------------
- name: "Assert that cpd_meta_namespace_target is defined"
  assert:
    that:
      - cpd_meta_namespace_target is defined
      - cpd_meta_namespace_target != ""
    fail_msg: "cpd_meta_namespace_target property is required"

- name: "Assert that db2wh_instance_id_target is defined"
  assert:
    that:
      - db2wh_instance_id_target is defined
      - db2wh_instance_id_target != ""
    fail_msg: "db2wh_instance_id_target property is required"

- name: "Assert that db2wh_backup_dir is defined"
  assert:
    that:
      - db2wh_backup_dir is defined
      - db2wh_backup_dir != ""
    fail_msg: "db2wh_backup_dir property is required"

- name: "Check backup files in {{ db2wh_backup_dir }} folder"
  find:
    paths: "{{ db2wh_backup_dir }}"
    file_type: "file"
  register: find_result

- set_fact:
    db_filenames: "{{ db_filenames }} + [ '{{ item | basename }}' ]"
  with_items: "{{ full_path }}"
  vars:
    db_filenames: []
    full_path: "{{ find_result.files | map(attribute='path') | list }}"

- name: Check DB2 keystore .p12 file
  vars:
    regex: '.+?(?=.p12)'
  when: item is regex(regex)
  set_fact:
    db_backup_keystore_file: "{{ item }}"
  loop: "{{ db_filenames }}"

- name: "Assert that backup keystore file is found"
  assert:
    that:
      - db_backup_keystore_file is defined
      - db_backup_keystore_file != ""
    fail_msg: "db_backup_keystore_file property could not be found in {{ db2wh_backup_dir }}, .p12 keystore file from source DB2 instance must be provided for the restore process to work."

- name: Check DB2 keystore .sth file
  vars:
    regex: '.+?(?=.sth)'
  when: item is regex(regex)
  set_fact:
    db_backup_stash_file: "{{ item }}"
  loop: "{{ db_filenames }}"

- name: "Assert that backup stash file is found"
  assert:
    that:
      - db_backup_stash_file is defined
      - db_backup_stash_file != ""
    fail_msg: "db_backup_stash_file property could not be found in {{ db2wh_backup_dir }}, .sth keystore file from source DB2 instance must be provided for the restore process to work."

- name: Check DB2 source master key label .kdb file
  vars:
    regex: '.+?(?=.kdb)'
  when: item is regex(regex)
  set_fact:
    db_backup_kdb_file: "{{ item }}"
  loop: "{{ db_filenames }}"

- name: "Assert that backup master key label file is found"
  assert:
    that:
      - db_backup_kdb_file is defined
      - db_backup_kdb_file != ""
    fail_msg: "db_backup_kdb_file property could not be found in {{ db2wh_backup_dir }}, .kdb file containing the DB2 master key label from source DB2 instance must be provided for the restore process to work."

- name: Check DB2 backup file timestamp
  vars:
    regex: '\d+\d+\d+\d'
  when: item is regex('^BLUDB.*')
  set_fact:
    db_backup_restore_timestamp: "{{ item | regex_search(regex) }}"
  loop: "{{ db_filenames }}"

- name: "Assert that backup timestamp is defined"
  assert:
    that:
      - db_backup_restore_timestamp is defined
      - db_backup_restore_timestamp != ""
    fail_msg: "db_backup_restore_timestamp property has not been set, this means the DB2 backup files were not found in {{ db2wh_backup_dir }} or it does not have the expected format i.e 'BLUDB.0.db2inst1.DBPART000.202XXXXXXXXXXX.001'"

- debug:
    msg: "DB Backup Timestamp is: {{ db_backup_restore_timestamp }}"

- name: "Check if oc login target is not provided"
  when: oc_login_target is not defined or oc_login_target == ""
  debug:
    msg: "oc_login_target property has not been set, skip oc login command"

# 3. Determine which pod to run in
# -----------------------------------------------------------------------------
- name: "Login to target cluster"
  when: oc_login_target is defined and oc_login_target != ""
  command: "{{ oc_login_target }}"
  register: oc_login_output
  failed_when: oc_login_output.rc != 0

- debug:
    msg: "{{ oc_login_output.stdout_lines }}"
  when: oc_login_target is defined and oc_login_target != ""

- name: "Lookup db2 Pod"
  community.kubernetes.k8s_info:
    kind: Pod
    namespace: "{{ cpd_meta_namespace_target }}"
    label_selectors:
      - type=engine
      - app={{ db2wh_instance_id_target }}
  register: db2wh_pod

- name: Configure facts
  set_fact:
    db2wh_pod_name: "{{ db2wh_pod.resources[0].metadata.name }}"

- name: "Debug information"
  debug:
    msg:
      - "Pod name ........... {{ db2wh_pod_name }}"
  failed_when: db2wh_pod_name is not defined or db2wh_pod_name == ""

# 4. Upload db2 backup files from local machine to db2wh pod
# -----------------------------------------------------------------------------
- name: "Creating backup folder in {{ db2wh_pod_name }}..."
  shell: |
    oc exec -it -n {{ cpd_meta_namespace_target }} {{ db2wh_pod_name }} -- bash -c "sudo mkdir /tmp/db_backup /tmp/db_backup_logs && sudo chown -R db2uadm /tmp/db_backup/ && sudo chown -R db2inst1 /tmp/db_backup_logs/"
  register: creating_backup_folder_output

- name: "Uploading DB2 backup files into DB2WH pod {{ db2wh_pod_name }}/tmp/db_backup/...(this can take several minutes)"
  shell: |
    oc rsync --progress=true {{ db2wh_backup_dir }}/ -n {{ cpd_meta_namespace_target }} {{ db2wh_pod_name }}:/tmp/db_backup/ --no-perms
  register: copy_output
  failed_when: copy_output.rc != 0

- debug:
    msg: "{{ copy_output.stdout_lines }}"

- name: "Move backup files from /tmp/db_backup/ to db2inst1/db_backup/ folder..."
  shell: |
    oc exec -it -n {{ cpd_meta_namespace_target }} {{ db2wh_pod_name }} -- bash -c "sudo mv /tmp/db_backup/ /mnt/blumeta0/home/db2inst1/ && sudo chown -R db2inst1 /mnt/blumeta0/home/db2inst1/db_backup/*"
  register: apply_output

# # 5. Insert db2wh keystore master key label from source db2wh keystore into target db2wh keystore and copy keystore
# # https://www.ibm.com/docs/en/db2/11.5?topic=edr-restoring-encrypted-backup-image-different-system-local-keystore
# -----------------------------------------------------------------------------------------------------------------
- name: "Check source keystore.p12 master key label..."
  shell: |
    oc exec -it -n {{ cpd_meta_namespace_target }} {{ db2wh_pod_name }} -- su -lc "gsk8capicmd_64 -cert -list all -db '/mnt/blumeta0/home/db2inst1/db_backup/keystore.p12' -stashed" db2inst1
  register: check_master_label_output

- name: "Get source keystore.p12 master key label..."
  vars:
    regex: '\DB2(.*)'
  when: item is regex('\DB2(.*)')
  set_fact:
    master_key_label: "{{ item | regex_search(regex) }}"
  with_items: "{{ check_master_label_output.stdout_lines | list }}"

- name: "Add extracted master key label from source into target keystore.p12 ..."
  shell: |
    oc exec -it -n {{ cpd_meta_namespace_target }} {{ db2wh_pod_name }} -- su -lc "gsk8capicmd_64 -secretkey -add -db '/mnt/blumeta0/db2/keystore/keystore.p12' -stashed -label '{{ master_key_label }}' -format ascii -file /mnt/blumeta0/home/db2inst1/db_backup/master_key_label.kdb" db2inst1
  register: extract_master_label_output

# 6. Deactivate DB2 in preparation for restore
# -----------------------------------------------------------------------------
- name: Deactivate DB2 in preparation for restore
  shell: |
    oc exec -it -n {{ cpd_meta_namespace_target }} {{ db2wh_pod_name }} -- bash -c "cat << EOF > /tmp/prepRestoreDB.sh
    sudo wvcli system disable -m 'Disable HA before Db2 maintenance'
    db2 connect to BLUDB
    db2 list applications
    db2 force application all
    db2 terminate
    db2 deactivate database BLUDB
    db2stop force
    ipclean -a
    db2set -null DB2COMM
    db2start admin mode restricted access
    EOF"
    oc exec -it -n {{cpd_meta_namespace_target}} {{db2wh_pod_name}} -- bash -c "chmod 755 /tmp/prepRestoreDB.sh"
    oc exec -it -n {{cpd_meta_namespace_target}} {{db2wh_pod_name}} -- su -lc /tmp/prepRestoreDB.sh db2inst1
  register: prep_restore_output

- name: Create preRestore.sh script in local /tmp
  ansible.builtin.template:
    src: preRestore.sh.j2
    dest: /tmp/preRestore.sh
    mode: '777'

- name: Copy the preRestore.sh script into the db2 pod {{ db2wh_instance_id_target }}
  shell: "oc cp /tmp/preRestore.sh {{ cpd_meta_namespace_target }}/{{ db2wh_pod_name }}:/tmp/preRestore.sh"

- name: Run preRestore.sh script on db2 pod {{ db2wh_instance_id_target }}
  shell: oc exec -n {{ cpd_meta_namespace_target }} {{ db2wh_pod_name }} -- su -lc '/tmp/preRestore.sh | tee /tmp/preRestore.log' db2inst1
  register: prep_restore_output
  failed_when: prep_restore_output.rc != 0

- debug:
    msg: "{{ prep_restore_output.stdout_lines }}"

# 7. Run DB2 restore command
# -----------------------------------------------------------------------------
- name: Create restore.sh script in local /tmp
  ansible.builtin.template:
    src: restore.sh.j2
    dest: /tmp/restore.sh
    mode: '777'

- name: Copy the restore.sh script into the db2 pod {{ db2wh_instance_id_target }}
  shell: "oc cp /tmp/restore.sh {{ cpd_meta_namespace_target }}/{{ db2wh_pod_name }}:/tmp/restore.sh"

- name: "Run restore.sh script (this can take several minutes...)"
  shell: oc exec -n {{ cpd_meta_namespace_target }} {{ db2wh_pod_name }} -- su -lc '/tmp/restore.sh | tee /tmp/restore.log' db2inst1
  register: restore_output
  failed_when: restore_output.rc != 0 or 'SQL2581N' in restore_output.stdout_lines[0] # this db2 error code means something went wrong in restore command

- debug:
    msg: "{{ restore_output.stdout_lines }}"

# 8. Run DB2 rollforward command
# -----------------------------------------------------------------------------
- name: Create rollforward.sh script in local /tmp
  ansible.builtin.template:
    src: rollforward.sh.j2
    dest: /tmp/rollforward.sh
    mode: '777'

- name: Copy the rollforward.sh script into the db2 pod {{ db2wh_instance_id_target }}
  shell: "oc cp /tmp/rollforward.sh {{ cpd_meta_namespace_target }}/{{ db2wh_pod_name }}:/tmp/rollforward.sh"

- name: "Run rollforward.sh script (this can take several minutes...)"
  shell: oc exec -n {{ cpd_meta_namespace_target }} {{ db2wh_pod_name }} -- su -lc '/tmp/rollforward.sh | tee /tmp/rollforward.log' db2inst1
  register: rollforward_output
  failed_when: rollforward_output.rc != 0 or 'SQL1119N' in rollforward_output.stdout_lines[0] # this db2 error code means something went wrong in rollforward command
- debug:
    msg: "{{ rollforward_output.stdout_lines }}"

# 9. Activate DB2 after successfull rollforward
# -----------------------------------------------------------------------------
- name: Create postRestore.sh script in local /tmp
  ansible.builtin.template:
    src: postRestore.sh.j2
    dest: /tmp/postRestore.sh
    mode: '777'

- name: Copy the postRestore.sh script into the db2 pod {{ db2wh_instance_id_target }}
  shell: "oc cp /tmp/postRestore.sh {{ cpd_meta_namespace_target }}/{{ db2wh_pod_name }}:/tmp/postRestore.sh"

- name: Run postRestore.sh script on db2 pod {{ db2wh_instance_id_target }}
  shell: oc exec -n {{ cpd_meta_namespace_target }} {{ db2wh_pod_name }} -- su -lc '/tmp/postRestore.sh | tee /tmp/postRestore.log' db2inst1
  register: post_restore_output
  failed_when: post_restore_output.rc != 0

- debug:
    msg: "{{ post_restore_output.stdout_lines }}"

# 7. Delete temporary db2 backup files in target db2wh pod
# -----------------------------------------------------------------------------
- name: "Delete db_backup folder from {{ db2wh_instance_id_target }} now that backup files were restored..."
  shell: |
    oc exec -it -n {{ cpd_meta_namespace_target }} {{ db2wh_pod_name }} -- bash -c "sudo rm -rf /tmp/db_backup && sudo rm -rf /tmp/db_backup_logs && sudo rm -rf /mnt/blumeta0/home/db2inst1/db_backup"
