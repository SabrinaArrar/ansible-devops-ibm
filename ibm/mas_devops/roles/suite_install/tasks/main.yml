---
# 1.a Check for undefined properties that do not have a default
# -----------------------------------------------------------------------------
- name: "Fail if mas_instance_id is not provided"
  assert:
    that: mas_instance_id is defined and mas_instance_id != ""
    fail_msg: "mas_instance_id property is required"

- name: "Fail if mas_instance_id does not meet requirements"
  assert:
    that: mas_instance_id is match ('^[a-z][a-z0-9-]{1,10}[a-z0-9]$')
    fail_msg:
      - "mas_instance_id does not meet requirements"
      - "Must be 3-12 characters long"
      - "Must only use lowercase letters, numbers, and hypen (-) symbol"
      - "Must start with a lowercase letter"
      - "Must end with a lowercase letter or a number"

# 1.b Set facts for mas_annotations_dict, HyperscalerFormat, HyperscalerChannel
# -----------------------------------------------------------------------------
- name: "Set facts : mas_annotations_dict"
  set_fact:
    mas_annotations_dict: "{{ mas_annotations | string  | ibm.mas_devops.getAnnotations() }}"

- name: "Set facts : HyperscalerFormat"
  set_fact:
    input_hyperscalerFormat: "{{ item.value }}"
  when:
    - mas_annotations_dict is defined and item.key == 'mas.ibm.com/hyperscalerFormat'
  with_dict:
    - "{{  mas_annotations_dict  }}"

- name: "Set facts : HyperscalerChannel"
  set_fact:
    input_hyperscalerChannel: "{{ item.value }}"
  when:
    - mas_annotations_dict is defined and item.key == 'mas.ibm.com/hyperscalerChannel'
  with_dict:
    - "{{  mas_annotations_dict  }}"

- name: "Set facts : HyperscalerProvider"
  set_fact:
    input_hyperscalerProvider: "{{ item.value }}"
  when:
    - mas_annotations_dict is defined and item.key == 'mas.ibm.com/hyperscalerProvider'
  with_dict:
    - "{{  mas_annotations_dict  }}"

- name: "Debug input hyperscaler values"
  debug:
    msg:
      - "Hyperscaler Provider ................... {{ input_hyperscalerProvider | default('<undefined>', true) }}"
      - "Hyperscaler Channel .................... {{ input_hyperscalerChannel | default('<undefined>', true) }}"
      - "Hyperscaler Format ..................... {{ input_hyperscalerFormat | default('<undefined>', true) }}"
      - "mas_annotations_dict ................... {{ mas_annotations_dict }}"

# 1.c Validate annotations: Check for Hyperscaler flag partially set
# -----------------------------------------------------------------------------
- name: "Check for Hyperscaler flag partially set"
  when:
    - mas_annotations_dict is defined
  assert:
    that:
      - (input_hyperscalerProvider is undefined and input_hyperscalerChannel is undefined and input_hyperscalerFormat is undefined) or (input_hyperscalerProvider is defined and input_hyperscalerChannel is defined )
    fail_msg: "Assertion Failed! Invalid HyperScalerFlag combination in {{mas_annotations}} "
    success_msg: "Assertion Passed!  Valid HyperScalerFlag combination in {{mas_annotations}} "

# 1.d Validate annotations: Check if mas_annotations has valid allowed values
# -----------------------------------------------------------------------------
- name: "Fail if mas_annotations value is invalid"
  when:
    - mas_annotations_dict is defined and item.key in mas_annotation_valid_entries
  assert:
    that:
      - mas_annotation_valid_entries[item.key] is defined and mas_annotation_valid_entries[item.key] | length>0
      - item.value in mas_annotation_valid_entries[item.key]
    fail_msg: "Assertion Failed! Annotation {{item.key}}={{item.value}} is not valid "
    success_msg: "Assertion Passed!  Annotation {{item.key}}={{item.value}} is valid "
  with_dict:
    - "{{  mas_annotations_dict  }}"

# 1.e Check if mas_annotations value has invalid combinations
# -----------------------------------------------------------------------------
- name: "Fail if mas_annotations value has invalid combinations"
  when:
    - mas_annotations_dict is defined and item.key == 'mas.ibm.com/hyperscalerProvider'
  assert:
    that:
      - item.value in mas_annotation_valid_combinations and mas_annotation_valid_combinations[item.value] is defined # check if provider exist in 'mas_annotation_valid_combinations' lookup
      - input_hyperscalerChannel is defined and input_hyperscalerChannel in mas_annotation_valid_combinations[item.value] # check if channel exist in 'mas_annotation_valid_combinations' lookup
      - mas_annotation_valid_combinations[item.value][input_hyperscalerChannel] | length>0 # check channel's [format list] length
      - (input_hyperscalerFormat is undefined and input_hyperscalerChannel == 'azure') or (input_hyperscalerFormat is defined and input_hyperscalerFormat in mas_annotation_valid_combinations[item.value][input_hyperscalerChannel]) # check if format exist in 'mas_annotation_valid_combinations' lookup, (edge case for azure, hyperscalerFormat is undefined in marketplace)
    fail_msg: "Assertion Failed! Invalid HyperScalerFlag combination in {{mas_annotations}} "
    success_msg: "Assertion Passed!  Valid HyperScalerFlag combination in {{mas_annotations}} "
  with_dict:
    - "{{  mas_annotations_dict  }}"

# 2. Set up the domain name for MAS
# -----------------------------------------------------------------------------
- name: "Get cluster subdomain"
  kubernetes.core.k8s_info:
    api_version: config.openshift.io/v1
    kind: Ingress
    name: cluster
  register: _cluster_subdomain

- name: "Configure domain if not set"
  when: mas_domain == ""
  set_fact:
    mas_domain: "{{ mas_instance_id }}.{{ _cluster_subdomain.resources[0].spec.domain }}"

# 3. Determine version of cert-manager in use on the cluster
# -----------------------------------------------------------------------------
- include_tasks: tasks/detect-cert-manager.yml

# 4. Provide debug information
# -----------------------------------------------------------------------------
- name: "Configure namespace"
  set_fact:
    mas_namespace: "mas-{{ mas_instance_id }}-core"

- name: "Debug information"
  debug:
    msg:
      - "Catalog source ............... {{ mas_catalog_source }}"
      - "MAS channel .................. {{ mas_channel }}"
      - "Instance ID .................. {{ mas_instance_id }}"
      - "MAS namespace ................ {{ mas_namespace }}"
      - "MAS domain ................... {{ mas_domain }}"
      - "MAS ICR cp content ........... {{ mas_icr_cp }}"
      - "MAS ICR cpopen content ....... {{ mas_icr_cpopen }}"
      - "MAS Cluster Issuer ........... {{ mas_cluster_issuer }}"
      - "MAS Subcription Upgrade ...... {{ mas_upgrade_strategy }}"

# 5. Install the operator & create entitlement secret
# -----------------------------------------------------------------------------
- name: "Install MAS Operator"
  include_role:
    name: ibm.mas_devops.install_operator
  vars:
    namespace: "{{ mas_namespace }}"
    icr_username: "{{ mas_entitlement_username }}"
    icr_password: "{{ mas_entitlement_key }}"
    catalog_source: "{{ mas_catalog_source }}"
    operator_group: "{{ lookup('template', 'templates/operator-group.yml.j2') }}"
    subscription: "{{ lookup('template', 'templates/subscription.yml.j2') }}"

- name: Lookup and Approve MAS Subscription
  when: mas_upgrade_strategy == 'Manual'
  block:
    - name: Lookup Operator install plan
      kubernetes.core.k8s_info:
        api_version: operators.coreos.com/v1alpha1
        kind: InstallPlan
        namespace: "{{ mas_namespace }}"
        label_selectors:
          - "operators.coreos.com/ibm-mas.{{ mas_namespace }}"
      register: mas_install_plan
      retries: 20
      delay: 60 # Retry for approx 20 minutes (60s * 20 attempts) before giving up
      until: mas_install_plan.resources | length > 0

    - name: Approve the subscription install plan
      when:
        - mas_install_plan.resources | length > 0
        - mas_install_plan.resources[0].status.phase != "Complete"
      kubernetes.core.k8s:
        definition:
          apiVersion: operators.coreos.com/v1alpha1
          kind: InstallPlan
          metadata:
            name: "{{ mas_install_plan.resources[0].metadata.name }}"
            namespace: "{{ mas_namespace }}"
          spec:
            approved: true

# 6. Wait until the Suite CRD is available
# -----------------------------------------------------------------------------
- name: "Wait until the Suite CRD is available"
  kubernetes.core.k8s_info:
    api_version: apiextensions.k8s.io/v1
    name: "suites.core.mas.ibm.com"
    kind: CustomResourceDefinition
    wait: yes
    wait_sleep: 10
    wait_timeout: 300 # 5 mins until we give up waiting for the CRD to get into the expected state
    wait_condition:
      type: NamesAccepted
      status: "True"
  register: suite_crd_info
  retries: 120 # ~approx 5 minutes before we give up waiting for the CRD to be created
  delay: 5 # seconds
  until:
    - suite_crd_info.resources is defined
    - suite_crd_info.resources | length > 0

# 7. Integrated Airgap support
# -----------------------------------------------------------------------------
# Before we create the CR we will set up the Airgap Image Map
# We need to install the digest imagemap for ibm-sls and ibm-truststore-mgr
- name: "Determine whether this is an airgap environment"
  include_tasks: "{{ role_path }}/../../common_tasks/detect_airgap.yml"

- name: "Enable use of image digests"
  when: airgap_install
  include_tasks: "tasks/install_digest_cm.yml"

# 8. Suite installation
# -----------------------------------------------------------------------------
- name: Create suite.ibm.com/v1 CR
  vars:
    annotation_dict: "{{ mas_annotations | string | ibm.mas_devops.getAnnotations() }}"
  kubernetes.core.k8s:
    state: present
    namespace: "{{ mas_namespace }}"
    template: templates/core_v1_suite.yml.j2

# 9. Handle IBM Common Services Install plan approvals when upgrade strategy is set to Manual
# -----------------------------------------------------------------------------
# ibm-common-services operators deployed by MAS will inherit the inherit MAS upgrade strategy
# when its set to Manual, we need to interate those to ensure we do approve the first install plan
# otherwise MAS installation wont succeed.
- include_tasks: tasks/ibm-common-services.yml
  when: mas_upgrade_strategy == 'Manual'
  loop: "{{ibm_common_services_subscription_labels}}"
