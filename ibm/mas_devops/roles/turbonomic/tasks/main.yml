---

# Provide Debug information
# -----------------------------------------------------------------------------
- name: "Debug information"
  debug:
    msg:
      - "Turbonomic Namespace ...................... {{ turbonomic_namespace }}"
      - "Turbonomic Channel ........................ {{ turbonomic_channel }}"
      - "Turbonomic CR ............................. {{ turbonomic_sub_name }}"

# 4. Create Turbonomic project
# -----------------------------------------------------------------------------
- name: "Create Turbonomic namespace"
  kubernetes.core.k8s:
    api_version: v1
    kind: Namespace
    name: '{{ turbonomic_namespace }}'

- name: "Lookup Turbonomic namespace"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Namespace
    name: '{{ turbonomic_namespace }}'
  register: turbonomic_namespace_output

- name: Set turbonomic_namespace_fsgroup
  vars:
    regex: '.+?(?=/)'
  set_fact:
    turbonomic_namespace_fsgroup: "{{ turbonomic_namespace_output.resources[0].metadata.annotations['openshift.io/sa.scc.uid-range'] | regex_search(regex) }}"

# 6. Deploy Turbonomic subscription and Operator Group
# -----------------------------------------------------------------------------
- name: "Create Turbonomic operator group"
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'templates/operator-group.yaml') }}"
    wait: yes
    wait_timeout: 60 #subsequent tasks will fail if the CRD isn't fully created

- name: "Create Turbonomic subscription"
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'templates/subscription.yaml') }}"
    wait: yes
    wait_timeout: 300
    wait_condition:
      type: 'CatalogSourcesUnhealthy'
      status: "False"

- name: "Wait until the Turbonomic CRD is available"
  kubernetes.core.k8s_info:
    api_version: apiextensions.k8s.io/v1
    name: "xls.charts.helm.k8s.io"
    kind: CustomResourceDefinition
    wait: yes
    wait_sleep: 10
    wait_timeout: 300 # 5 mins until we give up waiting for the CRD to get into the expected state
    wait_condition:
      type: NamesAccepted
      status: "True"
  register: turbonomic_crd_info
  retries: 120 # ~approx 10 minutes before we give up waiting for the CRD to be created
  delay: 5 # seconds
  until:
    - turbonomic_crd_info.resources is defined
    - turbonomic_crd_info.resources | length > 0


# 7. Wait until Turbonomic Operator is ready
# -----------------------------------------------------------------------------
- name: "Wait for {{ turbonomic_sub_name }} to be ready (60s delay)"
  kubernetes.core.k8s_info:
    api_version: apps/v1
    name: "t8c-operator"
    namespace: "{{ turbonomic_namespace }}"
    kind: Deployment
  register: turbonomic_operator_deployment
  until:
    - turbonomic_operator_deployment.resources is defined
    - turbonomic_operator_deployment.resources | length > 0
    - turbonomic_operator_deployment.resources[0].status is defined
    - turbonomic_operator_deployment.resources[0].status.replicas is defined
    - turbonomic_operator_deployment.resources[0].status.readyReplicas is defined
    - turbonomic_operator_deployment.resources[0].status.readyReplicas == turbonomic_operator_deployment.resources[0].status.replicas
  retries: 30 # Approximately 1/2 hour before we give up
  delay: 60 # 1 minute


# 8. Create Turbonomic Custom Resource
# -----------------------------------------------------------------------------
- name: "Create Turbonomic Custom Resource"
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'templates/cr.yaml') }}"


# 9. Wait Turbonomic Custom Resourceto be complete
# -----------------------------------------------------------------------------
- name: "Wait for Turbonomic Custom Resource to be ready (60s delay)"
  kubernetes.core.k8s_info:
    api_version: charts.helm.k8s.io/v1
    name: "{{ turbonomic_cr_name }}"
    namespace: "{{ turbonomic_namespace }}"
    kind: Xl
  register: turbonomic_cr_result
  until:
    - turbonomic_cr_result.resources is defined and turbonomic_cr_result.resources | length == 1
    - turbonomic_cr_result.resources[0].status is defined
    - turbonomic_cr_result.resources[0].status.conditions | selectattr('type', 'equalto', 'Deployed') | map(attribute='status') | list | length > 0
    - turbonomic_cr_result.resources[0].status.conditions | selectattr('type', 'equalto', 'Deployed') | map(attribute='status') | list | first == "True"
  retries: 45 # approx 45 minutes before we give up
  delay: 60 # 1 minute

# TODO : WAIT FOR RSYSLOG