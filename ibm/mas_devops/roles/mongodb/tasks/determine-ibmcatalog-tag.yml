---
# The MongoDB version is based on the chosen ibm-operator-catalog.  However the
# ibm-operator-catalog does not explicitly include information about the mongo version.
#
# To determine which catalog metadata to use, this role
# extracts the catalog_tag from the ibm-operator-catalog's displayName.
#
# For example:
#   displayName: IBM Maximo Operators (v9-240625-amd64)
#
# catalog_tag is v9-240625-amd64
# MongoDB version will be determined from the catalog metadata (get_catalog_info.py)
#
# And FINALLY...
#   If the MongoDB version cannot be determined from the above logic,
#   the MongoDB version will be determined by the most recent catalog data
#   available (get_newest_catalog_tag.py)
#
#   And if still it cannot be determined because perhaps its not specified in the
#   configuration file, a default value will be used.

- name: "Lookup the latest version of the Maximo Operator Catalog"
  when: last_catalog_tag is not defined or last_catalog_tag == ""
  block:
    - name: "Get newest operator catalog tag"
      ibm.mas_devops.get_newest_catalog_tag:
        arch: amd64
      register: _newest_catalog
    - name: "Store tag in last_catalog_tag"
      set_fact:
        last_catalog_tag: "{{ _newest_catalog.result }}"

- name: "Display the Last Catalog Version"
  debug:
    msg:
      - "Catalog Info Lookup ............................. {{ _newest_catalog | default('N/A') }}"
      - "Last Catalog Version ............................ {{ last_catalog_tag | default('<Unknown>') }}"


# 1. Get the IBM Catalog if available
# -----------------------------------------------------------------------------
- name: "Lookup ibm-operator-catalog"
  kubernetes.core.k8s_info:
    api_version: operators.coreos.com/v1alpha1
    name: ibm-operator-catalog
    namespace: openshift-marketplace
    kind: CatalogSource
  register: catalog_lookup

- name: "Determine catalog version from catalog displayName"
  block:
    # extract the catalog tag from displayName
    - set_fact:
        catalog_tag: "{{ catalog_lookup.resources[0].spec.displayName.split('(')[1].split(')')[0].split(' ')[0] }}"
      when:
        - catalog_lookup is defined
        - catalog_lookup.resources is defined
        - catalog_lookup.resources | length > 0
        - catalog_lookup.resources[0].spec is defined
        - catalog_lookup.resources[0].spec.displayName is defined
        - '"(" in catalog_lookup.resources[0].spec.displayName'

    - name: "Check if catalog is known"
      when: catalog_tag is defined and catalog_tag != ""
      ibm.mas_devops.get_catalog_info:
        mas_catalog_version: "{{ catalog_tag }}"
      register: catalog_metadata

    # use last_catalog_tag if the casebundles file does not exist
    - name: "Detault to the newest catalog (1)"
      when:
        - catalog_metadata.failed
        - last_catalog_tag is defined and last_catalog_tag != ""
      set_fact:
        catalog_tag: "{{ last_catalog_tag }}"

    # use last_catalog_tag if unable to get catalog_tag from displayName
    - name: "Default to the newest catalog (2)"
      when:
        - catalog_tag is not defined
        - last_catalog_tag is defined and last_catalog_tag != ""
      set_fact:
        catalog_tag: "{{ last_catalog_tag }}"

  rescue:
    # use the last_catalog_tag when the catalog_tag cannot be determined from the displayName
    - name: "Default to the newest catalog (3)"
      when: last_catalog_tag is defined and last_catalog_tag != ""
      set_fact:
        catalog_tag: "{{ last_catalog_tag }}"


- name: "Catalog Version (Final)"
  debug:
    msg: "Catalog Version ............................ {{ catalog_tag | default('<Unknown>')}}"
