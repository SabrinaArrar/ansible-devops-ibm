---

# 1. Get the IBM Catalog if available
# -----------------------------------------------------------------------------
- name: "Lookup ibm-operator-catalog"
  kubernetes.core.k8s_info:
    api_version: operators.coreos.com/v1alpha1
    name: ibm-operator-catalog
    namespace: openshift-marketplace
    kind: CatalogSource
  register: catalog_lookup

- set_fact:
    catalog_tag: "{{ catalog_lookup.resources[0].spec.displayName.split('(')[1].split(')')[0].split(' ')[0] }}"
  when:
    - catalog_lookup.resources[0].spec.displayName is defined

- name: "Catalog Version"
  debug:
    msg:
      - "Catalog Version ............................ {{ catalog_tag }}"
  when: catalog_tag is defined

# 2. Load default settings
# -----------------------------------------------------------------------------
- name: Load CASE bundle versions
  include_vars:
    file: "{{ role_path }}/../../common_vars/casebundles/{{ catalog_tag }}.yml"
  when: catalog_tag is defined and catalog_tag != ""

- name: Set mongo version to default value when no catalog
  set_fact:
    mongo_extras_version: "{{ mongo_extras_version_default }}"
  when: mongo_extras_version is not defined

- name: "Mongo Version"
  debug:
    msg:
      - "Mongo Version ............................ {{ mongo_extras_version }}"

- name: Load mongo defaults
  include_vars:
    file: "{{ role_path }}/../mirror_extras_prepare/vars/mongoce_{{ mongo_extras_version }}.yml"

- name: Retrieve image setting parts
  set_fact:
    mongodb_operator_image_name: "{{ extra_images | selectattr('name', 'match', '.*/mongodb-kubernetes-operator$') | map(attribute='name') | first }}"
    mongodb_operator_image_registry: "{{ extra_images | selectattr('name', 'match', '.*/mongodb-kubernetes-operator$') | map(attribute='registry') | first }}"
    mongodb_operator_image_digest: "{{ extra_images | selectattr('name', 'match', '.*/mongodb-kubernetes-operator$') | map(attribute='digest') | first }}"
    mongodb_operator_image_tag: "{{ extra_images | selectattr('name', 'match', '.*/mongodb-kubernetes-operator$') | map(attribute='tag') | first }}"
    mongodb_operator_version_upgrade_post_start_hook_image_name: "{{ extra_images | selectattr('name', 'match', '.*/mongodb-kubernetes-operator-version-upgrade-post-start-hook$') | map(attribute='name') | first }}"
    mongodb_operator_version_upgrade_post_start_hook_image_registry: "{{ extra_images | selectattr('name', 'match', '.*/mongodb-kubernetes-operator-version-upgrade-post-start-hook$') | map(attribute='registry') | first }}"
    mongodb_operator_version_upgrade_post_start_hook_image_digest: "{{ extra_images | selectattr('name', 'match', '.*/mongodb-kubernetes-operator-version-upgrade-post-start-hook$') | map(attribute='digest') | first }}"
    mongodb_agent_image_name: "{{ extra_images | selectattr('name', 'match', '.*/mongodb-agent$') | map(attribute='name') | first }}"
    mongodb_agent_image_registry: "{{ extra_images | selectattr('name', 'match', '.*/mongodb-agent$') | map(attribute='registry') | first }}"
    mongodb_agent_image_digest: "{{ extra_images | selectattr('name', 'match', '.*/mongodb-agent$') | map(attribute='digest') | first }}"
    mongodb_readinessprobe_image_name: "{{ extra_images | selectattr('name', 'match', '.*/mongodb-kubernetes-readinessprobe$') | map(attribute='name') | first }}"
    mongodb_readinessprobe_image_registry: "{{ extra_images | selectattr('name', 'match', '.*/mongodb-kubernetes-readinessprobe$') | map(attribute='registry') | first }}"
    mongodb_readinessprobe_image_digest: "{{ extra_images | selectattr('name', 'match', '.*/mongodb-kubernetes-readinessprobe$') | map(attribute='digest') | first }}"
    mongodb_image_name: "{{ extra_images | selectattr('name', 'match', '.*/mongo$') | map(attribute='name') | first }}"
    mongodb_image_registry: "{{ extra_images | selectattr('name', 'match', '.*/mongo$') | map(attribute='registry') | first }}"
    mongodb_image_digest: "{{ extra_images | selectattr('name', 'match', '.*/mongo$') | map(attribute='digest') | first }}"

- name: Construct image full image settings
  set_fact:
    target_mongodb_version: "{{ mongo_extras_version }}"
    mongodb_ce_version: "{{ mongodb_operator_image_tag }}"
    target_mongodb_operator_image: "{{ mongodb_operator_image_registry }}/{{ mongodb_operator_image_name }}@{{ mongodb_operator_image_digest }}"
    target_mongodb_operator_version_upgrade_post_start_hook_image: "{{ mongodb_operator_version_upgrade_post_start_hook_image_registry }}/{{ mongodb_operator_version_upgrade_post_start_hook_image_name }}@{{ mongodb_operator_version_upgrade_post_start_hook_image_digest }}"
    target_mongodb_agent_image: "{{ mongodb_agent_image_registry }}/{{ mongodb_agent_image_name }}@{{ mongodb_agent_image_digest }}"
    target_mongodb_readinessprobe_image: "{{ mongodb_readinessprobe_image_registry }}/{{ mongodb_readinessprobe_image_name }}@{{ mongodb_readinessprobe_image_digest }}"
    target_mongodb_image: "{{ mongodb_image_registry }}/{{ mongodb_image_name }}@{{ mongodb_image_digest }}"

# 3. Debug Properties
# -----------------------------------------------------------------------------
- name: "community : install : Debug properties"
  debug:
    msg:
      - "MongoDb namespace ............ {{ mongodb_namespace }}"
      - "MongoDb operator version ..... {{ mongodb_ce_version }}"
      - "MongoDb data capacity ........ {{ mongodb_storage_capacity_data }}"
      - "MongoDb logs capacity ........ {{ mongodb_storage_capacity_logs }}"
      - "MongoDb replicas ............. {{ mongodb_replicas }}"
      - "MongoDb version .............. {{ target_mongodb_version }}"
      - "MAS instance ID .............. {{ mas_instance_id | default('<undefined>', True) }}"
      - "MAS config directory ......... {{ mas_config_dir | default('<undefined>', True)  }}"
      - "Controlled Upgrade ........... {{ controlled_upgrade }}"

# 2. Check if we need a controlled upgrade
#  This will be when we have an existing mongodb and mongo operator and neither
#  version are at the version this role requires.
# -----------------------------------------------------------------------------
# - name: Check and start controlled-upgrade if we are not currently doing a controlled upgrade
#   when: not controlled_upgrade
#   block:

# 4. Check for Controlled Upgrade
# -----------------------------------------------------------------------------
- name: "community : install : Check for existing mongodb instance"
  kubernetes.core.k8s_info:
    api_version: mongodbcommunity.mongodb.com/v1
    kind: MongoDBCommunity
    name: mas-mongo-ce
    namespace: "{{ mongodb_namespace }}"
  register: existing_mongodb

- name: "community : install : Check for existing mongo operator instance"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Pod
    label_selectors:
      - "name = mongodb-kubernetes-operator"
    namespace: "{{ mongodb_namespace }}"
  register: existing_mongo_operator

- name: "community : install : Debug existing resources"
  debug:
    msg:
      - "Existing MongoDb  ........ {{ existing_mongodb }}"
      - "Existing operator version  {{ existing_mongo_operator }}"

- name: "community : install : begin controlled upgrade process"
  include_tasks: tasks/providers/community/controlled-upgrade.yml
  vars:
    current_mongodb_version: "{{ existing_mongodb.resources[0].spec.version }}"
    current_mongodb_image: "{{ existing_mongodb.resources[0].spec.statefulSet.spec.template.spec.containers[0].image }}"
    current_mongo_operator_image: "{{ existing_mongo_operator.resources[0].spec.containers[0].image }}"
  when:
    - not controlled_upgrade
    - existing_mongodb is defined
    - existing_mongodb.resources[0] is defined
    - existing_mongodb.resources[0].spec.version is defined
    - existing_mongodb.resources[0].spec.version != target_mongodb_version
    - existing_mongo_operator is defined
    - existing_mongo_operator.resources[0] is defined
    - existing_mongo_operator.resources[0].spec.containers[0].image != target_mongodb_operator_image

# 5. Install the CRD
# -----------------------------------------------------------------------------
- name: "community : install : Install MongoDBCommunity CRD"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/community/{{ mongodb_ce_version }}/crd.yml.j2') }}"


# 6. Create namespace & install RBAC
# -----------------------------------------------------------------------------
- name: "community : install : Create namespace & install RBAC"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/community/{{ mongodb_ce_version }}/rbac.yml.j2') }}"


# 7. Configure anyuid permissions in the MongoDb namespace
# -----------------------------------------------------------------------------
- name: "community : install : Configure anyuid permissions in the MongoDb namespace"
  shell: |
    oc adm policy add-scc-to-user anyuid system:serviceaccount:{{ mongodb_namespace }}:default
    oc adm policy add-scc-to-user anyuid system:serviceaccount:{{ mongodb_namespace }}:mongodb-kubernetes-operator

- name: "community : install : Configure anyuid permissions for database service account"
  when: mongodb_ce_version != "0.7.0"
  shell: |
    oc adm policy add-scc-to-user anyuid system:serviceaccount:{{ mongodb_namespace }}:mongodb-database


# 8. Install the operator
# -----------------------------------------------------------------------------
- name: "community : install : Install the MongoDb Operator"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/community/{{ mongodb_ce_version }}/manager.yml.j2') }}"
    wait: yes
    wait_condition:
      status: 'True'
      type: Available

# 9. Configure TLS using cert manager
# -----------------------------------------------------------------------------
- name: "Create a issuer  in {{ mongodb_namespace }}"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/community/issuer.yml') }}"
    wait: yes
    wait_condition:
      status: 'True'
      type: Ready

- name: "Create a ca certificate in {{ mongodb_namespace }}"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/community/ca-cert.yml') }}"
    wait: yes
    wait_condition:
      status: 'True'
      type: Ready

- name: "Create a Issuer for server certificate  in {{ mongodb_namespace }}"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/community/server-cert-issuer.yml') }}"
    wait: yes
    wait_condition:
      status: 'True'
      type: Ready

- name: "Create a server certificate in {{ mongodb_namespace }}"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/community/server-cert.yml') }}"
    wait: yes
    wait_condition:
      status: 'True'
      type: Ready

# Taking ca.crt value in a variable
# Mongo needs a configmap having ca.crt value
- name: "community : install : Lookup the ca.crt"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: mongo-server-cert
    namespace: "{{mongodb_namespace}}"
  register: mongodb_ca_lookup

# Check if configmap exists
- name: "community : install : Check for existing CA configmap"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: ConfigMap
    name: mas-mongo-ce-cert-map
    namespace: "{{ mongodb_namespace }}"
  register: ca_cfgmap_info

# Creating a ca.crt configmap which will be consumed by mongo cr
- name: "community : install : Create new ca configmap"
  when:
    - ca_cfgmap_info.resources is defined
    - ca_cfgmap_info.resources | length == 0
  vars:
    mongodb_ca_crt: "{{ mongodb_ca_lookup.resources[0].data['ca.crt'] | b64decode }}"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/community/tls.yml') }}"


# 10. Create MongoDb admin user credentials secret
# -----------------------------------------------------------------------------
- name: "community : install : Check for existing user password secret"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: mas-mongo-ce-admin-password
    namespace: "{{ mongodb_namespace }}"
  register: admin_password_info

- name: "community : install : Create new MongoDb admin user credentials secret"
  when:
    - admin_password_info.resources is defined
    - admin_password_info.resources | length == 0
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/community/admin-password.yml') }}"

# 10.1 Create MongoDb metrics endpoint secret
# -----------------------------------------------------------------------------
- name: "community : install : Check for existing metrics endpoint secret"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: mas-mongo-ce-metrics-endpoint-secret
    namespace: "{{ mongodb_namespace }}"
  register: metrics_endpoint_secret_info
  when:
    - mongodb_ce_version is version('0.7.8', '>=')

- name: "community : install : Create new MongoDb metrics endpoint secret"
  when:
    - metrics_endpoint_secret_info.resources is defined
    - metrics_endpoint_secret_info.resources | length == 0
    - mongodb_ce_version is version('0.7.8', '>=')
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/community/metrics-endpoint-secret.yml.j2') }}"

# 11. Deploy the cluster
# -----------------------------------------------------------------------------
- name: "community : install : Create MongoDb cluster"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/community/{{ mongodb_ce_version }}/cr.yml.j2') }}"

- name: "community : install : Set expected MongoDb version to {{ current_mongodb_version }}"
  set_fact:
    expected_mongodb_version: "{{ current_mongodb_version }}"
  when: controlled_upgrade

- name: "community : install : Set expected MongoDb version to {{ target_mongodb_version }}"
  set_fact:
    expected_mongodb_version: "{{ target_mongodb_version }}"
  when:
    - not controlled_upgrade
    - mongodb_ce_version is version('0.7.8', '>=')

- name: "community : install : Set expected MongoDb version to 4.2.23"
  set_fact:
    expected_mongodb_version: "4.2.23"
  when:
    - not controlled_upgrade
    - mongodb_ce_version is version('0.7.0', '==')

# 12. Wait for the cluster to be ready
# status.version on the mongo cr is not available with older mongo operators
# -----------------------------------------------------------------------------
- name: "community : install : Wait for stateful set to be ready"
  kubernetes.core.k8s_info:
    api_version: apps/v1
    kind: StatefulSet
    name: mas-mongo-ce
    namespace: "{{ mongodb_namespace }}"
  register: mongodb_statefulset
  retries: 45 # Approx 45 minutes
  delay: 60 # 1 minute
  until:
    - mongodb_statefulset.resources is defined
    - mongodb_statefulset.resources | length > 0
    - mongodb_statefulset.resources[0].status.readyReplicas is defined
    - mongodb_statefulset.resources[0].status.readyReplicas ==  (mongodb_replicas|int)

- name: "community : install : Wait for Mongo CR to report corrrect version"
  kubernetes.core.k8s_info:
    api_version: mongodbcommunity.mongodb.com/v1
    kind: MongoDBCommunity
    name: mas-mongo-ce
    namespace: "{{ mongodb_namespace }}"
  register: mongodb_cr
  retries: 45 # Approx 45 minutes
  delay: 60 # 1 minute
  until:
    - (mongodb_ce_version is version('0.7.8', '>=') and mongodb_cr.resources[0].status.version is defined) or mongodb_ce_version is version('0.7.0', '==')
    - (mongodb_ce_version is version('0.7.8', '>=') and mongodb_cr.resources[0].status.version == expected_mongodb_version) or mongodb_ce_version is version('0.7.0', '==')

# 12.1 Create MongoDb service monitor
# -----------------------------------------------------------------------------
- name: "community : install : Check for existing service monitor"
  kubernetes.core.k8s_info:
    api_version: monitoring.coreos.com/v1
    kind: ServiceMonitor
    name: mas-mongo-ce-service-monitor
    namespace: "{{ mongodb_namespace }}"
  register: mongoce_servicemonitor_info
  when:
    - mongodb_ce_version is version('0.7.8', '>=')

- name: "community : install : Create new MongoDb service monitor"
  when:
    - mongoce_servicemonitor_info.resources is defined
    - mongoce_servicemonitor_info.resources | length == 0
    - mongodb_ce_version is version('0.7.8', '>=')
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/community/servicemonitor.yml.j2') }}"

# 12.2 Create MongoDb Grafana dashboard
# -----------------------------------------------------------------------------
- name: Get cluster info
  kubernetes.core.k8s_cluster_info:
  register: api_status
  no_log: true

- name: Determine cluster capabilities
  set_fact:
    supports_integreatly_org: True # Default is 'False'
  when:
    - api_status is defined
    - api_status.apis is defined
    - api_status.apis['integreatly.org/v1alpha1'] is defined

- name: "community : install : Check for existing Grafana dashboard"
  kubernetes.core.k8s_info:
    api_version: integreatly.org/v1alpha1
    kind: GrafanaDashboard
    name: mongodb-overview
    namespace: "{{ mongodb_namespace }}"
  register: mongoce_grafana_dashboard_info
  when:
    - mongodb_ce_version is version('0.7.8', '>=')
    - supports_integreatly_org

- name: "community : install : Create new MongoDb Grafana dashboard"
  when:
    - mongoce_grafana_dashboard_info.resources is defined
    - mongoce_grafana_dashboard_info.resources | length == 0
    - mongodb_ce_version is version('0.7.8', '>=')
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/community/dashboards/mongodb-overview.yml.j2') }}"

# 13. Create MAS MongoCfg
# -----------------------------------------------------------------------------
# Lookup the mongo pods
- name: Create the MAS MongoCfg only if we are not in a controlled-upgrade flow
  when: not controlled_upgrade
  block:

    - name: "community : install : Lookup mongo pods"
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: "{{ mongodb_namespace }}"
        label_selectors:
          - app=mas-mongo-ce-svc
      register: mongo_pods_output

    # List all mongo replicas
    - set_fact:
        mongo_replicas: "{{ mongo_replicas|default([]) + [item.metadata.name] }}"
      with_items: "{{ mongo_pods_output.resources }}"

    # Load mongo-hosts template to dynamically set as many mongo hosts:port as identified
    - set_fact:
        mongo_hosts: "{{ lookup('ansible.builtin.template', 'templates/community/mongo-hosts.yml.j2') }}"

    # Lookup the admin password that was used
    - name: "community : install : Lookup admin password"
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        name: mas-mongo-ce-admin-admin
        namespace: "{{ mongodb_namespace }}"
      register: admin_password_lookup
      retries: 30 # 30 * 30 seconds = 30 minutes
      delay: 30
      until:
        - admin_password_lookup.resources | length > 0
        - admin_password_lookup.resources[0].data.password is defined

    # Lookup the CA PEM
    - name: "community : install : Lookup the ca.pem"
      kubernetes.core.k8s_info:
        api_version: v1
        kind: ConfigMap
        name: mas-mongo-ce-cert-map
        namespace: "{{ mongodb_namespace }}"
      register: mongodb_ca_lookup

    # Lookup the server certificate
    - name: "community : install : Lookup the server.crt"
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        name: mongo-server-cert
        namespace: "{{ mongodb_namespace }}"
      register: mongodb_crt_lookup

    - name: "community : install : Create MAS MongoCfg"
      when:
        - mas_instance_id is defined
        - mas_instance_id != ""
        - mas_config_dir is defined
        - mas_config_dir != ""
      ansible.builtin.template:
        src: community/suite_mongocfg.yml.j2
        dest: "{{ mas_config_dir }}/mongo-{{ mongodb_namespace }}.yml"
        mode: '664'
      vars:
        mongodb_ca_pem: "{{ mongodb_ca_lookup.resources[0].data['ca.crt'] }}"
        mongodb_admin_password: "{{ admin_password_lookup.resources[0].data.password | b64decode }}"
