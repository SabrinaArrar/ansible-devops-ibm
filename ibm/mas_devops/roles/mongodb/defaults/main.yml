---
# Currently supported providers are aws,ibm,community
mongodb_provider: "{{ lookup('env','DB_PROVIDER') | default('community','True')}}"

# When these are defined we will generate a MAS MongoCfg template
mas_instance_id: "{{ lookup('env', 'MAS_INSTANCE_ID') }}"
mas_config_dir: "{{ lookup('env', 'MAS_CONFIG_DIR') }}"
mongodb_action: "{{ lookup('env', 'MONGODB_ACTION') | default('provision', true) }}"

# mongodb community vars
# -----------------------------------------------------------------------------

# Which version of the MongoDb Community Edition operator to use
mongodb_ce_version: "{{ lookup('env', 'MONGODB_CE_VERSION') | default('0.7.0', true) }}"

# Where to install the operator and create the mongo instance
mongodb_namespace: "{{ lookup('env', 'MONGODB_NAMESPACE') | default('mongoce', True) }}"

# Storage configuration
mongodb_storage_class: "{{ lookup('env', 'MONGODB_STORAGE_CLASS') }}"
mongodb_storage_capacity_data: "{{ lookup('env', 'MONGODB_STORAGE_CAPACITY_DATA') | default('20Gi', True) }}"
mongodb_storage_capacity_logs: "{{ lookup('env', 'MONGODB_STORAGE_CAPACITY_LOGS') | default('20Gi', True) }}"

# CPU and memory limits configuration on the mongodb container
mongodb_cpu_limits: "{{ lookup('env', 'MONGODB_CPU_LIMITS') | default('1', true) }}"
mongodb_mem_limits: "{{ lookup('env', 'MONGODB_MEM_LIMITS') | default('1Gi', true) }}"

# CPU and memory request configuration on the mongodb container
mongodb_cpu_requests: "{{ lookup('env', 'MONGODB_CPU_REQUESTS') | default('500m', true) }}"
mongodb_mem_requests: "{{ lookup('env', 'MONGODB_MEM_REQUESTS') | default('1Gi', true) }}"

# MongoDB Replicas
mongodb_replicas: "{{ lookup('env', 'MONGODB_REPLICAS') | default(3,True) }}"

# aws documentdb vars
# -----------------------------------------------------------------------------
aws_access_key_id: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
aws_secret_access_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
aws_region: "{{ lookup('env', 'AWS_REGION') | default('us-east-2', True) }}"

# aws vpc id where subnets and other resources will be created
vpc_id: "{{ lookup('env','VPC_ID') }}"

docdb_cluster_name: "{{ lookup('env', 'DOCDB_CLUSTER_NAME') }}"
docdb_subnet_group_name: "docdb-{{ docdb_cluster_name }}"
docdb_security_group_name: "docdb-{{ docdb_cluster_name }}"
docdb_admin_credentials_secret_name: "{{ docdb_cluster_name }}-admin-credentials"

docdb_instance_identifier_prefix: "{{ lookup('env', 'DOCDB_INSTANCE_IDENTIFIER_PREFIX')}}"
docdb_instance_number: "{{ lookup('env', 'DOCDB_INSTANCE_NUMBER') | default(3, True) }}"
docdb_instance_class: "{{ lookup('env', 'DOCDB_INSTANCE_CLASS') | default('db.t3.medium', True) }}"
docdb_master_username: "{{ lookup('env', 'DOCDB_MASTER_USERNAME') | default('docdbadmin', True) }}" # refere other dbs admin usernames <mas-instance-id>-admin
docdb_engine_version: "{{ lookup('env', 'DOCDB_ENGINE_VERSION') | default('4.0.0', True) }}"

# cidr for subnets in 3 different availabilty zones
docdb_cidr_az1: "{{ lookup('env', 'DOCDB_CIDR_AZ1') }}"
docdb_cidr_az2: "{{ lookup('env', 'DOCDB_CIDR_AZ2') }}"
docdb_cidr_az3: "{{ lookup('env', 'DOCDB_CIDR_AZ3') }}"

# add ipv4 cidr of vpc so that all applications inside that vpc can talk to documentdb
docdb_ingress_cidr: "{{ lookup('env', 'DOCDB_INGRESS_CIDR') }}"
docdb_egress_cidr: "{{ lookup('env', 'DOCDB_EGRESS_CIDR') }}"

# ibmcloud mongodb vars
# -----------------------------------------------------------------------------
ibm_mongo_admin_credentials_secret_name: "{{ ibm_mongo_name }}-admin-credentials"
mongo_service_credentials_secret_name: "{{ ibm_mongo_name }}-service-credentials"

ibm_mongo_backup_id: "{{ lookup('env', 'IBM_MONGO_BACKUP_ID') | default('',True) }}"
is_restore: "{{ lookup('env', 'IS_RESTORE') | default(false,True) }}"
ibmcloud_resourcegroup: "{{ lookup('env','IBMCLOUD_RESOURCEGROUP') | default('Default', True) }}"
ibmcloud_region: "{{ lookup('env', 'IBMCLOUD_REGION') | default('us-east', True) }}"
ibmcloud_apikey: "{{ lookup('env', 'IBMCLOUD_APIKEY') }}"

ibm_mongo_plan:  "{{ lookup('env', 'IBM_MONGO_PLAN') | default('standard',True) }}"
ibm_mongo_location: "{{ ibmcloud_region }}"
ibm_mongo_service: "databases-for-mongodb"
ibm_mongo_service_endpoints: "{{ lookup('env', 'IBM_MONGO_SERVICE_ENDPOINTS') | default('public',True) }}"
ibm_mongo_version: "{{ lookup('env', 'IBM_MONGO_VERSION') | default('4.2',True) }}"

ibm_mongo_memory: "{{ lookup('env', 'IBM_MONGO_MEMORY') | default('3840',True) }}"
ibm_mongo_disk: "{{ lookup('env', 'IBM_MONGO_DISK') | default('30720',True) }}"
ibm_mongo_cpu: "{{ lookup('env', 'IBM_MONGO_CPU') | default(0,True) }}"
ibm_mongo_name: "mongo-{{ mas_instance_id }}"

# aws docdb_secret_rotate vars
# -----------------------------------------------------------------------------
docdb_mongo_instance_name: "{{ lookup('env', 'DOCDB_MONGO_INSTANCE_NAME') }}"
docdb_host: "{{ lookup('env', 'DOCDB_HOST') }}"
docdb_port: "{{ lookup('env', 'DOCDB_PORT') }}"
docdb_instance_username: "{{ lookup('env', 'DOCDB_INSTANCE_USERNAME') }}"
docdb_instance_password_old: "{{ lookup('env', 'DOCDB_PASSWORD_OLD') }}"
docdb_master_password: "{{ lookup('env', 'DOCDB_MASTER_PASSWORD') }}"
# Custom Labels
custom_labels: "{{ lookup('env', 'CUSTOM_LABELS') | default(None, true) | string | ibm.mas_devops.string2dict() }}"
