---

# 1. Check for undefined properties that do not have a default
# -----------------------------------------------------------------------------
- name: "{{ case_name }} : Fail if required properties are not provided for dev access"
  assert:
    that:
      - artifactory_username is defined and artifactory_username != ""
      - artifactory_apikey is defined and artifactory_apikey != ""
    fail_msg: "One or more required properties are missing"

# 2. Debug
# -----------------------------------------------------------------------------
- name: "{{ case_name }} : Airgap setup configuration"
  debug:
    msg:
      - "Case Name .............................. {{ case_name }}"
      - "Case Version ........................... {{ case_version }}"
      - "Registry Public Host ................... {{ registry_public_host }}"
      - "Registry Public Port ................... {{ registry_public_port }}"

# 3. Download the dev bundle from artifactory
# -----------------------------------------------------------------------------
- name: "{{ case_name }} : Download the dev bundle"
  ansible.builtin.get_url:
    url: "{{ artifactory_bundle_url }}/{{ case_name }}/{{ case_version }}/{{ case_name }}-dev-with-digest-bundle-{{ case_version }}.tgz"
    username: "{{ artifactory_username }}"
    password: "{{ artifactory_apikey }}"
    dest: "{{ mirror_working_dir }}"
  register: bundle_download

# 4. Extract the dev bundle
# -----------------------------------------------------------------------------
- name: "{{ case_name }} : Extract the dev bundle"
  shell: |
    tar -xzf "{{ bundle_download.dest }}" -C "{{ mirror_working_dir }}"
  register: bundle_unarchive

# 5. Write src=dest mapping for image mirroring
# -----------------------------------------------------------------------------
- name: "{{ case_name }} : Generate manifest using the related images from the CSV file"
  ansible.builtin.lineinfile:
    path: "{{ mirror_working_dir }}/manifests/direct/{{ case_name }}_{{ case_version }}.txt"
    create: true
    line: "{{ item.image + '=' + registry_public_url + '/' + item.name }}"
  loop: "{{ (lookup('file', '{{ mirror_working_dir }}/{{ case_name }}-dev-with-digest-bundle/operators/{{ case_name }}/config/manifests/bases/{{ case_name }}.clusterserviceversion.yaml') | from_yaml).spec.relatedImages }}"

# 6. Get the rest of the images from resources.yaml file
# -----------------------------------------------------------------------------
- name: "{{ case_name }} : Find the inventory Setup path"
  find:
    paths: "{{ mirror_working_dir }}/{{ case_name }}-dev-with-digest-bundle/case"
    patterns: "*Setup"
    file_type: "directory"
    recurse: true
  register: inventory_lookup

- name: "{{ case_name }} : Fail if the path does not exist"
  assert:
    that:
      - inventory_lookup.files is defined and inventory_lookup.files | length == 1
    fail_msg: "Inventory Setup directory does not exist or has multiple occurances"

- name: "{{ case_name }} : Generate remaining manifest from resources file"
  ansible.builtin.lineinfile:
    path: "{{ mirror_working_dir }}/manifests/direct/{{ case_name }}_{{ case_version }}.txt"
    line: '{{ item.registries[0].host + "/" + item.image + "@" + item.digest + "=" +registry_public_url + "/" + item.image }}'
  loop: "{{ (lookup('file', '{{ inventory_lookup.files[0].path }}/resources.yaml') | from_yaml).resources.resourceDefs.containerImages }}"
