---

# 1. Check for undefined properties that do not have a default
# -----------------------------------------------------------------------------
- name: "{{ case_name }} : Fail if required properties are not provided for pre-release access"
  assert:
    that:
      - artifactory_username is defined and artifactory_username != ""
      - artifactory_apikey is defined and artifactory_apikey != ""
      - case_inventory is defined and case_inventory != ""
    fail_msg: "One or more required properties are missing"

# 2. Debug
# -----------------------------------------------------------------------------
- name: "{{ case_name }} : Airgap setup configuration"
  debug:
    msg:
      - "Case Name .............................. {{ case_name }}"
      - "Case Version ........................... {{ case_version }}"
      - "Case Inventory Name .................... {{ case_inventory }}"
      - "Registry Public Host ................... {{ registry_public_host }}"
      - "Registry Public Port ................... {{ registry_public_port }}"

# 3. Download the pre-release bundle from artifactory
# -----------------------------------------------------------------------------
- name: "{{ case_name }} : Download the pre-release bundle"
  ansible.builtin.get_url:
    url: "{{ artifactory_url }}/{{ case_name }}/{{ case_version }}/{{ case_name }}-bundle-{{ case_version }}.tgz"
    username: "{{ artifactory_username }}"
    password: "{{ artifactory_apikey }}"
    dest: "{{ mirror_working_dir }}"
  register: bundle_download

# 4. Extract the pre-release bundle
# -----------------------------------------------------------------------------
- name: "{{ case_name }} : Extract the pre-release bundle"
  shell: |
    tar -xzf "{{ bundle_download.dest }}" -C "{{ mirror_working_dir }}"
  register: bundle_unarchive

# 5. Create Directories to hold the manifest file
# -----------------------------------------------------------------------------
- name: "{{ case_name }} : Create target directories (only direct for pre-release)"
  file:
    path: "{{ mirror_working_dir }}/manifests/direct"
    state: directory

# 6. Generate the manifest file from the image-map and resources file
# -----------------------------------------------------------------------------
- name: "{{ case_name }} : Generate manifest from image-map"
  ansible.builtin.lineinfile:
    path: "{{ mirror_working_dir }}/manifests/direct/{{ case_name }}_{{ case_version }}.txt"
    create: true
    line: '{{ "wiotp-docker-local.artifactory.swg-devops.com" + "/" + ((item | split(": ") | first) | split("/"))[2:] | join("/") + "=" + registry_public_url + "/" + ((item | split(": ") | first) | split("/"))[1:] | join("/") }}'
  loop: "{{ lookup('file', '{{ mirror_working_dir }}/{{ case_name }}-bundle/case/{{ case_name }}/inventory/{{ case_inventory }}/files/image-map.yaml').splitlines() }}"

- name: "{{ case_name }} : Generate remaining manifest from resources file"
  ansible.builtin.lineinfile:
    path: "{{ mirror_working_dir }}/manifests/direct/{{ case_name }}_{{ case_version }}.txt"
    line: '{{ "wiotp-docker-local.artifactory.swg-devops.com" + "/" + item.image + ":" + item.tag + "=" +registry_public_url + "/" + item.image + ":" + item.tag }}'
  loop: "{{ (lookup('template', '{{ mirror_working_dir }}/{{ case_name }}-bundle/case/{{ case_name }}/inventory/{{ case_inventory }}/resources.yaml') | from_yaml).resources.resourceDefs.containerImages }}"
