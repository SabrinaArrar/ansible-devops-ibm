---

# 1. Check for undefined properties that do not have a default
# -----------------------------------------------------------------------------
- name: "{{ case_name }} : Fail if required properties are not provided for pre-release access"
  assert:
    that:
      - artifactory_username is defined and artifactory_username != ""
      - artifactory_apikey is defined and artifactory_apikey != ""
      - case_inventory is defined and case_inventory != ""
    fail_msg: "One or more required properties are missing"

# 2. Debug
# -----------------------------------------------------------------------------
- name: "{{ case_name }} : Airgap setup configuration"
  debug:
    msg:
      - "Case Name .............................. {{ case_name }}"
      - "Case Version ........................... {{ case_version }}"
      - "Case Inventory Name .................... {{ case_inventory }}"
      - "Registry Public Host ................... {{ registry_public_host }}"
      - "Registry Public Port ................... {{ registry_public_port }}"

# 3. Download the pre-release bundle from artifactory
# -----------------------------------------------------------------------------
- name: "{{ case_name }} : Download the pre-release bundle"
  ansible.builtin.get_url:
    url: "{{ artifactory_url }}/{{ case_name }}/{{ case_version }}/{{ case_name }}-bundle-{{ case_version }}.tgz"
    username: "{{ artifactory_username }}"
    password: "{{ artifactory_apikey }}"
    dest: "{{ mirror_working_dir }}"
  register: bundle_download

# 4. Extract the pre-release bundle
# -----------------------------------------------------------------------------
- name: "{{ case_name }} : Extract the pre-release bundle"
  shell: |
    tar -xzf "{{ bundle_download.dest }}" -C "{{ mirror_working_dir }}"
  register: bundle_unarchive

# 5. Create a list of all the images for this CASE
# -----------------------------------------------------------------------------
- name: "{{ case_name }} : Make a list from image-map"
  set_fact:
    images_with_tags: '{{ images_with_tags + [((item | split(": ") | first) | split("/"))[2:] | join("/")] }}'
    images_with_tags_long: '{{ images_with_tags_long + [((item | split(": ") | first) | split("/"))[1:] | join("/")] }}'
    og_images_with_digests: '{{ og_images_with_digests + [((item | split(": ") | last) | split("/")) | last] }}'
  loop: "{{ lookup('file', '{{ mirror_working_dir }}/{{ case_name }}-bundle/case/{{ case_name }}/inventory/{{ case_inventory }}/files/image-map.yaml').splitlines() }}"
  vars:
    images_with_tags: []
    images_with_tags_long: []
    og_images_with_digests: []

- name: "{{ case_name }} : Add images from resource file"
  when: '"-operator-bundle" is not in item.image'
  set_fact:
    images_with_tags: '{{ images_with_tags + [item.image + ":" + item.tag] }}'
    images_with_tags_long: '{{ images_with_tags_long + [item.image + ":" + item.tag] }}'
  loop: "{{ (lookup('template', '{{ mirror_working_dir }}/{{ case_name }}-bundle/case/{{ case_name }}/inventory/{{ case_inventory }}/resources.yaml') | from_yaml).resources.resourceDefs.containerImages }}"

- name: "{{ case_name }} : Add operator bundle image"
  when: '"-operator-bundle" is in item.image'
  set_fact:
    images_with_tags: '{{ images_with_tags + [item.image + "-with-digest:" + item.tag] }}'
    images_with_tags_long: '{{ images_with_tags_long + [item.image + "-with-digest:" + item.tag] }}'
  loop: "{{ (lookup('template', '{{ mirror_working_dir }}/{{ case_name }}-bundle/case/{{ case_name }}/inventory/{{ case_inventory }}/resources.yaml') | from_yaml).resources.resourceDefs.containerImages }}"

# 6. Create Directories to hold the manifest file
# -----------------------------------------------------------------------------
- name: "{{ case_name }} : Create target directories (only direct for pre-release)"
  file:
    path: "{{ mirror_working_dir }}/manifests/direct"
    state: directory

# 7. Get the images digests from artifactory using image list
# -----------------------------------------------------------------------------
- name: "{{ case_name }} : Get images digests from artifactory"
  shell: |
    (skopeo inspect "docker://{{ artifactory_image_repo }}/{{ item }}" \
      --creds "{{ artifactory_username }}:{{ artifactory_apikey }}" \
      --no-tags)| jq -r '[.Name, .Digest] | join("@")' \
  loop: "{{ images_with_tags }}"
  register: images_with_digests

# 8. Compare the artifactory digests with the original from image map
# -----------------------------------------------------------------------------
- name: "{{ case_name }} : Verify the digests for the images"
  when: "(item.0.stdout | split('/') | last) != item.1"
  debug:
    msg: "Original image map digest from bundle will be replaced to match the digest from artifactory"
  loop: "{{ images_with_digests.results | zip(og_images_with_digests) | list }}"

# 9. Generate the manifest file from images_with_digests and images_with_tags_long
# -----------------------------------------------------------------------------
- name: "{{ case_name }} : Generate the manifest file"
  ansible.builtin.lineinfile:
    path: "{{ mirror_working_dir }}/manifests/direct/{{ case_name }}_{{ case_version }}.txt"
    create: true
    line: '{{ item.0.stdout + "=" + registry_public_url + "/" + item.1 }}'
  loop: "{{ images_with_digests.results | zip(images_with_tags_long) | list }}"

# 10. Update digests in image-map and save to file
# -----------------------------------------------------------------------------
- name: "{{ case_name }} : Update the digests in the image-map and save to file"
  ansible.builtin.lineinfile:
    path: "{{ mirror_working_dir }}/image-maps/{{ case_name }}/{{ case_version }}.yaml"
    create: true
    line: '{{ (item.0 | split("@") | first) + "@" + (item.1.stdout | split("@") | last) }}'
  loop: "{{ images_map_lines | zip(images_with_digests.results) | list }}"
  vars:
    images_map_lines: "{{ lookup('file', '{{ mirror_working_dir }}/{{ case_name }}-bundle/case/{{ case_name }}/inventory/{{ case_inventory }}/files/image-map.yaml').splitlines() }}"

# 11. Debug
# -----------------------------------------------------------------------------
- name: "{{ case_name }} : Location of updated image-map"
  debug:
    msg: "Image map location - {{ mirror_working_dir }}/image-maps/{{ case_name }}/{{ case_version }}.yaml"
