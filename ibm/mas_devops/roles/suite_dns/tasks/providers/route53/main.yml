---
# 1. Check required properties
# -----------------------------------------------------------------------------
- name: "Check required properties"
  assert:
    that: route53_hosted_zone_name is defined and route53_hosted_zone_name != ""
    fail_msg: "route53_hosted_zone_name property has not been set"

# 2. Provide debug information to the user
# -----------------------------------------------------------------------------
- name: "AWS Route53: Debug information"
  debug:
    msg:
      - "AWS Hosted Zone name ................................... {{ route53_hosted_zone_name | default('Not Available, no will be created', true) }}"
      - "AWS Hosted Zone region ................................. {{ route53_hosted_zone_region }}"
      - "AWS Route53 Cluster Issuer ............................. {{ route53_prod_issuer_name }}"

# 3. Create IAM Policy to allow cert-manager to add records to AWS Route53
# -----------------------------------------------------------------------------
- name: "aws-route53 : Create AWS IAM Policy to allow cert-manager to add records"
  import_role:
    name: ibm.mas_devops.aws_policy
  vars:
    aws_policy_name: "{{ mas_instance_id }}-{{ mas_workspace_id }}-route53-policy"
    aws_policy_statement:
      - Effect: Allow
        Action: route53:GetChange
        Resource: arn:aws:route53:::change/*
      - Effect: Allow
        Action:
        - route53:ChangeResourceRecordSets
        - route53:ListResourceRecordSets
        Resource: arn:aws:route53:::hostedzone/*
      - Effect: Allow
        Action: route53:ListHostedZonesByName
        Resource: "*"

# 4. Create AWS Route 53 hosted zones
# -----------------------------------------------------------------------------
# - name: "aws-route53 : Lookup AWS Route53 Hosted zone instance"
#   shell: |
#     aws route53 list-hosted-zones-by-name | 
#     jq --arg name "{{ route53_hosted_zone_name }}." \
#     -r '.HostedZones | .[] | select(.Name=="\($name)") | .Id'
#   register: aws_hosted_zone_lookup_output

# # - set_fact:
# #     route53_hosted_zone_id: "{{ aws_hosted_zone_lookup_output.stdout | regex_replace('/hostedzone/', '''') }}"

- name: "aws-route53 : Lookup AWS Route53 Hosted zone instance"
  shell: |
    aws route53 list-hosted-zones-by-name --dns-name "{{ route53_hosted_zone_name }}" --max-items 1 --output json
  register: aws_hosted_zone_lookup_output

- set_fact:
    route53_hosted_zone_info: "{{ aws_hosted_zone_lookup_output.stdout }}"

- set_fact:
    route53_hosted_zone_id: "{{ route53_hosted_zone_info.HostedZones[0].Id | regex_replace('/hostedzone/', '''') }}"

- block:
    - name: "aws-route53 : Create AWS Route53 Hosted zone instance if none exists with name {{ route53_hosted_zone_name }}"
      shell: |
        aws route53 create-hosted-zone \
        --name {{ route53_hosted_zone_name }} \
        --caller-reference {{ route53_caller_reference }} \
        --region {{ route53_hosted_zone_region }} \
        --output json
      register: aws_hosted_zone_create_output
      failed_when: aws_hosted_zone_create_output.rc > 0 and ('HostedZoneAlreadyExists' not in aws_hosted_zone_create_output.stderr )

    - name: "aws-route53 : Lookup AWS Route53 Hosted Zone ID for {{ route53_hosted_zone_name }}"
      when: aws_hosted_zone_lookup_output.stdout | length == 0
      shell: |
        aws route53 list-hosted-zones-by-name | 
        jq --arg name "{{ route53_hosted_zone_name }}." \
        -r '.HostedZones | .[] | select(.Name=="\($name)") | .Id'
      register: aws_hosted_zone_lookup_output

    - set_fact:
        route53_hosted_zone_id: "{{ aws_hosted_zone_lookup_output.stdout | regex_replace('/hostedzone/', '''') }}"

  when: route53_hosted_zone_id | length == 0

- name: "Hosted Zone Id for {{ route53_hosted_zone_name }}"
  debug:
    var: route53_hosted_zone_id

# 5. Create AWS Route 53 cluster issuer
# -----------------------------------------------------------------------------
- name: "aws-route53 : Create AWS Route 53 cluster issuer: {{ route53_prod_issuer_name }}"
  kubernetes.core.k8s:
    namespace: "ibm-common-services"
    state: present
    template: templates/route53/clusterissuer.yml.j2

# 6. Change cert-manager deployment to include dns01-recursive
# -----------------------------------------------------------------------------
# - '--dns01-recursive-nameservers-only'
# - '--dns01-recursive-nameservers=8.8.8.8:53'
# https://community.ibm.com/community/user/asset-facilities/blogs/brian-zhu/2022/10/08/using-lets-encrypt-ssl-certificates-with-maximo-ap?CommunityKey=3d7261ae-48f7-481d-b675-a40eb407e0fd


# 7. Create CNAMEs in the hosted zone
# -----------------------------------------------------------------------------
- name: "aws-route53 : Get cluster subdomain"
  when: found_router_default_secret is not defined
  kubernetes.core.k8s_info:
    api_version: config.openshift.io/v1
    kind: Ingress
    name: cluster
  register: cluster_subdomain

- set_fact:
    cluster_ingress: "{{ cluster_subdomain.resources[0].spec.domain }}"

- name: "aws-route53 : Lookup Load Balancer DNS Name for cluster {{ cluster_ingress }}"
  shell: |
    aws route53 list-resource-record-sets --hosted-zone-id {{ route53_hosted_zone_id }} --query "ResourceRecordSets[?Name == '\\052.{{ cluster_ingress }}.'].AliasTarget.DNSName" --output json
  register: aws_hosted_zone_loadbalancer_output

- set_fact:
    route53_lb_dnsname_output: "{{ aws_hosted_zone_loadbalancer_output.stdout }}"

- set_fact:
    route53_lb_dnsname: "{{ route53_lb_dnsname_output | first }}"

- name: "aws-route53 : Generate CNAME json file for {{ route53_lb_dnsname }}"
  ansible.builtin.template:
    src: "{{ route53_cname_json_file_path_local }}/create-cnames.json.j2"
    dest: "{{ route53_cname_json_file_path_local }}/{{ mas_instance_id }}-{{ route53_hosted_zone_name }}-cnames.json"
    mode: '664'

- name: "aws-route53 : Create CNAME records pointing to {{ route53_lb_dnsname }}"
  shell: |
    aws route53 change-resource-record-sets --hosted-zone-id {{ route53_hosted_zone_id }} --change-batch file://{{ route53_cname_json_file_path_local }}/{{ mas_instance_id }}-{{ route53_hosted_zone_name }}-cnames.json
  register: aws_hosted_zone_loadbalancer_output
  failed_when: aws_hosted_zone_loadbalancer_output.rc > 0 and ('it already exists' not in aws_hosted_zone_loadbalancer_output.stderr )
