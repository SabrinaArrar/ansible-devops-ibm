---
# 1. Failure conditions
# -----------------------------------------------------------------------------
# Note that environment variables AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY
# are required by the AWS IPI openshift installer, they must be provided as
# environment variables, rather than just as parameters to Ansible
#
# Infuture, we could check if they are defined, and if not set them when
# we run the command, but as we mostly drive the role via environment variables
# that seems rather redundant at present.
- name: "aws-ipi : Fail if required parameters are not provided"
  assert:
    that:
      - lookup('env', 'AWS_ACCESS_KEY_ID') != ""
      - lookup('env', 'AWS_SECRET_ACCESS_KEY') != ""
      - cluster_name is defined and cluster_name != ""
      - ocp_install_base_domain is defined and ocp_install_base_domain != ""
      - ocp_install_pull_secret_file is defined and ocp_install_pull_secret_file != ""
    fail_msg: "One or more required parameters are not defined"


# 2. Debug Info
# -----------------------------------------------------------------------------
- name: "aws-ipi : Debug information"
  debug:
    msg:
      - "Cluster name ........................... {{ cluster_name }}"
      - "OCP Version ............................ {{ ocp_version }}"
      - "OCP Install Base Domain ................ {{ ocp_install_base_domain }}"
      - "OCP Install Pull Secret File ........... {{ ocp_install_pull_secret_file }}"
      - "OCP Install Dir ........................ {{ ocp_install_dir }}"
      - "OCP Installer Dir ...................... {{ ocp_installer_dir }}"
      - "AWS Region ............................. {{ aws_region }}"
      - "AWS Access Key ......................... {{ aws_access_key_id }}"
      - "AWS Secret Access Key .................. {{ aws_secret_access_key }}"
      - "AWS Compute Instance Type .............. {{ aws_compute_instance_type }}"
      - " + Compute Node Count .................. {{ compute_node_count }}"
      - "AWS Control Plane Instance Type ........ {{ aws_controlplane_instance_type }}"
      - " + Control Plane Node Count ............ {{ controlplane_node_count }}"


# 3. Install the installer
# -----------------------------------------------------------------------------
- name: "aws-ipi : Check ocp_installer_dir"
  stat:
    path: "{{ ocp_installer_dir }}"
  register: ocp_installer_dir_lookup

- name: "aws-ipi : Create ocp_installer_dir if it does not exist"
  when: not ocp_installer_dir_lookup.stat.exists
  file:
    path: "{{ ocp_installer_dir }}"
    state: directory
    mode: '755'

- name: "aws-ipi : Check ocp_installer_exe exists"
  stat:
    path: "{{ ocp_installer_exe }}"
  register: ocp_installer_exe_lookup

- name: "aws-ipi : Download the correct OCP Installer"
  when: not ocp_installer_dir_lookup.stat.exists
  unarchive:
    src: "https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/{{ ocp_version }}/openshift-install-linux.tar.gz"
    dest: "{{ ocp_installer_dir }}"
    remote_src: yes


# 4. Build the install-config.yaml
# -----------------------------------------------------------------------------
- name: "aws-ipi : Check ocp_install_config_dir"
  stat:
    path: "{{ ocp_install_config_dir }}"
  register: sno_config_directory

- name: "aws-ipi : Create ocp_install_config_dir if it does not exist"
  file:
    path: "{{ ocp_install_config_dir }}"
    state: directory
    mode: '755'
  when: not sno_config_directory.stat.exists

- name: "aws-ipi : Build the install-config.yaml"
  ansible.builtin.template:
    src: aws-ipi/install-config.yaml.j2
    dest: "{{ ocp_install_config_dir }}/install-config.yaml"
    mode: '644'


# 5. Create SNO Cluster
# -----------------------------------------------------------------------------
- name: "aws-ipi : Create SNO cluster"
  shell: openshift-install create cluster --dir={{ ocp_install_config_dir }}
  register: aws_sno_cluster_completion
  until: aws_sno_cluster_completion.rc == 0
  retries: 60
  delay: 60

- name: "aws-ipi : Debug final cluster state"
  debug:
    msg: "{{ aws_sno_cluster_completion.stdout}}"


# 6. Print SNO Cluster Information & login
# -----------------------------------------------------------------------------
- name: "aws-ipi : Retrieve the access info"
  set_fact:
    login_password: "{{ lookup('file', ocp_install_config_dir+'/auth/kubeadmin-password') }}"
    login_user: "kubeadmin"
    login_server:  "https://api.{{ lookup('env', 'CLUSTER_NAME') | default('', True) }}.{{ lookup('env','OCP_INSTALL_BASE_DOMAIN') }}:6443"

- name: "aws-ipi : Print the access info"
  debug:
    msg:
      - "Login Server:..................................{{ login_server }}"
      - "Login User:....................................{{ login_user }}"
      - "Login Password:................................{{ login_password }}"

- name: "aws-ipi : oc login"
  shell: |
    oc login -u {{ login_user }} -p {{ login_password }} --server={{ login_server }} --insecure-skip-tls-verify=true
