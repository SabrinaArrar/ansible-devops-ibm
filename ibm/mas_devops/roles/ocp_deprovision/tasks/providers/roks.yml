---

- name: "roks : Fail if ibmcloud_apikey is not provided"
  when: ibmcloud_apikey is not defined or ibmcloud_apikey == ""
  fail:
    msg: "ibmcloud_apikey property is required"

# 1. Debug Info
# -----------------------------------------------------------------------------
- name: "roks : Debug information"
  debug:
    msg:
      - "Cluster name ................. {{ cluster_name }}"
      - "IBM Cloud API key ............ {{ ibmcloud_apikey }}"


# 2. Login
# -----------------------------------------------------------------------------
- name: "roks : Login to ibmcloud account"
  shell: |
    ibmcloud login --apikey "{{ ibmcloud_apikey }}" -q --no-region


# 3. Check if the roks cluster actually exists
# -----------------------------------------------------------------------------
- name: "roks : Deprovision ROKS cluster"
  shell: |
    ibmcloud oc cluster ls --json
  register: cluster_list

- name: "roks : Search for cluster_name in list"
  set_fact:
    cluster_found: true
  when:
    - item.name == cluster_name
  with_items: "{{cluster_list.stdout|from_json}}"
  loop_control:
    label: "{{ item.name }}"


# 4. Deprovision roks cluster
# -----------------------------------------------------------------------------
- name: "roks : Deprovision ROKS cluster"
  when: cluster_found is defined
  shell: |
    ibmcloud oc cluster rm --cluster {{ cluster_name }} --force-delete-storage -f

- name: "roks : ROKS cluster does not exist"
  when: cluster_found is not defined
  debug:
    msg: "Cluster {{ cluster_name }} does not exist so there is no action to take"


# 5. Wait for the deprovision to complete
# -----------------------------------------------------------------------------
- name: "roks : Wait for cluster to be deprovisioned"
  when: cluster_found is defined
  shell: |
    ibmcloud oc cluster get --cluster {{ cluster_name }} &> /dev/null
    echo $?
  ignore_errors: True
  register: cluster_get
  retries: 30
  delay: 60 # 60s * 30 retries = 30 mins
  until: cluster_get.stdout == "1"
