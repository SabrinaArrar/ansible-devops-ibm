---
# 1. Failure conditions
# -----------------------------------------------------------------------------
- name: "aws-sno : Fail if below variables not provided"
  assert:
    that:
      - lookup('env', 'AWS_ACCESS_KEY_ID') != ""
      - lookup('env', 'AWS_SECRET_ACCESS_KEY') != ""
    fail_msg: "One or more required environment variables are not defined"

- name: "aws-sno : Default OCP version to latest"
  when: ocp_version is not defined or ocp_version == ""
  set_fact:
    ocp_version: latest


# 2. Debug Info
# -----------------------------------------------------------------------------
- name: "aws-sno: Debug information"
  debug:
    msg:
      - "Cluster name ........................... {{ cluster_name }}"
      - "OCP Version ............................ {{ ocp_version }}"
      - "OCP Install Dir ........................ {{ ocp_install_dir }}"
      - "OCP Installer Dir ...................... {{ ocp_installer_dir }}"
      - "AWS Access Key ......................... {{ aws_access_key_id }}"
      - "AWS Secret Access Key .................. {{ aws_secret_access_key }}"


# 3. Install the installer
# -----------------------------------------------------------------------------
- name: "aws-sno : Check ocp_installer_dir"
  stat:
    path: "{{ ocp_installer_dir }}"
  register: ocp_installer_dir_lookup

- name: "aws-sno : Create ocp_installer_dir if it does not exist"
  when: not ocp_installer_dir_lookup.stat.exists
  file:
    path: "{{ ocp_installer_dir }}"
    state: directory
    mode: '755'

- name: "aws-sno : Check ocp_installer_exe exists"
  stat:
    path: "{{ ocp_installer_exe }}"
  register: ocp_installer_exe_lookup

- name: "aws-sno : Download the correct OCP Installer"
  when: not ocp_installer_dir_lookup.stat.exists
  unarchive:
    src: "https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/{{ ocp_version }}/openshift-install-linux.tar.gz"
    dest: "{{ ocp_installer_dir }}"
    remote_src: yes


# 4. Build the install-config.yaml
# -----------------------------------------------------------------------------
- name: "aws-sno : Check ocp_install_config_dir"
  stat:
    path: "{{ ocp_install_config_dir }}"
  register: sno_config_directory


# 5. Destroy SNO Cluster
# -----------------------------------------------------------------------------
- name: "aws-sno : Destroy SNO cluster"
  when: sno_config_directory.stat.exists
  shell: openshift-install destroy cluster --dir={{ ocp_install_config_dir }}
  register: aws_sno_cluster_completion
  until:
    - aws_sno_cluster_completion.rc == 0
  retries: 60
  delay: 60

- name: "aws-sno : Debug final cluster state"
  debug:
    msg: "{{ aws_sno_cluster_completion.stdout}}"
