---

# 1. Setup namespaces for OCS
# -----------------------------------------------------------------------------
- name: "ocs/storage : Create Namespaces for OCS"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/wd/storage/namespace.yaml') }}"
  register: localNamespace

# 2. Install the Operator
# -----------------------------------------------------------------------------

- name: Check if operator group is present in openshift-storage already
  kubernetes.core.k8s_info:
    namespace: "openshift-storage"
    kind: OperatorGroup
  register: og_ocs_operators_info

- name: "ocs/storage : Openshift Container Storage Operator Subscription"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/wd/storage/subscription.yml.j2') }}"
  register: ocsSubscription

# 3. Wait until the StorageCluster CRD is available
# -----------------------------------------------------------------------------
- name: "Wait until the StorageCluster CRD is available"
  include_tasks: "{{ role_path }}/../../common_tasks/wait_for_crd.yml"
  vars:
    crd_name: storageclusters.ocs.openshift.io

# 4. Create the storage cluster
# -----------------------------------------------------------------------------
- name: "ocs/storage : Create OSC Cluster"
  kubernetes.core.k8s:
    apply: yes
    template: 'templates/wd/storage/storagecluster.yaml'

- name: "Wait until the StorageCluster is available (2 minute interval)"
  kubernetes.core.k8s_info:
    api_version: ocs.openshift.io/v1
    kind: StorageCluster
    name: ocs-storagecluster
    namespace: openshift-storage
  register: storagecluster_info
  retries: 20 # minutes
  delay: 60 # 1 minute
  until:
    - storagecluster_info.resources is defined
    - storagecluster_info.resources | length > 0
    - storagecluster_info.resources | json_query('[*].status.conditions[?type==`Available`][].status') | select ('match','True') | list | length == 1

- name: "Wait until the BackingStorage is available (2 minute interval)"
  kubernetes.core.k8s_info:
    api_version: noobaa.io/v1alpha1
    kind: BackingStore
    name: noobaa-default-backing-store
    namespace: openshift-storage
  register: backingstore_info
  retries: 20 # minutes
  delay: 60 # 1 minute
  until:
    - backingstore_info.resources is defined
    - backingstore_info.resources | length > 0
    - backingstore_info.resources | json_query('[*].status.conditions[?type==`Available`][].status') | select ('match','True') | list | length == 1

# 4. Provide debug information
# -----------------------------------------------------------------------------
- name: "ocs/storage : Debug information"
  debug:
    msg:
      - "Subscription changed ......... {{ ocsSubscription.changed }}"

# 4. Create 
# -----------------------------------------------------------------------------
- name: "Lookup noobaa-admin secret in openshift-namespace"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: noobaa-admin
    namespace: openshift-storage
  register: noobaa_admin_secret_info
  retries: 30 # 15 minutes
  delay: 30 # 2 minutes
  until:
    - noobaa_admin_secret_info.resources is defined
    - noobaa_admin_secret_info.resources | length > 0

- assert:
    that:
      - noobaa_admin_secret_info.resources is defined
      - noobaa_admin_secret_info.resources | length > 0
    fail_msg: "'noobaa-admin' secret does not exist in 'openshift-storage' namespace"

- name: "Lookup noobaa-s3-serving-cert secret in openshift-namespace"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: noobaa-s3-serving-cert
    namespace: openshift-storage
  register: s3_noobaa_secret_info
  retries: 30 # 15 minutes
  delay: 30 # 2 minutes
  until:
    - s3_noobaa_secret_info.resources is defined
    - s3_noobaa_secret_info.resources | length > 0

- assert:
    that:
      - s3_noobaa_secret_info.resources is defined
      - s3_noobaa_secret_info.resources | length > 0
    fail_msg: "'noobaa-s3-serving-cert' secret does not exist in 'openshift-storage' namespace"

- set_fact:
    noobaa_admin_aws_access_key_id: "{{ noobaa_admin_secret_info.resources[0].data.AWS_ACCESS_KEY_ID }}"
    noobaa_admin_aws_secret_access_key: "{{ noobaa_admin_secret_info.resources[0].data.AWS_SECRET_ACCESS_KEY }}"
    
- name: "Create noobaa-account-watson-discovery secret in {{ cpd_instance_namespace }}"
  kubernetes.core.k8s:
    apply: yes
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        namespace: "{{ cpd_instance_namespace }}"
        name: noobaa-account-watson-discovery
      data:
        AWS_ACCESS_KEY_ID: "{{ noobaa_admin_aws_access_key_id }}"
        AWS_SECRET_ACCESS_KEY: "{{ noobaa_admin_aws_secret_access_key }}"
