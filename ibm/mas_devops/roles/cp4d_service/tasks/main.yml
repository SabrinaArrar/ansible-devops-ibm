---
# 1. Debug
# -----------------------------------------------------------------------------
- name: "Check that CPD Service name has been provided"
  assert:
    that: cpd_service_name is defined and cpd_service_name != ""
    fail_msg: "CPD service name (cpd_service_name) is a required parameter to run this role"

- debug:
    msg:
      - "CPD Product Version .................... {{ cpd_product_version }}"
      - "CPD Service ............................ {{ cpd_service_name }}"


# 2. Load default storage classes and debug
# -----------------------------------------------------------------------------
- name: "Determine storage classes"
  include_tasks: "{{ role_path }}/tasks/determine-storage-classes.yml"

- name: "Debug information"
  debug:
    msg:
      - "CPD Operator Namespace ................. {{ cpd_operators_namespace }}"
      - "CPD Instance Namespace ................. {{ cpd_instance_namespace }}"
      - "CPD service to be installed ............ {{ cpd_service_name }}"
      - "CPD service storage class .............. {{ cpd_service_storage_class }}"


# 3. Install CP4D Service Subscriptions
# -----------------------------------------------------------------------------

- name: "Create EDB Operand Request if service is Watson Discovery"
  when: cpd_service_name == "wd"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/wd/operandRequest-edb.yml.j2') }}"

- name: "Install CP4D Service Subscription"
  vars:
    cpd_service_subscription_name: "cpd-{{ cpd_service_name }}-operator"
    cpd_service_package_name: "{{ cpd_service_info[cpd_service_name].package_name }}"
    cpd_service_channel_name: "{{ cpd_service_info[cpd_service_name].channel_name }}"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/subscription.yml.j2') }}"


# 4. Wait for CP4D Service Subscription to be ready
# -----------------------------------------------------------------------------
- name: "Lookup CPD Service Subscription operators"
  vars:
    service_name: "{{ cpd_service_name }}"
  kubernetes.core.k8s_info:
    api_version: apps/v1
    kind: Deployment
    name: "{{ cpd_service_info[cpd_service_name].operator_name }}"
    namespace: "{{ cpd_operators_namespace }}"
  register: cpd_service_lookup

- debug:
    var: cpd_service_lookup


# 5. Install CP4D Service CRs
# -----------------------------------------------------------------------------
- name: "Install Service CR"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates//services/{{ cpd_service_name }}.yml.j2') }}"


# 6. Wait for CP4D Service to be ready
# -----------------------------------------------------------------------------
- name: "Wait for CPD Service CR to be ready"
  kubernetes.core.k8s_info:
    api_version: "{{ cpd_service_info[cpd_service_name].api_version }}"
    kind: "{{ cpd_service_info[cpd_service_name].crd_kind }}"
    name: "ibmcpd-{{ cpd_service_name }}"
    namespace: "{{ cpd_instance_namespace }}"
  register: cpd_cr_lookup
  until:
    - cpd_cr_lookup.resources is defined
    - cpd_cr_lookup.resources | length == 1
    # TODO: Additional conditions

- debug:
    var: cpd_cr_lookup


# 7. Generate MAS Config (Watson Studio)
# -----------------------------------------------------------------------------
- name: Create WatsonStudio yml definition into {{ mas_config_dir }} folder
  when:
    - mas_instance_id is defined and mas_instance_id != ""
    - mas_config_dir is defined and mas_config_dir != ""
    - cpd_services == 'wsl'
  include_tasks: "gencfg-watsonstudio.yml"
