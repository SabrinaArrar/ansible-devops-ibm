---
# 1. Debug
# -----------------------------------------------------------------------------
- name: "Check that CPD Service name has been provided"
  assert:
    that: cpd_service_name is defined and cpd_service_name != ""
    fail_msg: "CPD service name (cpd_service_name) is a required parameter to run this role"

- debug:
    msg:
      - "CPD Product Version .................... {{ cpd_product_version }}"
      - "CPD Service ............................ {{ cpd_service_name }}"


# 2. Load default storage classes and debug
# -----------------------------------------------------------------------------
- name: "Determine storage classes"
  include_tasks: "determine-storage-classes.yml"

- name: "Debug information"
  debug:
    msg:
      - "CPD Operator Namespace ................. {{ cpd_operators_namespace }}"
      - "CPD Instance Namespace ................. {{ cpd_instance_namespace }}"
      - "CPD service to be installed ............ {{ cpd_service_name }}"
      - "CPD service storage class .............. {{ cpd_service_storage_class }}"


# 3. Determine CP4D admin login credentials
# -----------------------------------------------------------------------------
- name: "Lookup admin credentials if they haven't been provided already"
  when:
    - cpd_admin_username is not defined or cpd_admin_username == ""
    - cpd_admin_password is not defined or cpd_admin_password == ""
  include_tasks: "lookup-admin-credentials.yml"


# 4. Run Pre-req task
# -----------------------------------------------------------------------------
# Only Watson Discovery has special pre-reqs currently
- name: Run Install Prereqs
  when:
    - cpd_service_name is in ['wd']
  include_tasks: "prereqs/prereqs-{{ cpd_service_name }}.yml"


# 5. Install CP4D Service Subscriptions
# -----------------------------------------------------------------------------
- name: "Install CP4D Service Subscription"
  vars:
    cpd_service_subscription_name: "cpd-{{ cpd_service_name }}-operator"
    cpd_service_package_name: "{{ cpd_service_info[cpd_service_name].package_name }}"
    cpd_service_channel_name: "{{ cpd_service_info[cpd_service_name].channel_name }}"
  kubernetes.core.k8s:
    apply: yes
    template: "templates/subscription.yml.j2"


# 6. Wait until the Service CRD is available
# -----------------------------------------------------------------------------
- name: "Wait until the Service CRD is available"
  kubernetes.core.k8s_info:
    api_version: apiextensions.k8s.io/v1
    name: "{{ cpd_service_info[cpd_service_name].crd_name }}"
    kind: CustomResourceDefinition
    wait: yes
    wait_sleep: 10
    wait_timeout: 300 # 5 mins until we give up waiting for the CRD to get into the expected state
    wait_condition:
      type: NamesAccepted
      status: "True"
  register: service_crd_info
  retries: 120 # ~approx 5 minutes before we give up waiting for the CRD to be created
  delay: 5 # seconds
  until:
    - service_crd_info.resources is defined
    - service_crd_info.resources | length > 0


# 7. Install CP4D Service CRs
# -----------------------------------------------------------------------------
- name: "Install Service CR"
  kubernetes.core.k8s:
    apply: yes
    template: "templates/services/{{ cpd_service_name }}.yml.j2"


# 8. Wait for CP4D Service to be ready
# -----------------------------------------------------------------------------
- name: "Wait for the service to be ready"
  include_tasks: "wait/wait-{{ cpd_service_name }}.yml"


# 9. Provide CP4D dashboard URL
# -----------------------------------------------------------------------------
- name: "Obtain CP4D dashboard URL"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Route
    label_selectors: component=ibm-nginx
  register: cpd_route_lookup
  until:
    - cpd_route_lookup.resources is defined
    - cpd_route_lookup.resources | length > 0
  retries: 10 # Approximately 10 minutes before we give up
  delay: 60 # 1 minute

- name: "Set CP4D URL"
  set_fact:
    cpd_url: https://{{ cpd_route_lookup.resources[0].spec.host }}

- name: "CP4D Installation Summary:"
  debug:
    msg:
      - "CP4D Dashboard ................. {{ cpd_url }}"
      - "CP4D Username .................. admin"
      - "CP4D Password .................. Found in 'admin-user-details' secret under '{{ cpd_instance_namespace }}' namespace"
      - "CP4D Service Installed ......... {{ cpd_service_name }}"


# 10. Generate MAS Config
# -----------------------------------------------------------------------------
# Only supported/required for Watson Studio currently
- name: Generate MAS Config into {{ mas_config_dir }} folder
  when:
    - mas_instance_id is defined and mas_instance_id != ""
    - mas_config_dir is defined and mas_config_dir != ""
    - cpd_service_name is in ['wsl']
  include_tasks: "gencfg/gencfg-{{ cpd_service_name }}.yml"
