---

# 1. Get CP4D Beaker token to enable Watson API authentication
# -----------------------------------------------------------------------------
- name: "gencfg-wd : Watson Discovery Installation Summary:"
  debug:
    msg:
      - "CP4D Username .................. {{ cpd_admin_username }}"
      - "CP4D Password .................. Found in 'admin-user-details' secret under '{{ cpd_instance_namespace }}' namespace"
      - "CP4D URL ....................... {{ cpd_url }}"

- name: "gencfg-wd : Authorize the CP4D (get Bearer token)"
  uri:
    url: "{{ cpd_url }}/icp4d-api/v1/authorize"
    validate_certs: no
    method: POST
    headers:
      cache-control: "no-cache"
    body_format: "json"
    body: "{\"username\":\"{{ cpd_admin_username }}\",\"password\":\"{{ cpd_admin_password }}\"}"
    status_code: 200
    timeout: 30
  register: cpd_authorization

- name: "gencfg-wd : Get the CP4D Bearer token"
  no_log: true
  set_fact:
    cpd_bearer_token: "{{ cpd_authorization.json.token }}"


# 2. Check the existing Discovery instance UUID
# -----------------------------------------------------------------------------
- name: "gencfg-wd :  Find if the WDS instance is already there"
  set_fact:
    wds_instname: "discovery-assist"

- name: "gencfg-wd :  find if the WDS instance is already there"
  set_fact:
    wds_instname: "discovery-assist-{{ mas_workspace_id }}"
  when: mas_workspace_id is defined and mas_workspace_id != ""

- name: "gencfg-wd :  Print the Discovery Instance Name"
  debug:
    msg:
      - "Discovery Instance Name.......... {{ wds_instname }}"

- name: "gencfg-wd : Check if there's existing Discovery instance in CP4D"
  when: cpd_bearer_token is defined
  uri:
    url: "{{ cpd_url }}/zen-data/v3/service_instances?fetch_all_instances=false&limit=9223372036854775807&offset=0"
    validate_certs: no
    method: GET
    headers:
      Authorization: "Bearer {{ cpd_bearer_token }}"
      cache-control: "no-cache"
    status_code: 200,412
    timeout: 30
  register: query_instance_output

- name: "gencfg-wd : Debug query_instance_output"
  debug:
    msg: "{{ query_instance_output }}"

- name: "gencfg-wd :  find the WDS instance and query the wds uuid"
  set_fact:
    wds_number: "{{ item.id | | replace('-','') | int }}"
  with_items: "{{ query_instance_output.json.service_instances }}"
  when:
    - query_instance_output.status is defined and query_instance_output.status | int == 200
    - query_instance_output.json.service_instances | length > 0
    - item.addon_type == "discovery"
    - item.display_name == wds_instname

- name: "gencfg-wd : Debug wds_number"
  debug:
    msg:
      - "Discovery Service Id: ..............{{ 'Not Found' if wds_number is not defined else wds_number }}"


# 3. Provision the CP4D WDS instance and get its uuid
# -----------------------------------------------------------------------------
- name: "gencfg-wd :  Create the WDS instance in CP4D when WDS instance not exist and query its uuid"
  when: wds_number is not defined or wds_number == ""
  uri:
    url: "{{ cpd_url }}/watson/common/discovery/api/ibmcloud/resource-controller/resource_instances"
    validate_certs: no
    method: POST
    headers:
      Authorization: "Bearer {{ cpd_bearer_token }}"
      cache-control: "no-cache"
    body_format: "json"
    body: "{{ lookup('template','templates/wds.json.j2') }}"
    status_code: 200,412
    timeout: 30
  register: create_wds_output

- debug:
    msg: "Discovery instance ID.............. {{ create_wds_output.json.id }}"
  when: wds_number is not defined or wds_number == ""

- name: "gencfg-wd : Get the CP4D instance uuid number"
  when: wds_number is not defined or wds_number == ""
  set_fact:
    wds_number: "{{ create_wds_output.json.id | replace('-','') | int }}"

# 11. Print Out the Discovery instance URL and crdential for use
# -----------------------------------------------------------------------------
- name: "gencfg-wd : Obtain Watson Discovery API Host"
  when: wds_number is defined and wds_number != ""
  set_fact:
    wds_url: "{{ cpd_url}}/discovery/{{ cpd_instance_namespace }}-wd/instances/{{ wds_number }}/api"

# 12. Write out the config to the local filesystem
- name: "gencfg-wd: Debug configuration parameters"
  debug:
    msg:
      - "MAS Instance Id ......................... {{ mas_instance_id }}"
      - "WDS Url ................................. {{ wds_url }}"
      - "CPD Admin Username ...................... {{ cpd_admin_username }}"
      - "CPD Admin Password (REMOVE).............. {{ cpd_admin_password }}"

- name: "gencfg-wd : Write out the config to the local filesystem"
  no_log: true
  when:
    - mas_instance_id is defined and mas_instance_id != ""
    - mas_config_dir is defined and mas_config_dir != ""
  ansible.builtin.template:
    src: wd/wdscfg.yml.j2
    dest: "{{ mas_config_dir }}/{{ mas_instance_id }}-wd-config.yml" # WD does not use a WD CR to bind the service
