---

# 1. Patch service accounts
# -----------------------------------------------------------------------------
# 1.1. Wait for Runtime service accounts to be created
- name: "Wait for the Runtime service accounts to appear"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: ServiceAccount
    name: "{{ item }}"
    namespace: "{{ cpd_instance_namespace }}"
  register: runtime_sa_lookup
  retries: 24 # Up to 2 hours
  delay: 300 # Every 5 minutes
  until:
    - runtime_sa_lookup.resources is defined
    - runtime_sa_lookup.resources | length > 0
  with_items:
    - runtime-assemblies-operator
    - runtime-manager-api

# 1.2. Patch the runtime service accounts in ibm-cpd namespace to add ibm-entitlement
- name: "Patch the Runtime service accounts"
  kubernetes.core.k8s:
    api_version: v1
    kind: ServiceAccount
    name: "{{ item }}"
    namespace: "{{ cpd_instance_namespace }}"
    definition:
      imagePullSecrets:
        - name: ibm-entitlement
  with_items:
    - runtime-assemblies-operator
    - runtime-manager-api

# 1.3. Lookup and restart the runtimes operator pod if it's in ImagePullBackOff state
- name: "Lookup runtimes operator pod"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Pod
    label_selectors:
      - app.kubernetes.io/name = runtime-assemblies-operator
    namespace: "{{ cpd_instance_namespace }}"
  register: runtime_operator_pod_lookup
  retries: 10 # Up to 10 minutes
  delay: 60 # Every 1 minute

- name: "Delete runtimes operator pod if it's in image pull backoff"
  when:
    - runtime_operator_pod_lookup.resources[0] | length > 0
    - runtime_operator_pod_lookup.resources[0].status.containerStatuses[0].state is defined
    - runtime_operator_pod_lookup.resources[0].status.containerStatuses[0].state.waiting is defined
    - runtime_operator_pod_lookup.resources[0].status.containerStatuses[0].state.waiting.reason is defined
    - runtime_operator_pod_lookup.resources[0].status.containerStatuses[0].state.waiting.reason == "ImagePullBackOff"
  kubernetes.core.k8s:
    state: absent
    api_version: v1
    kind: Pod
    name: "{{ runtime_operator_pod_lookup.resources[0].metadata.name }}"
    namespace: "{{ cpd_instance_namespace }}"


# 2. Wait for CCS CR to be ready
# -----------------------------------------------------------------------------
# We can't stop waiting on Failed status, as it will report failed multiple
# times during initial reconcile ... we just need to keep waiting.
- name: "wait-wsl : Wait for ccsStatus 'Completed'"
  kubernetes.core.k8s_info:
    api_version: "ccs.cpd.ibm.com/v1beta1"
    kind: CCS
    name: "ccs-cr"
    namespace: "{{ cpd_instance_namespace }}"
  register: ccs_cr_lookup
  until:
    - ccs_cr_lookup.resources is defined
    - ccs_cr_lookup.resources | length == 1
    - ccs_cr_lookup.resources[0].status is defined
    - ccs_cr_lookup.resources[0].status.ccsStatus is defined
    - ccs_cr_lookup.resources[0].status.ccsStatus == "Completed"
  retries: 24 # Up to 2 hours
  delay: 300 # Every 5 minutes

- name: "wait-wsl : Check that the CCS ccsStatus is 'Completed'"
  assert:
    that: ccs_cr_lookup.resources[0].status.ccsStatus == "Completed"
    fail_msg: "Watson Studio install failed (ccsStatus)"


# 3. Wait for DataRefinery CR to be ready
# -----------------------------------------------------------------------------
# We can't stop waiting on Failed status, as it will report failed multiple
# times during initial reconcile ... we just need to keep waiting.
- name: "wait-wsl : Wait for datarefineryStatus 'Completed'"
  kubernetes.core.k8s_info:
    api_version: "datarefinery.cpd.ibm.com/v1beta1"
    kind: DataRefinery
    name: "datarefinery-sample"
    namespace: "{{ cpd_instance_namespace }}"
  register: dr_cr_lookup
  until:
    - dr_cr_lookup.resources is defined
    - dr_cr_lookup.resources | length == 1
    - dr_cr_lookup.resources[0].status is defined
    - dr_cr_lookup.resources[0].status.datarefineryStatus is defined
    - dr_cr_lookup.resources[0].status.datarefineryStatus == "Completed"
  retries: 24 # Up to 2 hours
  delay: 300 # Every 5 minutes

- name: "wait-wsl : Check that the DataRefinery datarefineryStatus is 'Completed'"
  assert:
    that: dr_cr_lookup.resources[0].status.datarefineryStatus == "Completed"
    fail_msg: "Watson Studio install failed (datarefineryStatus)"


# 4. Wait for WSL service CR to be ready
# -----------------------------------------------------------------------------
# Unfortunately CP4D do not have a standard approach to managing status across
# their services like MAS does, so we need module-specific wait code.
- name: "wait-wsl : Wait for wsStatus 'Completed' or 'Failed'"
  kubernetes.core.k8s_info:
    api_version: "{{ cpd_service_info[cpd_service_name].api_version }}"
    kind: "{{ cpd_service_info[cpd_service_name].crd_kind }}"
    name: "{{ cpd_service_info[cpd_service_name].cr_name }}"
    namespace: "{{ cpd_instance_namespace }}"
  register: cpd_cr_lookup
  until:
    - cpd_cr_lookup.resources is defined
    - cpd_cr_lookup.resources | length == 1
    - cpd_cr_lookup.resources[0].status is defined
    - cpd_cr_lookup.resources[0].status.wsStatus is defined
    - cpd_cr_lookup.resources[0].status.wsStatus == "Completed" or cpd_cr_lookup.resources[0].status.wsStatus == "Failed"
  retries: 24 # Up to 2 hours
  delay: 300 # Every 5 minutes

- name: "wait-wsl : Check that the WSL wsStatus is 'Completed'"
  assert:
    that: cpd_cr_lookup.resources[0].status.wsStatus == "Completed"
    fail_msg: "Watson Studio install failed (wsStatus)"


# At this stage the following will be added to the CP4D installation:
#
# These operators will be installed in ibm-cpd-operators namespace:
# - IBM Data Refinery
# - Watson Studio
# - Common Core Services
#
# These CRs will be created in the ibm-cpd namespace:
# - ccs.ccs.cpd.ibm.com/ccs-cr
# - ws.ws.cpd.ibm.com/ibmcpd-wsl
# - datarefinery.datarefinery.cpd.ibm.com/datarefinery-sample
# - notebookruntime.ws.cpd.ibm.com/ibm-cpd-ws-runtime-py39
#
# oc -n ibm-cpd get ccs,WS,DataRefinery,notebookruntimes
# NAME                         VERSION   RECONCILED   STATUS      AGE
# ccs.ccs.cpd.ibm.com/ccs-cr             4.0.8        Completed   158m
#
# NAME                           VERSION   RECONCILED   STATUS       AGE
# ws.ws.cpd.ibm.com/ibmcpd-wsl   4.0.7                  InProgress   161m
#
# NAME                                                        VERSION   STATUS      AGE
# datarefinery.datarefinery.cpd.ibm.com/datarefinery-sample   4.0.8     Completed   65m
#
# NAME                                                     VERSION   RECONCILED   STATUS      AGE
# notebookruntime.ws.cpd.ibm.com/ibm-cpd-ws-runtime-py39             4.0.8        Completed   53m
#
