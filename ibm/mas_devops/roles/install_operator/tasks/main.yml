---
# 1. Check artifactory_username/icr_username combination
# -----------------------------------------------------------------------------
- name: "Fail if icr_username is provided but not icr_password"
  ansible.builtin.assert:
    that: icr_password is defined and icr_password != ""
    fail_msg: "icr_password property has not been set"
  when: icr_username is defined and icr_username != ""

- name: "Fail if artifactory_username is provided but not artifactory_token"
  ansible.builtin.assert:
    that: artifactory_token is defined and artifactory_token != ""
    fail_msg: "artifactory_token property has not been set"
  when: artifactory_username is defined and artifactory_username != ""

# 2. Create namespace we will deploy to
# -----------------------------------------------------------------------------
- name: "Create namespace"
  kubernetes.core.k8s:
    api_version: v1
    kind: Namespace
    name: "{{ namespace }}"

- name: Add custom labels to namespace
  when: custom_labels is defined and custom_labels | length > 0
  kubernetes.core.k8s:
    state: patched
    kind: Namespace
    name: "{{ namespace }}"
    definition: "{{ lookup('template', 'templates/custom_labels.json.j2') }}"

# 3. Create an image pull secret for the pre-release catalog
# -----------------------------------------------------------------------------
- name: "Debug Entitlement Secret Creation"
  debug:
    msg:
      - "Target Namespace ....................... {{ namespace }}"
      - "Artifactory Username ................... {{ artifactory_username | default('<undefined>', true) }}"
      - "Artifactory Password ................... {{ (artifactory_token is defined and artifactory_token != '') | ternary('************', '<undefined>') }}"
      - "ICR Username ........................... {{ icr_username | default('<undefined>', true) }}"
      - "ICR Password ........................... {{ (icr_password is defined and icr_password != '') | ternary('************', '<undefined>') }}"

- name: "Create ibm-entitlement secret"
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      type: kubernetes.io/dockerconfigjson
      metadata:
        name: ibm-entitlement
        namespace: "{{ namespace }}"
      data:
        .dockerconfigjson: "{{ lookup('template', 'templates/ibm-entitlement-with-artifactory.json.j2') | to_nice_json | b64encode }}"
  when: (icr_username is defined and icr_username != "") or (artifactory_username is defined and artifactory_username != "")

# 4. Patch the default service account for pre-release build access
# -----------------------------------------------------------------------------
# If we don't do this then we won't be able to pull the operator image from
# Artifactory
- name: "Patch default SA"
  when:
    - artifactory_username != ""
    - artifactory_token != ""
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: default
        namespace: "{{ namespace }}"
      imagePullSecrets:
        - name: ibm-entitlement

# 5. Create the operator group that will scope the operator
# -----------------------------------------------------------------------------
- name: "Create operator group"
  kubernetes.core.k8s:
    definition: "{{ operator_group }}"
    wait: yes
    wait_timeout: 60 # subsequent tasks will fail if the group isn't fully created

# 6. Create the subscription for the operator
# -----------------------------------------------------------------------------
- name: "Create subscription"
  kubernetes.core.k8s:
    definition: "{{ subscription }}"
    wait: yes
    wait_timeout: 300
    wait_condition:
      type: "CatalogSourcesUnhealthy"
      status: "False"
