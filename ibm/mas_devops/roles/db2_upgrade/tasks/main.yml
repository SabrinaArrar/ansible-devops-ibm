---
# # 0. Fail if required parameters are not set
# # -----------------------------------------------------------------------------
# - name: "Fail if required properties have not been provided"
#   assert:
#     that:
#       # - db2_instance_name is defined and db2_instance_name != ""
#       - db2_version is defined and db2_version != ""
#     fail_msg: "One or more required properties were not provided"

# # 1. Look up the default channel for the db2u-operator package manifest
# # -----------------------------------------------------------------------------
# - name: Lookup db2u-operator packagemanifest
#   when: db2_channel is not defined or db2_channel == ""
#   kubernetes.core.k8s_info:
#     api_version: packages.operators.coreos.com/v1
#     kind: PackageManifest
#     name: db2u-operator
#     namespace: ibm-common-services
#   register: db2u_manifest_info

# - name: Set db2u-operator update channel to latest default channel if not provided
#   when: db2_channel is not defined or db2_channel == ""
#   set_fact:
#     db2_channel: "{{ db2u_manifest_info.resources[0].status.defaultChannel }}"


# # 2. Lookup current db2u channel
# # -----------------------------------------------------------------------------
# - name: "Get the current subscription channel for db2"
#   kubernetes.core.k8s_info:
#     api_version: operators.coreos.com/v1alpha1
#     name: ibm-db2u-operator
#     namespace: ibm-common-services
#     kind: Subscription
#   register: db2_sub_info

# - name: "Set the value for the current channel for db2"
#   set_fact:
#     old_db2_channel: "{{ db2_sub_info.resources[0].spec.channel }}"

# - name: Debug Db2 Operator Update
#   ansible.builtin.debug:
#     msg:
#       - "Current Db2 Channel ................................ {{ old_db2_channel }}"
#       - "Update Db2 Channel ................................. {{ db2_channel }}"
#       - "Update Db2 Engine Version .......................... {{ db2_version }}"


# # 3. If the current operator channel is the same for the upgrade, no upgrade
# # -----------------------------------------------------------------------------
# - name: "Debug when no upgrade is needed"
#   when: db2_channel == old_db2_channel
#   debug:
#     msg: "No action is required. Db2 subscription is already on the {{ db2_channel }} channel"


# # 4. Create operand request
# # -----------------------------------------------------------------------------
# - name: "Create Db2 Operand Request"
#   when: db2_channel != old_db2_channel
#   kubernetes.core.k8s:
#     state: absent
#     template: templates/db2u_operandrequest.yml.j2
#     wait: yes
#     wait_timeout: 120
#   register: operandrequest_removal

# - name: "Wait 2 minutes if we removed an old OperandRequest"
#   when: operandrequest_removal.changed == True
#   pause:
#     minutes: 2


# # 5. Upgrade Subscription otherwise
# # -----------------------------------------------------------------------------
# - name: "Update subscription to the new channel"
#   when: db2_channel != old_db2_channel
#   kubernetes.core.k8s:
#     api_version: operators.coreos.com/v1alpha1
#     name: ibm-db2u-operator
#     namespace: ibm-common-services
#     kind: Subscription
#     definition:
#       spec:
#         channel: "{{ db2_channel }}"
#     apply: true

# - name: "Pause for 2 minutes before checking upgrade status..."
#   when: db2_channel != old_db2_channel
#   pause:
#     minutes: 2


# # 6. Lookup the updated OperatorCondition
# # -----------------------------------------------------------------------------
# - name: "Lookup the updated OperatorCondition"
#   when: db2_channel != old_db2_channel
#   kubernetes.core.k8s_info:
#     api_version: operators.coreos.com/v2
#     kind: OperatorCondition
#     namespace: ibm-common-services
#     label_selectors:
#       - "operators.coreos.com/db2u-operator.ibm-common-services"
#   register: updated_db2_opcon
#   retries: 10
#   delay: 1 # minutes
#   until:
#     - updated_db2_opcon.resources is defined
#     - updated_db2_opcon.resources | length == 1
#     - updated_db2_opcon.resources[0].metadata.name is defined

# - name: "Debug Operator Version"
#   when: db2_channel != old_db2_channel
#   debug:
#     msg:
#       - "Db2u Operator condition ..................... {{ updated_db2_opcon.resources[0].metadata.name }}"

# Test this


#
#  generate list of DB2uCluster instances
#



# 7. Update db2 version in instance
# -----------------------------------------------------------------------------
- name: "Get db2u instance list"
  kubernetes.core.k8s_info:
    api_version: db2u.databases.ibm.com/v1
    namespace: "{{ db2_namespace }}"
    kind: Db2uCluster
  register: db2u_cluster_list

- name: "Debug Operator Version"
  debug:
    msg:
      # - "Db2ucluster current version ................. {{ db2u_cluster_list.resources[0].spec.version }}"
      # - "Db2ucluster update version .................. {{ db2_version }}"
      - "db2 cluster list ............ {{ db2u_cluster_list }}"
      - "db2 cluster metadata ........ {{ db2u_cluster_list.resources }}"
      - "db2 cluster metadata ........ {{ db2u_cluster_list.resources[*].kubectl.kubernetes.io/last-applied-configuration }}"
      - "db2 cluster metadata ........ {{ db2u_cluster_list.resources[*].kubectl.kubernetes.io/last-applied-configuration.metadata }}"
      - "db2 cluster metadata ........ {{ db2u_cluster_list.resources[*].kubectl.kubernetes.io/last-applied-configuration.metadata.name }}"

# - name: "Debug when db2u instance version updated is not needed"
#   when: db2u_cluster_info.resources[0].spec.version == db2_version
#   debug:
#     msg: "No action is required to updated the version of Db2uCluster instance"

# - name: "Update db2u instance with updated version"
#   when: db2u_cluster_info.resources[0].spec.version != db2_version
#   kubernetes.core.k8s_json_patch:
#     api_version: db2u.databases.ibm.com/v1
#     name: "{{ db2_instance_name | lower }}"
#     namespace: "{{ db2_namespace }}"
#     kind: Db2uCluster
#     patch:
#       - op: replace
#         path: /spec/version
#         value: "{{ db2_version }}"

# - name: "Wait for db2u instance to be ready (1m delay)"
#   when: db2u_cluster_info.resources[0].spec.version != db2_version
#   kubernetes.core.k8s_info:
#     api_version: db2u.databases.ibm.com/v1
#     name: "{{ db2_instance_name | lower }}"
#     namespace: "{{ db2_namespace }}"
#     kind: Db2uCluster
#   register: db2_cluster_lookup
#   until:
#     - db2_cluster_lookup.resources is defined
#     - db2_cluster_lookup.resources | length > 0
#     - db2_cluster_lookup.resources[0].status is defined
#     - db2_cluster_lookup.resources[0].status.state is defined
#     - db2_cluster_lookup.resources[0].status.state == "Ready"
#     - db2_cluster_lookup.resources[0].status.version == db2_version
#   retries: 30 # Approximately 30 minutes before we give up
#   delay: 60 # 1 minute
