---

# 1. Create Namespaces & OperatorGroup
# -----------------------------------------------------------------------------
- name: "create-subscriptions : Create Namespaces for CP4D"
  kubernetes.core.k8s:
    apply: yes
    template: 'templates/namespaces.yml.j2'

- name: "create-subscriptions : Create OperatorGroup for CP4D"
  kubernetes.core.k8s:
    apply: yes
    template: 'templates/operatorGroup.yml.j2'


# 2. Create Operator Subscriptions
# -----------------------------------------------------------------------------
# https://www.ibm.com/docs/en/cloud-paks/cp-data/4.5.x?topic=si-creating-olm-objects

# 2.1 Create olm-utils-cm config maps which contains the versions
# for all CPD related services and dependencies.
# This will be used by the CPD operators to automatically set the target versions
# to be installed/upgraded
# -----------------------------------------------------------------------------

- name: "Lookup the catalog used when CP4D product version is 4.6.6 to determine which Zen CR version to use"
  kubernetes.core.k8s_info:
    api_version: operators.coreos.com/v1alpha1
    name: ibm-operator-catalog
    namespace: openshift-marketplace
    kind: CatalogSource
  register: catalog_lookup
  when: cpd_product_version == '4.6.6'

- name: "Determine catalog version from catalog displayName"
  when: cpd_product_version == '4.6.6'
  block:
    # extract the catalog tag from displayName
    - set_fact:
        catalog_tag: "{{ catalog_lookup.resources[0].spec.displayName.split('(')[1].split(')')[0].split(' ')[0] }}"
      when:
        - catalog_lookup is defined
        - catalog_lookup.resources is defined
        - catalog_lookup.resources | length > 0
        - catalog_lookup.resources[0].spec is defined
        - catalog_lookup.resources[0].spec.displayName is defined
        - '"(" in catalog_lookup.resources[0].spec.displayName'
  rescue:
    # fallback to default dynamic catalog
    - set_fact:
        catalog_tag: "v8-amd64"

- name: "Set catalog_tag to default if not defined still"
  set_fact:
    catalog_tag: "v8-amd64"
  when:
    - cpd_product_version == '4.6.6'
    - catalog_tag is not defined

- name: "Catalog Version"
  debug:
    msg:
      - "Catalog Version ............................ {{ catalog_tag }}"
  when:
    - cpd_product_version == '4.6.6'
    - catalog_tag is defined and catalog_tag != ""

# catalog_tag is used here for cpd 4.6.6
- name: "install-cp4d : Create olm-utils-cm config map for cpd release {{ cpd_product_version }}"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/config_maps/olm-utils-cm-{{ cpd_product_version }}.yml.j2') }}"

- name: "install-cp4d : Lookup olm-utils-cm config map to know which zen version to install/upgrade for release {{ cpd_product_version }}"
  kubernetes.core.k8s_info:
    api_version: v1
    name: "olm-utils-cm"
    kind: ConfigMap
    namespace: "{{ cpd_instance_namespace }}"
  register: cpd_cm_info

- set_fact:
    cpd_components_meta: "{{ cpd_cm_info.resources[0].data.release_components_meta | from_yaml }}"

- name: "install-cp4d : Set CPD properties"
  set_fact:
    cpd_channel: "{{ cpd_components_meta.cpd_platform.sub_channel }}"
    zen_cr_version: "{{ cpd_components_meta.zen.cr_version }}"
    cpd_csv_version: "{{ cpd_components_meta.cpd_platform.csv_version }}"
    foundational_services_expected_csv_version: "{{ cpd_components_meta.cpfs.csv_version }}"

- debug:
    msg:
      - "CPD operators namespace ................... {{ cpd_operators_namespace }}"
      - "CPD instance namespace .................... {{ cpd_instance_namespace }}"
      - "CPD release version ....................... {{ cpd_product_version }}"
      - "CPD subscription channel .................. {{ cpd_channel }}"
      - "CPD csv version ........................... {{ cpd_csv_version }}"
      - "Zen/control plane version ................. {{ zen_cr_version }}"

# 2.2 Install the IBM Cloud Pak for Data platform operator
#
# This will result in two operators being installed into the cpd operator namespace:
# - cpd-platform-operator-manager
# - ibm-common-service-operator
# - ibm-namespace-scope-operator

# Look up the default channel for the ibm-common-service-operator package manifest
# The way ODLM works (which we have to use) means that when an istance of MAS Core
# is installed in the cluster, the ODLM framework will automatically upgdate the installed
# version of the IBM common service operator to whatever is set as the default channel.
#
# This can cause the subsequent installation of the Licensing Operator to fail in
# horrible ways, setting the subscription channel correctly here will hopefully avoid
# this problem.
- name: Set ibm-common-services-operator channel if needed
  when: common_services_channel is not defined or common_services_channel == ""
  block:

    - name: Lookup ibm-common-service-operator packagemanifest
      k8s_info:
        api_version: packages.operators.coreos.com/v1
        kind: PackageManifest
        name: ibm-common-service-operator
        namespace: ibm-common-services
      register: common_services_manifest_info

    - name: Set ibm-common-services-operator channel
      set_fact:
        common_services_channel: "{{ common_services_manifest_info.resources[0].status.defaultChannel }}"

- debug:
    msg:

- name: "Assert that IBM Cloud Pak Foundational Services is compatible with Cloud Pak for Data version {{ cpd_product_version }}"
  assert:
    that: foundational_services_installed_csv_version is version_compare(foundational_services_expected_csv_version, '>=')
    fail_msg: "Failed! You have incompatible IBM Foundation Services version v{{ foundational_services_installed_csv_version }} installed. You must have version v{{ foundational_services_expected_csv_version }} or above."

- name: Debug IBM Cloud Pak Foundational Services Install
  debug:
    msg:
      - "Subscription Channel defined ............................................................. {{ common_services_channel }}"
      - "Catalog Source ........................................................................... ibm-operator-catalog"
      - "Current installed version ................................................................ v{{ foundational_services_installed_csv_version }}"
      - "Expected compatible version with CloudPak for Data {{ cpd_product_version }} ................................. v{{ foundational_services_expected_csv_version }}+"

- name: "create-subscriptions : Create CP4D Platform & Namespace Scope Operator subscriptions using channel: {{ cpd_channel }}"
  kubernetes.core.k8s:
    apply: yes
    template: 'templates/subscriptions.yml.j2'

- name: "create-subscriptions : Wait for cpd-platform-operator-manager to be ready (60s delay)"
  kubernetes.core.k8s_info:
    api_version: apps/v1
    name: cpd-platform-operator-manager
    namespace: "{{ cpd_operators_namespace }}"
    kind: Deployment
  register: cpd_subscription
  until: cpd_subscription.resources[0].status.availableReplicas is defined
  retries: 10 # Approximately 10 minutes before we give up
  delay: 60 # 1 minute

# This is just a validation step to prevent the "wait tasks" to run before it gives enough time for the new cpd service operator version
# to start reconciling in case of an upgrade, otherwise it might not have given enough time for it to process the new version to be upgrade
# while its status' cr might still show 'completed'.
# With this, we ensure the new cpd service csv version operator is up and running with the new cr version before we check the cpd cr status
- name: "Wait CP4D subscription installedCSV version at {{ expected_installed_csv }}"
  vars:
    expected_installed_csv: "cpd-platform-operator.v{{ cpd_csv_version }}"
  kubernetes.core.k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: Subscription
    namespace: "{{ cpd_operators_namespace }}"
    name: "cpd-operator"
  register: cpd_sub_info
  retries: 20
  delay: 60 # Retry for approx 20 minutes (60s * 20 attempts) before giving up
  until:
    - cpd_sub_info.resources is defined
    - cpd_sub_info.resources | length > 0
    - cpd_sub_info.resources[0].status is defined
    - cpd_sub_info.resources[0].status.installedCSV is defined
    - cpd_sub_info.resources[0].status.installedCSV == expected_installed_csv

# 2.3 Enabling services to use namespace scoping with third-party operators
- name: "create-subscriptions : Create NamespaceScope for CP4D Operators"
  kubernetes.core.k8s:
    apply: yes
    template: 'templates/namespaceScope.yml.j2'
