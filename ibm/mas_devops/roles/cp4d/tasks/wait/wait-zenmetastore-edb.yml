---
# 1. Wait for zen metastore cluster to start
# -----------------------------------------------------------------------------
- name: "wait-zenmetastore-edb : Wait for Zen Metastore EDB Cluster to be created"
  k8s_info:
    kind: Cluster
    namespace: "{{ cpd_instance_namespace }}"
    name: "zen-metastore-edb"
  register: zenmetastoreCluster
  retries: 120 # Give 60 minutes for the zenService to start Zen Metastore Pods (Logs show this taking ~20 minutes in a good run)
  delay: 30
  until: zenmetastoreCluster.resources[0].status is defined

# 2. Wait for zen metastore replica pods to become ready
# -----------------------------------------------------------------------------
- name: "wait-zenmetastore-edb : Wait for ZenMetastore pods to be become ready"
  k8s_info:
    kind: Cluster
    namespace: "{{ cpd_instance_namespace }}"
    name: "zen-metastore-edb"
  register: zenmetastoreCluster
  retries: 40 # Give 20 minutes for the pods to become ready
  delay: 30
  until: >-
    zenmetastoreCluster.resources[0].spec.instances is defined
    and zenmetastoreCluster.resources[0].status.readyInstances is defined
    and zenmetastoreCluster.resources[0].spec.instances == zenmetastoreCluster.resources[0].status.readyInstances
  #ignore-errors: true # If this fails then we restart pending pods below
  failed_when: false

# 2. Restart any ZenMetastore pods that are still Pending
# -----------------------------------------------------------------------------
- set_fact:
    is_zenmetastore_ready: true
  when:
    zenmetastoreCluster.resources[0].spec.instances is defined
    and zenmetastoreCluster.resources[0].status.readyInstances is defined
    and zenmetastoreCluster.resources[0].spec.instances == zenmetastoreCluster.resources[0].status.readyInstances

- name: "wait-zenmetastore-edb : Detecting and restarting pending ZenMetastore Pods"
  when: is_zenmetastore_ready is not defined
  block:
    - name: "install-cp4d : Get pending ZenMetastore Pods"
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        label_selectors:
          - "app.kubernetes.io/component=zen-metastore-edb"
        field_selectors:
          - "status.phase=Pending"
        namespace: "{{ cpd_instance_namespace }}"
      register: pending_pod_lookup

    - set_fact:
        pending_pod_names: "{{ pending_pod_lookup.resources | map(attribute='metadata.name') }}"

    - debug:
        msg: "Restarting pending ZenMetastore Pods: {{ pending_pod_names }}"

    - name: "wait-zenmetastore-edb : Restarting pending ZenMetastore Pods"
      kubernetes.core.k8s:
        state: absent
        api_version: v1
        kind: Pod
        namespace: "{{ cpd_instance_namespace }}"
        name: "{{ item }}"
      loop: "{{ pending_pod_names }}"

    # 3. Wait again zenmetastore replica pods to become ready
    # -----------------------------------------------------------------------------
    - name: "wait-zenmetastore-edb : Wait for ZenMetastore pods to be become ready"
      k8s_info:
        kind: Cluster
        namespace: "{{ cpd_instance_namespace }}"
        name: "zen-metastore-edb"
      register: zenmetastoreCluster
      retries: 40 # Give another 20 minutes for the pods to become ready
      delay: 30
      until: >-
        zenmetastoreCluster.resources[0].spec.instances is defined
        and zenmetastoreCluster.resources[0].status.readyInstances is defined
        and zenmetastoreCluster.resources[0].spec.instances == zenmetastoreCluster.resources[0].status.readyInstances
      failed_when: false # We handle and log the failure below.

    - name: "wait-zenmetastore-edb : Fail if ZenMetastore pods are not ready"
      block:
        - name: "install-cp4d : Get Pending ZenMetastore Pods"
          kubernetes.core.k8s_info:
            api_version: v1
            kind: Pod
            label_selectors:
              - "app.kubernetes.io/component=zen-metastore-edb"
            field_selectors:
              - "status.phase=Pending"
            namespace: "{{ cpd_instance_namespace }}"
          register: pending_pod_lookup

        - fail:
            msg:
              - "ZenMetastore pods are not ready Instances required: {{ zenmetastoreCluster.resources[0].spec.instances }}, ready: {{ zenmetastoreCluster.resources[0].status.readyInstances }}"
              - "Pending ZenMetastore Pods: {{ pending_pod_lookup.resources | map(attribute='metadata.name') }}"
      when:
        zenmetastoreCluster.resources[0].spec.instances != zenmetastoreCluster.resources[0].status.readyInstances
