# Provide debug information to the user
# -----------------------------------------------------------------------------
- name: "Debug information for creating CP4D user"
  debug:
    msg:
      - "cpd_namespace .............. {{ cpd_namespace }}"
      - "sre_namespace .............. {{ sre_namespace }}"
      - "cp4d_username ............. {{ cp4d_username }}"
      - "cp4d_user_credentials_secret_name ............. {{ cp4d_user_credentials_secret_name }}"
      - "cp4d_admin_credentials_secret_name ............. {{ cp4d_admin_credentials_secret_name }}"

- name: Set flag cp4d_user_creation_required default to true
  set_fact:
    cp4d_user_creation_required: true

# Read existing user credentials data in k8s Secret if it's defined
# -----------------------------------------------------------------------------
- name: Get CP4D user credentials data from k8s Secret if cp4d_user_credentials_secret_name is defined
  no_log: true
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: "{{ cp4d_user_credentials_secret_name }}"
    namespace: "{{ sre_namespace }}"
  register: _cp4d_credentials_from_k8s_secret
  when:
    - cp4d_user_credentials_secret_name is defined
    - cp4d_user_credentials_secret_name != ""

- name: Set vars for CP4D username & password based on data from k8s Secret
  no_log: true
  set_fact:
    cp4d_username: "{{ _cp4d_credentials_from_k8s_secret.resources[0].data.username | b64decode }}"
    cp4d_password: "{{ _cp4d_credentials_from_k8s_secret.resources[0].data.password | b64decode }}"
    cp4d_user_credentials_secret_exists: true
  when:
    - _cp4d_credentials_from_k8s_secret is defined
    - _cp4d_credentials_from_k8s_secret.resources is defined
    - _cp4d_credentials_from_k8s_secret.resources | length > 0

- name: "Debug the final CP4D username to be used"
  debug:
    msg:
      - "cp4d_username ............. {{ cp4d_username }}"

# Check if the username to be created already exists in CP4D
- name: Check if the username {{ cp4d_username }} already exists in CP4D via CP4D API
  uri:
    url: "https://{{ cp4d_host }}/icp4d-api/v1/users/{{ cp4d_username }}"
    validate_certs: no
    method: GET
    headers:
      Authorization: "Bearer {{ cp4d_bearer_token }}"
      cache-control: "no-cache"
    status_code: 200,404
    timeout: 30
  register: _cp4d_user_query_result

- debug: var=_cp4d_user_query_result

- name: Fail if username {{ cp4d_username }} already exists in CP4D but k8s secret for credentials doesn't exist
  fail:
    msg: "User {{ cp4d_username }} already exists in CP4D but k8s secret for credentials doesn't exist! You may consider creating the k8s secret manually with correct credentials, if you don't know the credentials you may consider deleting the user from CP4D manually to get the user recreated automatically later."
  when:
    - _cp4d_user_query_result.status == 200
    - cp4d_user_credentials_secret_exists is undefined or cp4d_user_credentials_secret_exists == false

# If username already exists in CP4D, verify the password from k8s secret via CP4D auth API
- name: If username already exists in CP4D and credentials k8s secret exists, verify the password via CP4D auth API
  block:
    - name: Try to invoke CP4D auth API with username & password from k8s secret
      no_log: true
      uri:
        url: "https://{{ cp4d_host }}/icp4d-api/v1/authorize"
        validate_certs: no
        method: POST
        headers:
          cache-control: "no-cache"
        body_format: "json"
        body: "{\"username\":\"{{ cp4d_username }}\",\"password\":\"{{ cp4d_password }}\"}"
        status_code: 200,400,401
        timeout: 30
      register: _cp4d_user_authorization

    - name: Fail if username & password from k8s Secret can't pass CP4D authentication
      fail:
        msg: "Password from k8s Secret {{ cp4d_user_credentials_secret_name }} can't pass CP4D authentication for user {{ cp4d_username }}! Please correct the password in k8s secret, if you don't know the credentials you may consider deleting the user from CP4D manually to get the user recreated automatically later."
      when: _cp4d_user_authorization.status != 200

    - name: Set vars if authentication passed - will use username & password from k8s secret, no need to create new user
      set_fact:
        cp4d_user_creation_required: false
      when: _cp4d_user_authorization.status == 200
  when:
    - _cp4d_user_query_result.status == 200
    - cp4d_user_credentials_secret_exists


# Create new CP4D user if it doesn't exist
# -----------------------------------------------------------------------------
- name: Create new CP4D user if it doesn't exist
  block:
    - name: Generate cp4d_password for {{ cp4d_username }} if it's not defined
      no_log: true
      set_fact:
        cp4d_password: "{{ lookup('password', '/dev/null length=20 chars=ascii_lowercase,ascii_uppercase,digits') }}"
      when: cp4d_password is undefined or cp4d_password == ""

    - name: Set a default value for cp4d_user_role_id if it's not specified
      set_fact:
        cp4d_user_role_id: "{{ cp4d_user_role_id_for_general_apps }}"
      when: cp4d_user_role_id is undefined or cp4d_user_role_id == ""

    - name: Set a default value for cp4d_user_email if it's not specified
      set_fact:
        cp4d_user_email: "{{ cp4d_user_email_for_general_apps }}"
      when: cp4d_user_email is undefined or cp4d_user_email == ""

    - name: Set cp4d_user_display_name same as cp4d_username if it's not specified
      set_fact:
        cp4d_user_display_name: "{{ cp4d_username }}"
      when: cp4d_user_display_name is undefined or cp4d_user_display_name == ""

    - name: Create the user in CP4D - {{ cp4d_username }}
      no_log: true
      uri:
        url: "https://{{ cp4d_host }}/icp4d-api/v1/users"
        validate_certs: no
        method: POST
        headers:
          Authorization: "Bearer {{ cp4d_bearer_token }}"
          cache-control: "no-cache"
        body_format: "json"
        body: "{ \"user_name\":\"{{ cp4d_username }}\", \"password\":\"{{ cp4d_password }}\", \"displayName\":\"{{ cp4d_user_display_name }}\", \"user_roles\":[ \"{{ cp4d_user_role_id }}\" ], \"email\":\"{{ cp4d_user_email }}\" }"
        status_code: 200
        timeout: 30

    - name: Lookup db2wh TLS certificates
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        name: "internal-tls"
        namespace: "{{ cpd_namespace }}"
      register: _db2u_instance_certificates

    - name: Set Db2wh certificates as Facts
      set_fact:
        # We need to use certificate.pem rather than tls.crt when we create the JdbcCfg for MAS
        cp4d_db_certificate: "{{ _db2u_instance_certificates.resources[0].data['certificate.pem'] | b64decode }}"
      when:
        - cpd_version is match("3.*")
        - _db2u_instance_certificates is defined
        - (_db2u_instance_certificates.resources | length > 0)

    - name: Set Db2wh certificates as Facts
      set_fact:
        # We need to use certificate.pem rather than tls.crt when we create the JdbcCfg for MAS
        cp4d_db_certificate: "{{ _db2u_instance_certificates.resources[0].data['ca.crt'] | b64decode }}"
      when:
        - cpd_version is match("4.*")
        - _db2u_instance_certificates is defined
        - (_db2u_instance_certificates.resources | length > 0)

    - name: Create k8s Secret for the user credentials - {{ cp4d_user_credentials_secret_name }}
      no_log: true
      kubernetes.core.k8s:
        state: present
        namespace: "{{ sre_namespace }}"
        definition: "{{ lookup('template', 'templates/cp4d_credentials_secret.yaml.j2') | from_yaml }}"

    - name: Save the credentials of this CP4D user to P2PaaS ColdVault if the cluster is in P2PaaS - {{ cp4d_username }}
      no_log: true
      shell: |
        curl -k -X PUT -H "X-Vault-Request: true" -H "X-Vault-Token: {{ hashicorp_vault_token }}" -d '{ "data":{ "cp4d_password":"{{ cp4d_password }}", "cp4d_username":"{{ cp4d_username }}" }, "options":{} }' "{{ p2paas_coldvault_base_url }}/{{ cp4d_user_credentials_secret_name }}"
      when: is_p2paas_infra|default(false)|bool and p2paas_coldvault_enabled|default(false)|bool

  when: cp4d_user_creation_required


# Get the user id of CP4D user
# -----------------------------------------------------------------------------
- name: Get the user id of CP4D user {{ cp4d_username }}
  uri:
    url: "https://{{ cp4d_host }}/icp4d-api/v1/users/{{ cp4d_username }}"
    validate_certs: no
    method: GET
    headers:
      Authorization: "Bearer {{ cp4d_bearer_token }}"
      cache-control: "no-cache"
    status_code: 200,404
    timeout: 30
  register: cp4d_user_details

- debug: var=cp4d_user_details

- name: Set var cp4d_user_userid for CP4D user {{ cp4d_username }}
  set_fact:
    cp4d_user_userid: "{{ cp4d_user_details.json.UserInfo.uid }}"
