---
- name: "Check if tenant namespace: {{ tenantNamespace }} exists"
  k8s_info:
    api_version: v1
    kind: Namespace
    name: "{{ tenantNamespace }}"
  register: namespace_info

# Create tenant namespace
- name: "Create a tenant namespace: {{ tenantNamespace }}"
  kubernetes.core.k8s:
    name: "{{ tenantNamespace }}"
    api_version: v1
    kind: Namespace
  when:
    - namespace_info.resources | length == 0

- name: "Check if secret exists in namespace: {{ tenantNamespace }}"
  k8s_info:
    api_version: v1
    kind: Secret
    name: km-s3-secret
    namespace: "{{ tenantNamespace }}"
  register: kms3_secret_info

- name: "Check if secret exists in namespace: {{ tenantNamespace }}"
  k8s_info:
    api_version: v1
    kind: Secret
    name: regcred
    namespace: "{{ tenantNamespace }}"
  register: regcred_secret_info

# Copy secrets to tenant namespace
- name: "Copy secrets to namespace: {{ tenantNamespace }}"
  shell: 'oc get secret {{ item }} -n mas-{{ mas_instance_id }}-aibroker -o yaml | sed "s/namespace: .*/namespace: {{ tenantNamespace }}/" | oc apply -f -'
  with_items:
    - km-s3-secret
    - regcred
  when:
    - kms3_secret_info.resources | length == 0
    - regcred_secret_info.resources | length == 0

# Adding inference server runtimes
- name: "Create config map for connector config"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/tenant/connector-configmap.yml.j2') }}"

- name: "Create SA for server runtimes"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/tenant/km-s3-sa.yml.j2') }}"

- name: "Create huggingfaceserver server runtime"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/tenant/kserve-huggingfaceserver.yml.j2') }}"

- name: "Create lgbserver server runtime"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/tenant/kserve-lgbserver.yml.j2') }}"

- name: "Create sklearnserver server runtime"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/tenant/kserve-sklearnserver.yml.j2') }}"

- name: "Create xgbserver server runtime"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/tenant/kserve-xgbserver.yml.j2') }}"

# TODO: add verification
- name: create tenant using KModels API
  shell: |
    curl -k POST https://km-controller-mas-{{ mas_instance_id }}-aibroker.{{ appDomain }}/api/v1/tenant?id={{ tenantNamespace }} \
    -H 'accept: */*' -H 'Content-Type: application/json' \
    -d '{"name": "{{ tenantNamespace }}","public": true, "max_models": 10}'
  register: post_info

- name: Debug created tenant
  debug:
    msg: "Created tenant .... {{ post_info.stdout_lines }}"
