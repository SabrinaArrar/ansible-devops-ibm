---
# 1. Check for required facts
# -----------------------------------------------------------------------------
- name: "Fail if UDS storage class has not been provided"
  assert:
    that: uds_storage_class is defined and uds_storage_class != ""
    fail_msg: "uds_storage_class property is required"


- name: "UDS Deployment details"
  debug:
    msg:
      - "UDS Namespace ...................... ibm-common-services"
      - "UDS Storage Class .................. {{ uds_storage_class }}"
      - "UDS Event Scheduler Frequency ...... {{ uds_event_scheduler_frequency }}"
      - "UDS API Key ........................ Found in 'bas_api_key' secret under 'ibm-common-services' namespace"
      - "UDS Username/Password .............. Found in 'database-credentials' secret under 'ibm-common-services' namespace"
      - "UDS Grafana Username/Password ...... Found in 'grafana-credentials' secret under 'ibm-common-services' namespace"
      - "MAS Instance ID .................... {{ mas_instance_id | default('<undefined>', True) }}"
      - "MAS Config Directory ............... {{ mas_config_dir | default('<undefined>', True) }}"
      - "UDS Contact First Name ............. {{ uds_contact.first_name | default('<undefined>', True) }}"
      - "UDS Contact Last Name .............. {{ uds_contact.last_name | default('<undefined>', True) }}"
      - "UDS Contact e-mail ................. {{ uds_contact.email | default('<undefined>', True) }}"


# 2. Install UDS Operator
# -----------------------------------------------------------------------------
- name: Install Foundation Services ibm-user-data-services operand request
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'templates/foundation-services/ibm-user-data-services.yml') }}"
    wait: yes
    wait_timeout: 120


# 3. Wait for UDS Operator to be Ready
# -----------------------------------------------------------------------------
- name: "Wait for Foundation Services ibm-user-data-services operator to be ready (60s delay)"
  kubernetes.core.k8s_info:
    api_version: apps/v1
    name: user-data-services-operator
    namespace: ibm-common-services
    kind: Deployment
  register: _uds_deployment
  until: _uds_deployment.resources[0].status.availableReplicas is defined
  retries: 90 # Approximately 10 minutes before we give up
  delay: 60 # 1 minute


# 4. Create UDS AnalyticsProxy
# -----------------------------------------------------------------------------
- name: "Create UDS AnalyticsProxy"
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'templates/foundation-services/analyticsproxy.yaml') }}"

# Note that the AnalyticsProxy references a 'uds-images-pull-secret', but we do not create this.
# For some reason it seems to work anyway.


# 5. Wait for the UDS AnalyticsProxy to be ready
# -----------------------------------------------------------------------------
- name: "Wait for the AnalyticsProxy to be ready"
  kubernetes.core.k8s_info:
    api_version: uds.ibm.com/v1
    name: analyticsproxy
    namespace: "ibm-common-services"
    kind: AnalyticsProxy
  register: uds_ap_cr_lookup
  until:
    - uds_ap_cr_lookup.resources is defined and uds_ap_cr_lookup.resources | length == 1
    - uds_ap_cr_lookup.resources[0].status is defined
    - uds_ap_cr_lookup.resources[0].status.phase is defined
    - uds_ap_cr_lookup.resources[0].status.phase == 'Ready'
  retries: 20 # approx 40 minutes before we give up waiting for status.phase to be Ready
  delay: 120 # 2 minutes


# 6. Wait for GenerateKey to be complete
# -----------------------------------------------------------------------------
- name: "Create BAS Generate Key"
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'templates/foundation-services/generateKey.yaml') }}"


# 7. Wait for GenerateKey to be complete
# -----------------------------------------------------------------------------
- name: "Wait for GenerateKey to be ready (60s delay)"
  kubernetes.core.k8s_info:
    api_version: uds.ibm.com/v1
    name: uds-api-key
    namespace: ibm-common-services
    kind: GenerateKey
  register: uds_gk_result
  until:
    - uds_gk_result.resources is defined and uds_gk_result.resources | length == 1
    - uds_gk_result.resources[0].status is defined
    - uds_gk_result.resources[0].status.phase is defined
    - uds_gk_result.resources[0].status.phase == 'Ready'
  retries: 30 # approx 30 minutes before we give up
  delay: 60 # 1 minute


# 8. MAS Config
# -----------------------------------------------------------------------------
# Notes that the MAS config resource still refers to UDS by it's
# original name (BAS).  It would be a breaking change to re-name the MAS CRD
- name: "Create MAS BasCfg resource definition"
  include_tasks: tasks/udscfg.yml
  when:
    - mas_instance_id is defined and mas_instance_id != ""
    - mas_config_dir is defined and mas_config_dir != ""
    - uds_contact.first_name is defined and uds_contact.first_name != ""
    - uds_contact.last_name is defined and uds_contact.last_name != ""
    - uds_contact.email is defined and uds_contact.email != ""



# 9. Generate properties used by gencfg_uds
# -----------------------------------------------------------------------------
- name: "Fail if UDS email has not been provided"
  assert:
    that: uds_contact.email is defined and uds_contact.email != ""
    fail_msg: "uds_contact.email property is required"

- name: "Fail if UDS first name has not been provided"
  assert:
    that: uds_contact.first_name is defined and uds_contact.first_name != ""
    fail_msg: "uds_contact.first_name property is required"

- name: "Fail if UDS email has not been provided"
  assert:
    that: uds_contact.last_name is defined and uds_contact.last_name != ""
    fail_msg: "uds_contact.last_name property is required"


# 10. Lookup the endpoint route
# -----------------------------------------------------------------------------
- name: Lookup UDS endpoint Route
  no_log: true
  k8s_info:
    api_version: v1
    kind: Route
    name: uds-endpoint
    namespace: "ibm-common-services"
  register: uds_endpoint

- name: "Fail if we didn't find the bas-endpoint route"
  assert:
    that: uds_endpoint.resources | length == 1
    fail_msg: "Failed looking up UDS endpoint route"


# 11. Lookup the UDS API key
# -----------------------------------------------------------------------------
- name: Lookup uds-api-key Secret
  no_log: true
  k8s_info:
    api_version: v1
    kind: Secret
    name: uds-api-key
    namespace: "ibm-common-services"
  register: uds_apikey_lookup

- name: "Fail if we didn't find the secret containing the UDS API key"
  assert:
    that: uds_apikey_lookup.resources | length == 1
    fail_msg: "Failed looking up secret containing UDS API key"


# 12. Lookup the segment key
# -----------------------------------------------------------------------------
# - name: Lookup UDS segment key Secret
#   no_log: true
#   k8s_info:
#     api_version: v1
#     kind: Secret
#     name: segment-key-secret
#     namespace: "ibm-common-services"
#   register: uds_segmentkey_lookup

# - name: "Fail if we didn't find the secret containing the UDS segment key"
#   assert:
#     that: uds_segmentkey_lookup.resources | length == 1
#     fail_msg: "Failed looking up secret containing UDS segment key"


# 13. Set the initial facts
# -----------------------------------------------------------------------------
- name: Set facts for BASCfg
  no_log: true
  set_fact:
    uds_api_key: "{{ uds_apikey_lookup.resources[0].data.apikey | b64decode }}"
    uds_endpoint_url: "https://{{uds_endpoint.resources[0].spec.host}}"


# 14. Lookup the certificates
# -----------------------------------------------------------------------------
# We don't know why but sometimes the name of the secret will be
# "router-certs-default" and sometimes it will be named after the domain of
# the cluster (e.g. fvtstable-6f1620198115433da1cac8216c06779b-0000)

# 14.1 First, attempt to get the router-certs-default secret
- name: Lookup Certificate for UDS (default)
  no_log: true
  k8s_info:
    api_version: v1
    kind: Secret
    name: router-certs-default
    namespace: openshift-ingress
  register: uds_certificate_lookup

# 14.2 If it does exist, then use it
- name: Generate router secret name from the cluster subdomain
  when:
    - uds_certificate_lookup.resources is defined
    - uds_certificate_lookup.resources | length == 1
  set_fact:
    uds_tls_crt: "{{ uds_certificate_lookup.resources[0].data['tls.crt'] | b64decode | regex_findall('(-----BEGIN .+?-----(?s).+?-----END .+?-----)', multiline=True, ignorecase=True) }}"

# 14.3 If it does not exist, then perform a second lookup for the custom secret
- name: Get cluster subdomain
  kubernetes.core.k8s_info:
    api_version: config.openshift.io/v1
    kind: Ingress
    name: cluster
  register: cluster_subdomain

- name: Lookup Certificate for UDS (custom)
  when: uds_tls_crt is not defined
  no_log: true
  k8s_info:
    api_version: v1
    kind: Secret
    name: "{{ cluster_subdomain.resources[0].spec.domain | regex_search('[^.]*')  }}"
    namespace: openshift-ingress
  register: uds_certificate_lookup

# 14.4 If we have a lookup result (last step wasn't skipped) and we haven't already set the crt variable, then set it now
- name: Generate router secret name from the cluster subdomain
  when:
    - uds_certificate_lookup.resources is defined
    - uds_certificate_lookup.resources | length == 1
    - uds_tls_crt is not defined
  set_fact:
    uds_tls_crt: "{{ uds_certificate_lookup.resources[0].data['tls.crt'] | b64decode | regex_findall('(-----BEGIN .+?-----(?s).+?-----END .+?-----)', multiline=True, ignorecase=True) }}"

# 14.5 If bas_tls_crt is still unset, then we've failed
- name: "Fail if we can't find the secret containing the UDS certificates"
  assert:
    that: uds_tls_crt is defined
    fail_msg: "Failed looking up secret containing UDS certificates from the default or custom router certificates secret"


# 15. Write out the config to the local filesystem
# -----------------------------------------------------------------------------
- name: Copy BASCfg to filesytem
  when:
    - mas_instance_id is defined
    - mas_instance_id != ""
    - mas_config_dir is defined
    - mas_config_dir != ""
  ansible.builtin.template:
    src: bascfg.yml.j2
    dest: "{{ mas_config_dir }}/bas-ibm-common-services.yml"
