- name: Check if apikey secret exists in the instance namespace
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: "{{ sendgrid_secretname }}"
    namespace: "mas-{{ mas_instance_id }}-core"
  register: _instance_smtp_apikey

- name: If apikey secret exists, record apikey
  when:
    - _instance_smtp_apikey.resources[0].data.api_key is defined
  set_fact: 
    _apikey: "{{ _instance_smtp_apikey.resources[0].data.api_key }}"

- name: If apikey not found in instance namespace, generate new apikey
  block:
    - name: Check if subuser already exist
      uri:
        url: "https://{{ sendgrid_api_url }}/v3/subusers/{{ smtp_user_name }}"
        validate_certs: no
        method: GET
        headers:
          Authorization: "Bearer {{ sendgrid_apikey }}"
          cache-control: "no-cache"
        status_code: [201, 404, 200]
        timeout: 30
      register: _user_exist_result

    - name: Generate subuser password
      when:
        - _user_exist_result.status == 404
      set_fact:
        _user_password: "{{ lookup('password', '/dev/null chars=ascii_letters,digits,punctuation length=20') }}"


    - name: Create subuser 
      when:
        - _user_exist_result.status == 404
      uri:
        url: "https://{{ sendgrid_api_url }}/v3/subusers"
        validate_certs: no
        method: POST
        headers:
          Authorization: "Bearer {{ sendgrid_apikey }}"
          cache-control: "no-cache"
          Content-Type: "application/json"
        body_format: "json"
        body:
          "username": "{{ smtp_user_name }}"
          "email": "{{ smtp_email }}"
          "password": "{{ _user_password }}"
          "ips": "{{ sendgrid_ips }}"
        status_code: 201
        timeout: 30
      register: _create_user_result

    - name: Generate subuser API Key
      uri:
        url: "https://{{ sendgrid_api_url }}/v3/api_keys"
        validate_certs: no
        method: POST
        headers:
          Authorization: "Bearer {{ sendgrid_apikey }}"
          On-behalf-of: "{{smtp_user_name}}"
          cache-control: "no-cache"
        body_format: "json"
        body:
          name: "{{smtp_user_name}}_apikey"
          scopes:
            - "mail.send"
        status_code: 201
        timeout: 30
      register: _subuser_apikey

    - name: Record apikey
      set_fact: 
        _apikey: "{{ _subuser_apikey.json.api_key }}"

    - name: Perform Single Sender Authentication
      when:
        - _user_exist_result.status == 404
      changed_when:
        - (_result.json.errors is not defined or _result.json.errors[0].message == 'already exists')
      register: _result
      uri:
        url: "https://{{ sendgrid_api_url }}/v3/verified_senders"
        validate_certs: no
        method: POST
        headers:
          Authorization: "Bearer {{ sendgrid_apikey }}"
          On-behalf-of: "{{ smtp_user_name }}"
          cache-control: "no-cache"
        body_format: "json"
        body:
          nickname: "{{ smtp_email }}"
          from_email: "{{ smtp_email }}"
          from_name: "{{ smtp_email }}"
          reply_to: "{{ smtp_email }}"
          reply_to_name: ""
          address: "250 York St #301"
          address2: ""
          state: "ON"
          city: "London"
          country: "Canada"
          zip: "N6A 6K2"
        status_code: 201, 400
        timeout: 30

  when:
    - _instance_smtp_apikey.resources[0].data.api_key is not defined

- name: create smtpcfg file in config dir
  ansible.builtin.template:
    src: "sendgrid/smtpcfg.yml.j2"
    dest: "{{ mas_config_dir }}/smtp-{{ mas_instance_id | lower }}.yml"
  when:
    - _apikey is defined
