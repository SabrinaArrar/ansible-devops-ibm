---
# tasks file for convert_to_olm

# 1. Initial checks and debug
# -----------------------------------------------------------------------------
- name: Preliminary checks
  block:
    # 1.1. Check for mas_instance_id
    # -------------------------------------------------------------------------
    - name: Assert that mas_instance_id is defined
      ansible.builtin.assert:
        that:
          - mas_instance_id is defined
          - mas_instance_id != ''
        fail_msg: "mas_instance_id is not defined"

    # 1.2. Check for mas_app_id
    # -------------------------------------------------------------------------
    - name: Assert that mas_app_id is defined
      ansible.builtin.assert:
        that:
          - mas_app_id is defined
          - mas_app_id != ''
        fail_msg: "mas_app_id is not defined"

    - name: Assert that mas_app_id is supported
      ansible.builtin.assert:
        that:
          - mas_app_id in supported_apps
        fail_msg: "mas_app_id: {{ mas_app_id }} is not supported. Supported options are {{ supported_apps | flatten }}"

    # 1.3. Check for required vars to generate ibm-entitlement secret
    # -------------------------------------------------------------------------
    - name: Validate required variables for ibm-entitlement
      ansible.builtin.set_fact:
        mas_entitlement_username_set: "{{ mas_entitlement_username is defined and mas_entitlement_username != '' }}"
        ibm_entitlement_key_set: "{{ ibm_entitlement_key is defined and ibm_entitlement_key != '' }}"
        mas_entitlement_key_set: "{{ mas_entitlement_key is defined and mas_entitlement_key != '' }}"
        artifactory_username_set: "{{ artifactory_username is defined and artifactory_username != '' }}"
        artifactory_apikey_set: "{{ artifactory_apikey is defined and artifactory_apikey != '' }}"

    - name: Assert that required variables are set for ibm-entitlement
      ansible.builtin.assert:
        that:
          - (mas_entitlement_username_set and (ibm_entitlement_key_set or mas_entitlement_key_set)) or
            (artifactory_username_set and artifactory_apikey_set)
        fail_msg: "Username/Password not set to generate ibm-entitlement secret"

    # 1.4. Reset Channel and startingCSV Facts
    # -------------------------------------------------------------------------
    - name: Reset Channel and startingCSV Facts
      ansible.builtin.set_fact:
        app_channel: ""
        app_starting_csv: ""

    # 1.5. Provide initial debug
    # -------------------------------------------------------------------------
    - name: Debug Information
      ansible.builtin.debug:
        msg:
          - "MAS Instance ID ........ '{{ mas_instance_id }}'"
          - "MAS App ID ............. '{{ mas_app_id }}'"
          - "MAS App Namespace ...... '{{ mas_app_namespace }}'"
          - "MAS Upgrade Strategy ... '{{ mas_upgrade_strategy }}'"

# 2. Check App and Determine if OLM conversion is possible
# -----------------------------------------------------------------------------
- name: Check if Conversion is Possible
  block:
    # 2.1. Lookup namespace
    # -------------------------------------------------------------------------
    - name: "Lookup Namespace: {{ mas_app_namespace }}"
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Namespace
        name: "{{ mas_app_namespace }}"
      register: _app_namespace_lookup

    - name: Set found_app_namespace fact
      ansible.builtin.set_fact:
        found_app_namespace: "{{ _app_namespace_lookup.resources | length == 1 | default(false, true) }}"

    - name: "Namespace Not Found: {{ mas_app_namespace }}"
      ansible.builtin.debug:
        msg: "Could not find {{ mas_app_namespace }} in the cluster - Skipping conversion"
      when:
        - not found_app_namespace

    # 2.2. Check if a Subscription already exists
    # -------------------------------------------------------------------------
    - name: "Lookup Existing Subscription"
      kubernetes.core.k8s_info:
        api_version: v1alpha1
        kind: Subscription
        name: "{{ supported_apps[mas_app_id]['sub_name']) }}"
        namespace: "{{ mas_app_namespace }}"
      register: _app_subscription_instance
      when: found_app_namespace

    - name: Set found_app_subscription fact
      ansible.builtin.set_fact:
        found_app_subscription: "{{ _app_subscription_instance.resources | length == 1 | default(false, true) }}"
      when: found_app_namespace

    - name: Existing Subscription Found
      ansible.builtin.debug:
        msg: "Found existing Subscription for {{ supported_apps[mas_app_id]['name'] }}  - Skipping conversion"
      when:
        - found_app_namespace
        - found_app_subscription

    # 2.3. Lookup for CR Instance
    # -------------------------------------------------------------------------
    - name: "Lookup Current CR: {{ supported_apps[mas_app_id]['crd_kind'] }}"
      kubernetes.core.k8s_info:
        api_version: v1
        kind: "{{ supported_apps[mas_app_id]['crd_kind'] }}"
        name: "{{ mas_instance_id }}"
        namespace: "{{ mas_app_namespace }}"
      register: _app_installed_instance
      when:
        - found_app_namespace
        - not found_app_subscription

    - name: Set found_app_cr fact
      ansible.builtin.set_fact:
        found_app_cr: "{{ _app_installed_instance.resources | length == 1 | default(false, true) }}"
      when:
        - found_app_namespace
        - not found_app_subscription

    - name: "CR Not Found: {{ supported_apps[mas_app_id]['crd_kind'] }}"
      ansible.builtin.debug:
        msg: "Could not find {{ supported_apps[mas_app_id]['crd_kind'] }} CR with name {{ mas_instance_id }} - Skipping conversion"
      when:
        - found_app_namespace
        - not found_app_subscription
        - not found_app_cr

    # 2.4. Lookup 'status.versions.reconciled' for Channel and startingCSV
    # -------------------------------------------------------------------------
    - name: "Set Channel and startingCSV: {{ supported_apps[mas_app_id]['name'] }}"
      ansible.builtin.set_fact:
        app_channel: "{{ _app_installed_instance.resources[0].status.versions.reconciled | regex_search('^([0-9]+)\\.([0-9]+)', '\\1', '\\2') | join('.') + '.x' }}"
        app_starting_csv: "{{ supported_apps[mas_app_id]['csv_name'] }}.v{{ _app_installed_instance.resources[0].status.versions.reconciled }}"
      when:
        - found_app_namespace
        - not found_app_subscription
        - found_app_cr
        - _app_installed_instance.resources[0].status is defined
        - _app_installed_instance.resources[0].status.versions is defined
        - _app_installed_instance.resources[0].status.versions.reconciled is defined

    - name: Debug Channel and startingCSV
      ansible.builtin.debug:
        msg:
          - "app_channel ............... '{{ app_channel }}'"
          - "app_starting_csv .......... '{{ app_starting_csv }}'"
      when:
        - found_app_namespace
        - not found_app_subscription
        - found_app_cr

    - name: "'status.versions.reconciled' Not Found"
      ansible.builtin.debug:
        msg: "Could not find status.versions.reconciled in {{ supported_apps[mas_app_id]['crd_kind'] }} CR - Skipping conversion"
      when:
        - found_app_namespace
        - not found_app_subscription
        - found_app_cr
        - not app_channel
        - not app_starting_csv

# 3. Run the OLM Conversion tasks
# -----------------------------------------------------------------------------
- name: Run OLM Conversion Block
  when:
    - found_app_namespace
    - found_app_subscription is defined and not found_app_subscription
    - found_app_cr is defined and found_app_cr
    - app_channel != ''
    - app_starting_csv != ''
  block:
    # 3.1. Cleanup App Operator Deployment
    # -------------------------------------------------------------------------
    - name: "Delete Operator Deployment: {{ supported_apps[mas_app_id]['name'] }}"
      kubernetes.core.k8s:
        state: absent
        definition:
          apiVersion: v1
          kind: Deployment
          metadata:
            namespace: "{{ mas_app_namespace }}"
            name: "{{ supported_apps[mas_app_id]['op_name'] }}"
        wait: true
        wait_timeout: 300

    # 3.2. Cleanup App TM Operator
    # -------------------------------------------------------------------------
    - name: Delete Truststore Manager
      when: mas_app_id not in ['visualinspection', 'hputilities']
      block:
        # 3.2.1. Check for existing TM Subscription
        # ---------------------------------------------------------------------
        - name: Find existing TM Subscription
          kubernetes.core.k8s_info:
            api_version: v1alpha1
            kind: Subscription
            name: ibm-truststore-mgr
            namespace: "{{ mas_app_namespace }}"
          register: _app_tm_subscription

        # 3.2.2. Extract currentCSV from existing TM Subscription
        # ---------------------------------------------------------------------
        - name: Set _app_tm_current_csv fact
          ansible.builtin.set_fact:
            _app_tm_current_csv: "{{ _app_tm_subscription.resources[0].status.currentCSV }}"
          when:
            - _app_tm_subscription is defined
            - _app_tm_subscription.resources is defined
            - _app_tm_subscription.resources | length == 1
            - _app_tm_subscription.resources[0].status is defined
            - _app_tm_subscription.resources[0].status.currentCSV is defined

        # 3.2.3. Delete the existing TM Subscription
        # ---------------------------------------------------------------------
        - name: Delete TM Subscription
          kubernetes.core.k8s:
            state: absent
            definition:
              apiVersion: v1alpha1
              kind: Subscription
              metadata:
                namespace: "{{ mas_app_namespace }}"
                name: ibm-truststore-mgr
          when:
            - _app_tm_subscription is defined
            - _app_tm_subscription.resources is defined
            - _app_tm_subscription.resources | length == 1

        # 3.2.4. Delete the existing TM CSV
        # ---------------------------------------------------------------------
        - name: Delete TM CSV
          kubernetes.core.k8s:
            state: absent
            definition:
              apiVersion: v1alpha1
              kind: ClusterServiceVersion
              metadata:
                namespace: "{{ mas_app_namespace }}"
                name: "{{ _app_tm_current_csv }}"
          when:
            - _app_tm_subscription is defined
            - _app_tm_subscription.resources is defined
            - _app_tm_subscription.resources | length == 1
            - _app_tm_current_csv is defined
            - _app_tm_current_csv != ''

        # 3.2.5. If no Subscription exist just delete the TM Deployment
        # ---------------------------------------------------------------------
        - name: Delete TM Operator Deployment
          kubernetes.core.k8s:
            state: absent
            definition:
              apiVersion: v1
              kind: Deployment
              metadata:
                namespace: "{{ mas_app_namespace }}"
                name: ibm-truststore-mgr-controller-manager
          when:
            - _app_tm_subscription is defined
            - _app_tm_subscription.resources is defined
            - _app_tm_subscription.resources | length == 0

    # 3.3. Remove any existing OperatorGroups
    # -------------------------------------------------------------------------
    # Having multiple OperatorGroups will lead to conflict and prevent the
    # InstallPlan from working
    - name: Remove any existing OperatorGroups
      block:
        - name: Find existing OperatorGroup(s)
          kubernetes.core.k8s_info:
            api_version: v1
            kind: OperatorGroup
            namespace: "{{ mas_app_namespace }}"
          register: _app_op_group_lookup

        - name: "Delete Existing OperatorGroup(s)"
          kubernetes.core.k8s:
            state: absent
            definition:
              apiVersion: v1
              kind: OperatorGroup
              metadata:
                namespace: "{{ mas_app_namespace }}"
                name: "{{ item.metadata.name }}"
          loop: "{{ _app_op_group_lookup.resources }}"
          when:
            - _app_op_group_lookup is defined
            - _app_op_group_lookup.resources is defined
            - _app_op_group_lookup.resources | length > 0

    # 3.4. Install MAS Operator Using OLM
    # -------------------------------------------------------------------------
    - name: "Install Operator: {{ supported_apps[mas_app_id]['name'] }}"
      ansible.builtin.include_role:
        name: install_operator
      vars:
        namespace: "{{ mas_app_namespace }}"
        icr_username: "{{ mas_entitlement_username }}"
        icr_password: "{{ mas_entitlement_key }}"
        catalog_source: "{{ mas_catalog_source }}"
        operator_group: "{{ lookup('template', 'templates/operator-group.yml.j2') }}"
        subscription: "{{ lookup('template', 'templates/subscription.yml.j2') }}"

    # 3.5. Approve InstallPlan(s) when in Manual subscription
    # -------------------------------------------------------------------------
    - name: "Lookup and Approve Subscription: {{ supported_apps[mas_app_id]['name'] }}"
      when: mas_upgrade_strategy == 'Manual'
      block:
        - name: Lookup Operator install plan
          kubernetes.core.k8s_info:
            api_version: operators.coreos.com/v1alpha1
            kind: InstallPlan
            namespace: "{{ mas_app_namespace }}"
            label_selectors:
              - "operators.coreos.com/{{ supported_apps[mas_app_id]['csv_name'] }}.{{ mas_app_namespace }}"
          register: _mas_install_plan
          retries: 20
          delay: 60 # Retry for approx 20 minutes (60s * 20 attempts) before giving up
          until: _mas_install_plan.resources | length > 0

        - name: Approve the subscription install plan
          when:
            - _mas_install_plan is defined
            - _mas_install_plan.resources is defined
            - _mas_install_plan.resources | length > 0
            - _mas_install_plan.resources[0].status is defined
            - _mas_install_plan.resources[0].status.phase is defined
            - _mas_install_plan.resources[0].status.phase != "Complete"
          kubernetes.core.k8s:
            definition:
              apiVersion: operators.coreos.com/v1alpha1
              kind: InstallPlan
              metadata:
                name: "{{ _mas_install_plan.resources[0].metadata.name }}"
                namespace: "{{ mas_app_namespace }}"
              spec:
                approved: true

    # 3.6. Handle IBM Common Services Install plan approvals when
    #      upgrade strategy is set to Manual
    # -------------------------------------------------------------------------
    # ibm-common-services operators deployed by MAS will inherit the inherit
    # MAS upgrade strategy when its set to Manual, we need to iterate those to
    # ensure we do approve the first install plan otherwise MAS installation
    # won't succeed.
    - name: Handle IBM Common Services InstallPlan approvals
      ansible.builtin.include_tasks: tasks/ibm-common-services.yml
      when:
        - mas_upgrade_strategy == 'Manual'
        - mas_app_id == 'core'
      loop: "{{ ibm_common_services_subscription_labels }}"
