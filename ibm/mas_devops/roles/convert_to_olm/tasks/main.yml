---
# tasks file for convert_to_olm

# 1. Initial checks and debug
# -----------------------------------------------------------------------------
- name: Preliminary checks
  block:
    # 1.1. Check for mas_instance_id
    # -------------------------------------------------------------------------
    - name: Assert that mas_instance_id is defined
      ansible.builtin.assert:
        that:
          - mas_instance_id is defined
          - mas_instance_id != ''
        fail_msg: "mas_instance_id is not defined"

    # 1.2. Check for mas_app_id
    # -------------------------------------------------------------------------
    - name: Assert that mas_app_id is defined
      ansible.builtin.assert:
        that:
          - mas_app_id is defined
          - mas_app_id != ''
        fail_msg: "mas_app_id is not defined"

    - name: Assert that mas_app_id is supported
      ansible.builtin.assert:
        that:
          - mas_app_id in supported_apps
        fail_msg: "mas_app_id: {{ mas_app_id }} is not supported. Supported options are {{ supported_apps | flatten }}"

    # 1.3. Check for required vars to generate ibm-entitlement secret
    # -------------------------------------------------------------------------
    - name: Validate required variables to generate ibm-entitlement pull secret
      ansible.builtin.set_fact:
        mas_entitlement_username_set: "{{ mas_entitlement_username is defined and mas_entitlement_username != '' }}"
        ibm_entitlement_key_set: "{{ ibm_entitlement_key is defined and ibm_entitlement_key != '' }}"
        mas_entitlement_key_set: "{{ mas_entitlement_key is defined and mas_entitlement_key != '' }}"
        artifactory_username_set: "{{ artifactory_username is defined and artifactory_username != '' }}"
        artifactory_token_set: "{{ artifactory_token is defined and artifactory_token != '' }}"

    - name: Assert that required variables are set to generate ibm-entitlement pull secret
      ansible.builtin.assert:
        that:
          - (mas_entitlement_username_set and (ibm_entitlement_key_set or mas_entitlement_key_set)) or
            (artifactory_username_set and artifactory_token_set)
        fail_msg: "Username/Password not set to generate ibm-entitlement secret"

    # 1.4. Provide initial debug
    # -------------------------------------------------------------------------
    - name: Debug Information
      ansible.builtin.debug:
        msg:
          - "MAS Instance ID ........ '{{ mas_instance_id }}'"
          - "MAS App ID ............. '{{ mas_app_id }}'"
          - "MAS App Namespace ...... '{{ mas_app_namespace }}'"

# 2. Check App and Determine if OLM conversion is possible
# -----------------------------------------------------------------------------
- name: Check if Conversion is Possible
  block:
    # 2.1. Lookup namespace
    # -------------------------------------------------------------------------
    - name: "Lookup Namespace: {{ mas_app_namespace }}"
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Namespace
        name: "{{ mas_app_namespace }}"
      register: _app_namespace_lookup

    - name: Set found_app_namespace fact
      ansible.builtin.set_fact:
        found_app_namespace: "{{ _app_namespace_lookup.resources | length == 1 | default(false, true) }}"

    - name: "Namespace Not Found: {{ mas_app_namespace }}"
      ansible.builtin.debug:
        msg: "Could not find {{ mas_app_namespace }} in the cluster - Skipping conversion"
      when:
        - not found_app_namespace

    # 2.2. Check if a Subscription already exists
    # -------------------------------------------------------------------------
    - name: "Lookup Existing Subscription"
      kubernetes.core.k8s_info:
        api_version: operators.coreos.com/v1alpha1
        kind: Subscription
        name: "{{ supported_apps[mas_app_id]['sub_name'] }}"
        namespace: "{{ mas_app_namespace }}"
      register: _app_subscription_instance
      when: found_app_namespace

    - name: Set found_app_subscription fact
      ansible.builtin.set_fact:
        found_app_subscription: "{{ _app_subscription_instance.resources | default([], true) | length == 1 }}"

    - name: Existing Subscription Found
      ansible.builtin.debug:
        msg: "Found existing Subscription for {{ supported_apps[mas_app_id]['name'] }}  - Skipping conversion"
      when:
        - found_app_namespace
        - found_app_subscription

    # 2.3. Subscription does not exist - gather data needed for conversion
    # -------------------------------------------------------------------------
    - name: No Subscription found - look for CR
      when:
        - found_app_namespace
        - not found_app_subscription
      block:
        # 2.3.1. Lookup for CR Instance
        # ---------------------------------------------------------------------
        - name: "Lookup Current CR: {{ supported_apps[mas_app_id]['crd_kind'] }}"
          kubernetes.core.k8s_info:
            api_version: v1
            kind: "{{ supported_apps[mas_app_id]['crd_kind'] }}"
            name: "{{ mas_instance_id }}"
            namespace: "{{ mas_app_namespace }}"
          register: _app_installed_instance

        - name: "Assert that CR exists: {{ supported_apps[mas_app_id]['crd_kind'] }}"
          ansible.builtin.assert:
            that:
              - _app_installed_instance is defined
              - _app_installed_instance.resources is defined
              - _app_installed_instance.resources | length == 1
            fail_msg: "Could not find {{ supported_apps[mas_app_id]['crd_kind'] }} CR with name {{ mas_instance_id }}"

        # 2.3.2. Lookup 'status.versions.reconciled'
        #        Set channel and current version
        # ---------------------------------------------------------------------
        - name: Reset app_channel and app_current_version facts
          ansible.builtin.set_fact:
            app_channel: ""
            app_current_version: ""

        # Predict uses 'version' without 's' up to 8.7.x
        - name: "Set app_versions_key fact"
          ansible.builtin.set_fact:
            app_versions_key: "{{ (mas_app_id == 'predict') | ternary('version', 'versions') | default('versions', true) }}"

        - name: "Assert that 'status.{{ app_versions_key }}.reconciled' exists"
          ansible.builtin.assert:
            that:
              - _app_installed_instance.resources[0].status is defined
              - _app_installed_instance.resources[0]['status'][app_versions_key] is defined
              - _app_installed_instance.resources[0]['status'][app_versions_key].reconciled is defined
            fail_msg: "Could not find 'status.versions.reconciled' in {{ supported_apps[mas_app_id]['crd_kind'] }}"

        - name: "Set app_channel and app_current_version: {{ supported_apps[mas_app_id]['name'] }}"
          ansible.builtin.set_fact:
            app_current_version: "{{ _app_installed_instance.resources[0]['status'][app_versions_key].reconciled | regex_search('([0-9]+)\\.([0-9]+)\\.([0-9]+)') }}"
            app_channel: "{{ _app_installed_instance.resources[0]['status'][app_versions_key].reconciled | regex_search('^([0-9]+)\\.([0-9]+)') + '.x' }}"

        - name: Debug app_channel and app_current_version
          ansible.builtin.debug:
            msg:
              - "app_channel ............... '{{ app_channel }}'"
              - "app_current_version ....... '{{ app_current_version }}'"

        - name: Assert that app_channel and app_current_version are set
          ansible.builtin.assert:
            that:
              - app_channel != ""
              - app_current_version != ""
            fail_msg: "'app_channel' and/or 'app_current_version' not set"

        # 2.3.3. Check channel and current version in PackageManifest
        #        We want to make sure that no downgrade happens
        # ---------------------------------------------------------------------
        - name: "Lookup PackageManifest: {{ supported_apps[mas_app_id]['csv_name'] }}"
          kubernetes.core.k8s_info:
            api_version: v1
            kind: PackageManifest
            name: "{{ supported_apps[mas_app_id]['csv_name'] }}"
            namespace: openshift-marketplace
          register: _app_package_manifest_lookup

        - name: Assert that PackageManifest exists
          ansible.builtin.assert:
            that:
              - _app_package_manifest_lookup is defined
              - _app_package_manifest_lookup.resources is defined
              - _app_package_manifest_lookup.resources | length == 1
            fail_msg: "PackageManifest not found: {{ supported_apps[mas_app_id]['csv_name'] }}"

        - name: Get channels list from PackageManifest
          ansible.builtin.set_fact:
            app_channels_in_pm: "{{ _app_package_manifest_lookup.resources[0].status.channels | default([], true) }}"

        - name: Find app channel index in channels list
          ansible.builtin.set_fact:
            app_channel_idx_in_pm: "{{ lookup('ansible.utils.index_of', data=app_channels_in_pm, test='eq', value=app_channel, key='name') }}"

        - name: Set app channel object from channels list
          ansible.builtin.set_fact:
            app_channel_in_pm: "{{ app_channels_in_pm[app_channel_idx_in_pm | int] | default([], true) }}"

        - name: Set channel_current_csv fact
          ansible.builtin.set_fact:
            channel_current_csv: "{{ app_channel_in_pm is defined and app_channel_in_pm['currentCSV'] | default('', true) | regex_search('([0-9]+)\\.([0-9]+)\\.([0-9]+)') }}"

        - name: Assert that channel_current_csv is defined
          ansible.builtin.assert:
            that:
              - channel_current_csv is defined
              - channel_current_csv != ''
            fail_msg: "Could not find currentCSV from PackageManifest for {{ supported_apps[mas_app_id]['csv_name'] }}"

        - name: Assert that we don't downgrade
          ansible.builtin.assert:
            that:
              - app_current_version is version(channel_current_csv, '<=')
            fail_msg: "The currentCSV {{ channel_current_csv }} in the PackageManifest for channel {{ app_channel }} is lower than the currently deployed version {{ app_current_version }}. Please update your catalog."

# 3. Run the OLM Conversion tasks
# -----------------------------------------------------------------------------
- name: Run OLM Conversion Block
  when:
    - found_app_namespace
    - not found_app_subscription
  block:
    # 3.1. Cleanup App Operator Deployment
    # -------------------------------------------------------------------------
    - name: "Delete Operator Deployment: {{ supported_apps[mas_app_id]['op_name'] }}"
      kubernetes.core.k8s:
        state: absent
        definition:
          apiVersion: v1
          kind: Deployment
          metadata:
            namespace: "{{ mas_app_namespace }}"
            name: "{{ supported_apps[mas_app_id]['op_name'] }}"
        wait: true
        wait_timeout: 300

    # 3.2. Cleanup App TM Operator
    # -------------------------------------------------------------------------
    - name: Delete Truststore Manager
      when: mas_app_id not in ['assist', 'visualinspection', 'hputilities']
      block:
        # 3.2.1. Check for existing TM Subscription
        # ---------------------------------------------------------------------
        - name: Find existing TM Subscription
          kubernetes.core.k8s_info:
            api_version: operators.coreos.com/v1alpha1
            kind: Subscription
            name: ibm-truststore-mgr
            namespace: "{{ mas_app_namespace }}"
          register: _app_tm_subscription

        # 3.2.2. Extract currentCSV from existing TM Subscription
        # ---------------------------------------------------------------------
        - name: Set _app_tm_current_csv fact
          ansible.builtin.set_fact:
            _app_tm_current_csv: "{{ _app_tm_subscription.resources[0].status.currentCSV }}"
          when:
            - _app_tm_subscription is defined
            - _app_tm_subscription.resources is defined
            - _app_tm_subscription.resources | length == 1
            - _app_tm_subscription.resources[0].status is defined
            - _app_tm_subscription.resources[0].status.currentCSV is defined

        # 3.2.3. Delete the existing TM Subscription
        # ---------------------------------------------------------------------
        - name: Delete TM Subscription
          kubernetes.core.k8s:
            state: absent
            definition:
              apiVersion: operators.coreos.com/v1alpha1
              kind: Subscription
              metadata:
                namespace: "{{ mas_app_namespace }}"
                name: ibm-truststore-mgr
            wait: true
            wait_timeout: 300
          when:
            - _app_tm_subscription is defined
            - _app_tm_subscription.resources is defined
            - _app_tm_subscription.resources | length == 1

        # 3.2.4. Delete the existing TM CSV
        # ---------------------------------------------------------------------
        - name: Delete TM CSV
          kubernetes.core.k8s:
            state: absent
            definition:
              apiVersion: v1alpha1
              kind: ClusterServiceVersion
              metadata:
                namespace: "{{ mas_app_namespace }}"
                name: "{{ _app_tm_current_csv }}"
            wait: true
            wait_timeout: 300
          when:
            - _app_tm_subscription is defined
            - _app_tm_subscription.resources is defined
            - _app_tm_subscription.resources | length == 1
            - _app_tm_current_csv is defined
            - _app_tm_current_csv != ''

        # 3.2.5. If no Subscription exist just delete the TM Deployment
        # ---------------------------------------------------------------------
        - name: Delete TM Operator Deployment
          kubernetes.core.k8s:
            state: absent
            definition:
              apiVersion: v1
              kind: Deployment
              metadata:
                namespace: "{{ mas_app_namespace }}"
                name: "{{ tm_op_name }}"
            wait: true
            wait_timeout: 300
          when:
            - _app_tm_subscription is defined
            - _app_tm_subscription.resources is defined
            - _app_tm_subscription.resources | length == 0

    # 3.3. Remove any existing OperatorGroups
    # -------------------------------------------------------------------------
    # Having multiple OperatorGroups will lead to conflict and prevent the
    # InstallPlan from working
    - name: Remove any existing OperatorGroups
      block:
        - name: Find existing OperatorGroup(s)
          kubernetes.core.k8s_info:
            api_version: v1
            kind: OperatorGroup
            namespace: "{{ mas_app_namespace }}"
          register: _app_op_group_lookup

        - name: "Delete Existing OperatorGroup(s)"
          kubernetes.core.k8s:
            state: absent
            definition:
              apiVersion: v1
              kind: OperatorGroup
              metadata:
                namespace: "{{ mas_app_namespace }}"
                name: "{{ item.metadata.name }}"
            wait: true
            wait_timeout: 300
          loop: "{{ _app_op_group_lookup.resources }}"
          when:
            - _app_op_group_lookup is defined
            - _app_op_group_lookup.resources is defined
            - _app_op_group_lookup.resources | length > 0

    # 3.4. Install MAS Operator Using OLM
    # -------------------------------------------------------------------------
    - name: "Install Operator: {{ supported_apps[mas_app_id]['name'] }}"
      ansible.builtin.include_role:
        name: install_operator
      vars:
        namespace: "{{ mas_app_namespace }}"
        icr_username: "{{ mas_entitlement_username }}"
        icr_password: "{{ mas_entitlement_key }}"
        catalog_source: "{{ mas_catalog_source }}"
        operator_group: "{{ lookup('template', 'templates/operator-group.yml.j2') }}"
        subscription: "{{ lookup('template', 'templates/subscription.yml.j2') }}"

    # 3.5. Verify the (main + TM) operator pods are running and ready
    # -------------------------------------------------------------------------
    - name: "Check if operator is ready: {{ supported_apps[mas_app_id]['op_name'] }}"
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: "{{ supported_apps[mas_app_id]['op_name'] }}"
        namespace: "{{ mas_app_namespace }}"
      retries: 20
      delay: 30 # 20 * 30 seconds = 10 minutes
      until:
        - (_app_op_lookup.resources | length) > 0 and _app_op_lookup.resources[0].status.readyReplicas is defined
        - _app_op_lookup.resources[0].status.readyReplicas ==  _app_op_lookup.resources[0].status.replicas
      register: _app_op_lookup

    - name: "Check if operator is ready: {{ tm_op_name }}"
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: "{{ tm_op_name }}"
        namespace: "{{ mas_app_namespace }}"
      retries: 20
      delay: 30 # 20 * 30 seconds = 10 minutes
      until:
        - (_app_tm_op_lookup.resources | length) > 0 and _app_tm_op_lookup.resources[0].status.readyReplicas is defined
        - _app_tm_op_lookup.resources[0].status.readyReplicas ==  _app_tm_op_lookup.resources[0].status.replicas
      register: _app_tm_op_lookup
      when: mas_app_id not in ['assist', 'visualinspection', 'hputilities']
