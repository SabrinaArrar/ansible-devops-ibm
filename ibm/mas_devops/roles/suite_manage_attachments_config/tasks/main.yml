---
# mas_instance_id is required in order to be able to lookup for manage application resources
- name: "Fail if mas_instance_id is not provided"
  assert:
    that: mas_instance_id is defined and mas_instance_id != ""
    fail_msg: "mas_instance_id property is required"

# mas_workspace_id is required in order to be able to lookup for manage application resources
- name: "Fail if mas_workspace_id is not provided"
  assert:
    that: mas_workspace_id is defined and mas_workspace_id != ""
    fail_msg: "mas_workspace_id property is required"

# db2_instance_name is required in order to be able to lookup for manage application database
- name: "Fail if db2_instance_name is not provided"
  assert:
    that: db2_instance_name is defined and db2_instance_name != ""
    fail_msg: "db2_instance_name property is required"

# mas_manage_attachments_provider is required
- name: "Fail if mas_manage_attachments_provider is not provided"
  assert:
    that:
      - mas_manage_attachments_provider is defined and mas_manage_attachments_provider in ['filestorage', 'ibm', 'aws']
    fail_msg: "mas_manage_attachments_provider property is required and must be set to one of the supported storage providers: {{ mas_manage_attachments_provider_supported }}"

- name: "Fail if mas_app_id is not provided"
  assert:
    that:
      - mas_app_id is defined and mas_app_id != ""
      - mas_app_id is in ['manage', 'health']
    fail_msg: "mas_app_id property is required and must be set to either 'manage' or 'health'"

# Lookup if Manage attachments configmap is present
# -----------------------------------------------------------------------------
- name: "Lookup attachments configmap"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: ConfigMap
    name: "{{ mas_instance_id }}-{{ mas_workspace_id }}-manage-attachments-configmap"
    namespace: "mas-{{ mas_instance_id }}-{{ mas_app_id }}"
  register: manage_attach_cm_output

# either set the var with the current attachment provider or set this to false
- set_fact:
    mas_manage_attachments_provider_current: "{{ manage_attach_cm_output.resources[0].data.mas_manage_attachments_provider | default(false, true )}}"

- debug:
    msg:
      - "Chosen Manage attachments provider ................ {{ mas_manage_attachments_provider }}"
      - "Existing Manage attachments provider .............. {{ mas_manage_attachments_provider_current | default('<Unknown>') }}"
      - "{{ (mas_manage_attachments_provider_current == mas_manage_attachments_provider) | ternary('Manage attachments provider has not changed, therefore skipping as there is no further actions needed','Manage attachments provider has either changed or never configured, therefore it will be configured now...') }}"

# only configure Manage attachments if this was not configured before or Manage attachments provider has not changed
- when: mas_manage_attachments_provider_current != mas_manage_attachments_provider
  block:
    # Configure COS bucket for Manage attachments, not needed when using pvc/filestorage
    - when: mas_manage_attachments_provider in ['ibm', 'aws']
      include_tasks: "configure-buckets.yml"

    # Update Manage database with COS information
    - include_tasks: "configure-database.yml"

    # Restart Manage bundle pods to pick up the storage provider configuration
    - include_tasks: "restart-manage-server.yml"

    # Once everything is successful, create the configmap to store the manage attachments provider so the role is idempotent and we can determine if this was already configured
    - name: "Store manage attachments provider in configmap"
      kubernetes.core.k8s:
        apply: yes
        template: "templates/configmap.yml.j2"
