---
# Input parameters:
#   _rt_playbook_name
#   _rt_role_name
#   _rt_env


# Set task variables
# -----------------------------------------------------------------------------
- name: "Set fact: task variables"
  set_fact:
    masbr_rt_namespace: "{{ masbr_job_component.namespace }}"

- name: "Set fact: task name (backup)"
  when: masbr_task_type == "backup"
  set_fact:
    # Format '<task_type>-<backup_type>-<job_version>'
    # - Job name must be no more than 63 characters and in lower case:
    #     'backup-full-20240508151053'
    masbr_rt_k8s_name: >-
      {{ masbr_task_type }}-{{ masbr_backup_type }}-{{ masbr_job_version }}

- name: "Set fact: task name (schedule)"
  when: masbr_task_type == "schedule"
  set_fact:
    # Format '<task_type>-<backup_type>-<timestamp>'
    # - CronJob name must be no longer than 52 characters and in lower case:
    #     'schedule-incr-20240424210110'
    masbr_rt_k8s_name: >-
      {{ masbr_task_type }}-{{ masbr_backup_type }}-{{ masbr_timestamp_format | strftime }}

- name: "Set fact: task name (restore)"
  when: masbr_task_type == "restore"
  set_fact:
    # Format '<task_type>-<restore_from_type>-<restore_from_version>-<job_version>'
    # - Job name must be no more than 63 characters and in lower case:
    #     'restore-full-20240508151704'
    masbr_rt_k8s_name: >-
      {{ masbr_task_type }}-{{ masbr_restore_from_yaml.type }}-{{ masbr_restore_from_version }}-{{ masbr_job_version }}

- name: "Debug: run task Job name"
  debug:
    msg: "{{ masbr_rt_k8s_name }}"

# masbr_rt_cmds
- name: "Set fact: run playbook command"
  when: _rt_playbook_name is defined and _rt_playbook_name | length > 0
  set_fact:
    masbr_rt_cmds: >
      ansible-playbook ibm.mas_devops.{{ _rt_playbook_name }}

- name: "Set fact: run role command"
  when: _rt_role_name is defined and _rt_role_name | length > 0
  set_fact:
    masbr_rt_cmds: >
      ROLE_NAME={{ _rt_role_name }} ansible-playbook ibm.mas_devops.run_role

- name: "Debug: run task Job command"
  debug:
    msg: "{{ masbr_rt_cmds }}"

# masbr_rt_env
- name: "Set fact: default common env variables"
  set_fact:
    masbr_rt_common_env:
      - name: "ANSIBLE_LOG_PATH"
        value: "/tmp/ansible.log"
      - name: "MASBR_CONFIRM_CLUSTER"
        value: "false"
      - name: "MASBR_CREATE_TASK_JOB"
        value: "false"
      - name: "MASBR_RUNNING_IN_TASK_JOB"
        value: "true"
      - name: "MASBR_TASK_JOB_NAMESPACE"
        value: "{{ masbr_rt_namespace }}"
      - name: "MASBR_TASK_JOB_NAME"
        value: "{{ masbr_rt_k8s_name }}"
      - name: "MASBR_ACTION"
        value: "{{ masbr_action | default('backup') }}"

- name: "Set fact: add additional common env variables (staring with 'MASBR_')"
  set_fact:
    masbr_rt_common_env: "{{ masbr_rt_common_env + [item] }}"
  with_items: >-
    {{ ansible_env |
    ansible.utils.keep_keys(target=['MASBR_'], matching_parameter='starts_with') |
    dict2items(key_name='name', value_name='value') }}
  # Exclude below 'MASBR_' env vars because we will override them
  when: >-
    item.name not in [
      'MASBR_CONFIRM_CLUSTER',
      'MASBR_CREATE_TASK_JOB',
      'MASBR_RUNNING_IN_TASK_JOB',
      'MASBR_TASK_JOB_NAMESPACE',
      'MASBR_TASK_JOB_NAME',
      'MASBR_STORAGE_CLOUD_RCLONE_FILE'
    ]

- name: "Set fact: add role specific env variables"
  set_fact:
    masbr_rt_env: "{{ masbr_rt_common_env + _rt_env | default([]) }}"

- name: "Debug: run task Job env"
  debug:
    msg: "{{ masbr_rt_env }}"


# Create configmap to save rclone config
# -----------------------------------------------------------------------------
- name: "Create configmap to save rclone config"
  when: masbr_use_cloud_storage
  block:
    # rclone config
    - name: "Get rclone config"
      shell: >
        cat {{ masbr_storage_cloud_rclone_file }}
      register: _rclone_config_content

    - name: "Create configmap to save rclone config"
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: "{{ masbr_rt_k8s_name }}"
            namespace: "{{ masbr_rt_namespace }}"
            labels:
              mas.ibm.com/masbr: ""
              masbr-type: "{{ masbr_task_type}}"
              masbr-job: "{{ masbr_job_name }}"
          data:
            rclone.conf: "{{ _rclone_config_content.stdout }}"
        wait: true

    - name: "Set fact: add rclone config file to env variables"
      set_fact:
        masbr_rt_env: >-
          {{ masbr_rt_env + [
            {'name': 'MASBR_STORAGE_CLOUD_RCLONE_FILE', 'value': '/mnt/configmap/rclone.conf'}
          ] }}


# Create Job
# -----------------------------------------------------------------------------
- name: "Create cleanup Job"
  include_tasks: "{{ role_path }}/../../common_tasks/backup_restore/create_cleanup_job.yml"
  vars:
    masbr_cleanup_namespace: "{{ masbr_rt_namespace }}"

- name: "Create run tasks Job"
  kubernetes.core.k8s:
    template: "{{ role_path }}/../../common_tasks/templates/backup_restore/run_task_job.yml.j2"
    state: present
    wait: true


# ONLY FOR DEV
# -----------------------------------------------------------------------------
- name: "Create env file for running tasks in docker"
  when: __masbr_dev_create_env_file
  block:
    - name: "Create env file"
      shell: >
        rm -f /tmp/run_task_job.env;
        touch /tmp/run_task_job.env

    - name: "Write env file"
      shell: >
        echo "{{ item.name }}={{ item.value }}" >> /tmp/run_task_job.env
      loop: "{{ masbr_rt_env }}"

    - name: "Get OCP login command"
      shell: >
        echo "oc login --server=$(oc whoami --show-server) --token=$(oc whoami --show-token)"
      register: _oc_login_output

    - name: "Run docker command"
      debug:
        msg:
          - >-
            Step 1: podman run -ti -v {{ masbr_storage_cloud_rclone_file | dirname }}:/mnt/configmap
            --env-file=/tmp/run_task_job.env quay.io/ibmmas/cli:local
          - "Step 2: {{ _oc_login_output.stdout }}"
          - "Step 3: {{ masbr_rt_cmds }}"


# Display information of the created task
# -----------------------------------------------------------------------------
- name: "Get OCP URL"
  shell: >-
    echo "$(oc whoami --show-console)/k8s/ns/{{ masbr_rt_namespace }}/{{ 'cronjobs'
    if masbr_task_type == 'schedule' else 'jobs' }}/{{ masbr_rt_k8s_name }}"
  register: _oc_url_output

- name: "Summary of backup job"
  when: masbr_job_type == "backup"
  debug:
    msg:
      - "Backup version ..................... {{ masbr_job_version }}"
      - "Backup from ........................ {{ masbr_backup_from | default('<none>', true) }}"
      - "Job name ........................... {{ masbr_rt_k8s_name }}"
      - "Job link ........................... {{ _oc_url_output.stdout }}"

- name: "Summary of restore job"
  when: masbr_job_type == "restore"
  debug:
    msg:
      - "Restore version .................... {{ masbr_job_version }}"
      - "Restore from ....................... {{ masbr_restore_from | default('<none>', true) }}"
      - "Job name ........................... {{ masbr_rt_k8s_name }}"
      - "Job link ........................... {{ _oc_url_output.stdout }}"
